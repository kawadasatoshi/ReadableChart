<container version="1.0" xmlns="urn:oasis:names:tc:opendocument:xmlns:container">
  <child>
    <type>file</type>
    <name>0vtkConfigurationManagerXML.cls</name>
    <child>
      <type>sub</type>
      <name>Class_Terminate</name>
      <code_list>Private Sub Class_Terminate()
    Set m_DOMDocument = Nothing
End Sub</code_list>
    </child>
    <child>
      <type>sub</type>
      <name>init</name>
      <code_list>Public Sub init(ByVal XMLFilePath As String)
    Dim fso As New FileSystemObject, DDoc As MSXML2.DOMDocument
    Dim projectName As String, rootPath As String
    If fso.FileExists(XMLFilePath) Then
        Set DDoc = New MSXML2.DOMDocument
        DDoc.Load XMLFilePath
        DDoc.setProperty "SelectionLanguage", "XPath"  ' for the use of the contains() function of XPath
        If DDoc.parseError.ErrorCode &lt;&gt; 0 Then
            Err.Raise Number:=VTK_INVALID_XML_FILE, Source:="init:vtkConfigurationManagerXML", Description:="Parse error of " &amp; XMLFilePath &amp; " : " &amp; DDoc.parseError.reason
        End If
        If DDoc.SelectSingleNode("/vtkConf/info/vtkConfigurationsVersion").Text &lt;&gt; "2.0" Then
            Err.Raise Number:=VTK_OBSOLETE_CONFIGURATION_SHEET, Source:="init:vtkConfigurationManagerXML", Description:="Bad version of XML File : 2.0 expected."
        End If
       On Error GoTo M_Error
        projectName = DDoc.SelectSingleNode("/vtkConf/info/projectName").Text
        rootPath = fso.GetParentFolderName(fso.GetParentFolderName(XMLFilePath))
       On Error GoTo 0
        Set m_DOMDocument = DDoc
        m_projectName = projectName
        m_rootPath = rootPath
       Else
        Err.Raise Number:=VTK_WRONG_FILE_PATH, Source:="init:vtkConfigurationManagerXML", Description:="The File " &amp; XMLFilePath &amp; " is unreachable."
    End If
    Exit Sub
M_Error:
    Err.Raise Number:=VTK_INVALID_XML_FILE, Source:="init:vtkConfigurationManagerXML", Description:="Parse error of " &amp; XMLFilePath &amp; " : " &amp; DDoc.parseError.reason
End Sub</code_list>
      <call>projectName</call>
      <call>projectName</call>
    </child>
    <child>
      <type>function</type>
      <name>configuration</name>
      <code_list>Public Function configuration(n As Integer) As String
    If n &gt; 0 And n &lt;= configurationCount Then
        configuration = m_DOMDocument.SelectSingleNode("/vtkConf/configuration[@cID=""c" &amp; n &amp; """]/name").Text
       Else
        configuration = ""
    End If
End Function</code_list>
      <call>configurationCount</call>
      <call>configuration</call>
      <call>configuration</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkConfigurationManager_configuration</name>
      <code_list>Public Function vtkConfigurationManager_configuration(n As Integer) As String
    vtkConfigurationManager_configuration = configuration(n)
End Function</code_list>
      <call>vtkConfigurationManager_configuration</call>
    </child>
    <child>
      <type>sub</type>
      <name>raiseReadOnlyError</name>
      <code_list>Private Sub raiseReadOnlyError(Source As String)
    Err.Raise Number:=VTK_READONLY_FILE, Source:=Source, Description:="A XML Configuration File is considered Read-Only"
End Sub</code_list>
    </child>
    <child>
      <type>function</type>
      <name>addConfiguration</name>
      <code_list>Public Function addConfiguration(configuration As String, Optional path As String = "", Optional template As String = "", Optional projectName As String = "", Optional comment As String = "") As Integer
    raiseReadOnlyError Source:="addConfiguration:vtkConfigurationManagerXML"
End Function</code_list>
      <call>projectName</call>
      <call>raiseReadOnlyError</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkConfigurationManager_addConfiguration</name>
      <code_list>Public Function vtkConfigurationManager_addConfiguration(configuration As String, Optional path As String = "", Optional template As String = "", Optional projectName As String = "", Optional comment As String = "") As Integer
    vtkConfigurationManager_addConfiguration = addConfiguration(configuration, path, template, projectName, comment)
End Function</code_list>
      <call>projectName</call>
      <call>vtkConfigurationManager_addConfiguration</call>
    </child>
    <child>
      <type>function</type>
      <name>configurations</name>
      <code_list>Public Function configurations() As Collection
    Dim col As New Collection, i As Integer, c As vtkConfiguration
    For i = 1 To configurationCount
        Set c = New vtkConfiguration
        c.init confManager:=Me, confNumber:=i
        col.Add Item:=c, Key:=configuration(i)
    Next i
    Set configurations = col
End Function</code_list>
      <call>configurations</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkConfigurationManager_configurations</name>
      <code_list>Public Function vtkConfigurationManager_configurations() As Collection
    Set vtkConfigurationManager_configurations = configurations
End Function</code_list>
      <call>vtkConfigurationManager_configurations</call>
    </child>
    <child>
      <type>function</type>
      <name>getConfigurationNumber</name>
      <code_list>Public Function getConfigurationNumber(configuration As String) As Integer
    Dim textValue As String
   On Error Resume Next
    textValue = m_DOMDocument.SelectSingleNode("/vtkConf/configuration[name=""" &amp; configuration &amp; """]/@cID").Text
   On Error GoTo 0
    If textValue = "" Then
        getConfigurationNumber = 0
       Else
        getConfigurationNumber = CInt(Right$(textValue, Len(textValue) - 1))
    End If
End Function</code_list>
      <call>configuration</call>
      <call>getConfigurationNumber</call>
      <call>getConfigurationNumber</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkConfigurationManager_getConfigurationNumber</name>
      <code_list>Public Function vtkConfigurationManager_getConfigurationNumber(configuration As String) As Integer
    vtkConfigurationManager_getConfigurationNumber = getConfigurationNumber(configuration)
End Function</code_list>
      <call>vtkConfigurationManager_getConfigurationNumber</call>
    </child>
    <child>
      <type>function</type>
      <name>getConfigurationPathWithNumber</name>
      <code_list>Public Function getConfigurationPathWithNumber(n As Integer) As String
    If n &gt; 0 And n &lt;= configurationCount Then
        getConfigurationPathWithNumber = m_DOMDocument.SelectSingleNode("/vtkConf/configuration[@cID=""c" &amp; n &amp; """]/path").Text
       Else
        getConfigurationPathWithNumber = ""
    End If
End Function</code_list>
      <call>configurationCount</call>
      <call>getConfigurationPathWithNumber</call>
      <call>getConfigurationPathWithNumber</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkConfigurationManager_getConfigurationPathWithNumber</name>
      <code_list>Public Function vtkConfigurationManager_getConfigurationPathWithNumber(n As Integer) As String
    vtkConfigurationManager_getConfigurationPathWithNumber = getConfigurationPathWithNumber(n)
End Function</code_list>
      <call>vtkConfigurationManager_getConfigurationPathWithNumber</call>
    </child>
    <child>
      <type>sub</type>
      <name>setConfigurationPathWithNumber</name>
      <code_list>Public Sub setConfigurationPathWithNumber(n As Integer, path As String)
    raiseReadOnlyError Source:="setConfigurationPathWithNumber:vtkConfigurationManagerXML"
End Sub</code_list>
      <call>raiseReadOnlyError</call>
    </child>
    <child>
      <type>sub</type>
      <name>vtkConfigurationManager_setConfigurationPathWithNumber</name>
      <code_list>Public Sub vtkConfigurationManager_setConfigurationPathWithNumber(n As Integer, path As String)
    setConfigurationPathWithNumber n, path
End Sub</code_list>
      <call>setConfigurationPathWithNumber</call>
    </child>
    <child>
      <type>function</type>
      <name>getConfigurationPath</name>
      <code_list>Public Function getConfigurationPath(configuration As String) As String
    getConfigurationPath = getConfigurationPathWithNumber(getConfigurationNumber(configuration))
End Function</code_list>
      <call>getConfigurationPath</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkConfigurationManager_getConfigurationPath</name>
      <code_list>Public Function vtkConfigurationManager_getConfigurationPath(configuration As String) As String
    vtkConfigurationManager_getConfigurationPath = getConfigurationPath(configuration)
End Function</code_list>
      <call>vtkConfigurationManager_getConfigurationPath</call>
    </child>
    <child>
      <type>sub</type>
      <name>setConfigurationPath</name>
      <code_list>Public Sub setConfigurationPath(configuration As String, path As String)
    raiseReadOnlyError Source:="setConfigurationPath:vtkConfigurationManagerXML"
End Sub</code_list>
      <call>raiseReadOnlyError</call>
    </child>
    <child>
      <type>sub</type>
      <name>vtkConfigurationManager_setConfigurationPath</name>
      <code_list>Public Sub vtkConfigurationManager_setConfigurationPath(configuration As String, path As String)
    setConfigurationPath configuration, path
End Sub</code_list>
      <call>setConfigurationPath</call>
    </child>
    <child>
      <type>function</type>
      <name>getConfigurationProjectNameWithNumber</name>
      <code_list>Public Function getConfigurationProjectNameWithNumber(n As Integer) As String
    If n &gt; 0 And n &lt;= configurationCount Then
        getConfigurationProjectNameWithNumber = m_DOMDocument.SelectSingleNode("/vtkConf/configuration[@cID=""c" &amp; n &amp; """]/title").Text
       Else
        getConfigurationProjectNameWithNumber = ""
    End If
End Function</code_list>
      <call>configurationCount</call>
      <call>getConfigurationProjectNameWithNumber</call>
      <call>getConfigurationProjectNameWithNumber</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkConfigurationManager_getConfigurationProjectNameWithNumber</name>
      <code_list>Public Function vtkConfigurationManager_getConfigurationProjectNameWithNumber(n As Integer) As String
    vtkConfigurationManager_getConfigurationProjectNameWithNumber = getConfigurationProjectNameWithNumber(n)
End Function</code_list>
      <call>vtkConfigurationManager_getConfigurationProjectNameWithNumber</call>
    </child>
    <child>
      <type>sub</type>
      <name>setConfigurationProjectNameWithNumber</name>
      <code_list>Public Sub setConfigurationProjectNameWithNumber(n As Integer, projectName As String)
    raiseReadOnlyError Source:="setConfigurationProjectNameWithNumber:vtkConfigurationManagerXML"
End Sub</code_list>
      <call>projectName</call>
      <call>raiseReadOnlyError</call>
    </child>
    <child>
      <type>sub</type>
      <name>vtkConfigurationManager_setConfigurationProjectNameWithNumber</name>
      <code_list>Public Sub vtkConfigurationManager_setConfigurationProjectNameWithNumber(n As Integer, projectName As String)
    setConfigurationProjectNameWithNumber n, projectName
End Sub</code_list>
      <call>projectName</call>
      <call>setConfigurationProjectNameWithNumber</call>
    </child>
    <child>
      <type>function</type>
      <name>getConfigurationCommentWithNumber</name>
      <code_list>Public Function getConfigurationCommentWithNumber(n As Integer) As String
    If n &gt; 0 And n &lt;= configurationCount Then
        getConfigurationCommentWithNumber = m_DOMDocument.SelectSingleNode("/vtkConf/configuration[@cID=""c" &amp; n &amp; """]/comment").Text
       Else
        getConfigurationCommentWithNumber = ""
    End If
End Function</code_list>
      <call>configurationCount</call>
      <call>getConfigurationCommentWithNumber</call>
      <call>getConfigurationCommentWithNumber</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkConfigurationManager_getConfigurationCommentWithNumber</name>
      <code_list>Public Function vtkConfigurationManager_getConfigurationCommentWithNumber(n As Integer) As String
    vtkConfigurationManager_getConfigurationCommentWithNumber = getConfigurationCommentWithNumber(n)
End Function</code_list>
      <call>vtkConfigurationManager_getConfigurationCommentWithNumber</call>
    </child>
    <child>
      <type>sub</type>
      <name>setConfigurationCommentWithNumber</name>
      <code_list>Public Sub setConfigurationCommentWithNumber(n As Integer, comment As String)
    raiseReadOnlyError Source:="setConfigurationCommentWithNumber:vtkConfigurationManagerXML"
End Sub</code_list>
      <call>raiseReadOnlyError</call>
    </child>
    <child>
      <type>sub</type>
      <name>vtkConfigurationManager_setConfigurationCommentWithNumber</name>
      <code_list>Public Sub vtkConfigurationManager_setConfigurationCommentWithNumber(n As Integer, comment As String)
    setConfigurationCommentWithNumber n, comment
End Sub</code_list>
      <call>setConfigurationCommentWithNumber</call>
    </child>
    <child>
      <type>function</type>
      <name>getConfigurationTemplateWithNumber</name>
      <code_list>Public Function getConfigurationTemplateWithNumber(n As Integer) As String
    If n &gt; 0 And n &lt;= configurationCount Then
       On Error Resume Next
        getConfigurationTemplateWithNumber = m_DOMDocument.SelectSingleNode("/vtkConf/configuration[@cID=""c" &amp; n &amp; """]/templatePath").Text
       On Error GoTo 0
       Else
        getConfigurationTemplateWithNumber = ""
    End If
End Function</code_list>
      <call>configurationCount</call>
      <call>getConfigurationTemplateWithNumber</call>
      <call>getConfigurationTemplateWithNumber</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkConfigurationManager_getConfigurationTemplateWithNumber</name>
      <code_list>Public Function vtkConfigurationManager_getConfigurationTemplateWithNumber(n As Integer) As String
    vtkConfigurationManager_getConfigurationTemplateWithNumber = getConfigurationTemplateWithNumber(n)
End Function</code_list>
      <call>vtkConfigurationManager_getConfigurationTemplateWithNumber</call>
    </child>
    <child>
      <type>sub</type>
      <name>setConfigurationTemplateWithNumber</name>
      <code_list>Public Sub setConfigurationTemplateWithNumber(n As Integer, template As String)
    raiseReadOnlyError Source:="setConfigurationTemplateWithNumber:vtkConfigurationManagerXML"
End Sub</code_list>
      <call>raiseReadOnlyError</call>
    </child>
    <child>
      <type>sub</type>
      <name>vtkConfigurationManager_setConfigurationTemplateWithNumber</name>
      <code_list>Public Sub vtkConfigurationManager_setConfigurationTemplateWithNumber(n As Integer, template As String)
    setConfigurationTemplateWithNumber n, template
End Sub</code_list>
      <call>setConfigurationTemplateWithNumber</call>
    </child>
    <child>
      <type>function</type>
      <name>getConfigurationPasswordWithNumber</name>
      <code_list>Public Function getConfigurationPasswordWithNumber(n As Integer) As String
    If n &gt; 0 And n &lt;= configurationCount Then
       On Error Resume Next
        getConfigurationPasswordWithNumber = m_DOMDocument.SelectSingleNode("/vtkConf/configuration[@cID=""c" &amp; n &amp; """]/password").Text
       On Error GoTo 0
       Else
        getConfigurationPasswordWithNumber = ""
    End If
End Function</code_list>
      <call>configurationCount</call>
      <call>getConfigurationPasswordWithNumber</call>
      <call>getConfigurationPasswordWithNumber</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkConfigurationManager_getConfigurationPasswordWithNumber</name>
      <code_list>Public Function vtkConfigurationManager_getConfigurationPasswordWithNumber(n As Integer) As String
    vtkConfigurationManager_getConfigurationPasswordWithNumber = getConfigurationPasswordWithNumber(n)
End Function</code_list>
      <call>vtkConfigurationManager_getConfigurationPasswordWithNumber</call>
    </child>
    <child>
      <type>sub</type>
      <name>setConfigurationPasswordWithNumber</name>
      <code_list>Public Sub setConfigurationPasswordWithNumber(n As Integer, password As String)
    raiseReadOnlyError Source:="setConfigurationPasswordWithNumber:vtkConfigurationManagerXML"
End Sub</code_list>
      <call>raiseReadOnlyError</call>
    </child>
    <child>
      <type>sub</type>
      <name>vtkConfigurationManager_setConfigurationPasswordWithNumber</name>
      <code_list>Public Sub vtkConfigurationManager_setConfigurationPasswordWithNumber(n As Integer, password As String)
    setConfigurationPasswordWithNumber n, password
End Sub</code_list>
      <call>setConfigurationPasswordWithNumber</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkReferenceWithXML</name>
      <code_list>Private Function vtkReferenceWithXML(id As String) As vtkReference
    Dim ref As New vtkReference
    ref.id = id
    ref.name = m_DOMDocument.SelectSingleNode("/vtkConf/reference[@refID=""" &amp; id &amp; """]/name").Text
   On Error Resume Next
    ref.GUID = m_DOMDocument.SelectSingleNode("/vtkConf/reference[@refID=""" &amp; id &amp; """]/guid").Text
    If Err.Number &lt;&gt; 0 Then
        Err.Number = 0
        ref.fullPath = m_DOMDocument.SelectSingleNode("/vtkConf/reference[@refID=""" &amp; id &amp; """]/path").Text
    End If
   On Error GoTo 0
    Set vtkReferenceWithXML = ref
End Function</code_list>
      <call>vtkReferenceWithXML</call>
    </child>
    <child>
      <type>function</type>
      <name>getConfigurationReferencesWithNumber</name>
      <code_list>Public Function getConfigurationReferencesWithNumber(n As Integer) As Collection
    Dim refIDs() As String, i As Integer, refs As New Collection
   On Error GoTo M_Error
    refIDs = Split(m_DOMDocument.SelectSingleNode("/vtkConf/configuration[@cID=""c" &amp; n &amp; """]").Attributes.getNamedItem("refIDs").Text)
   On Error GoTo 0
    For i = LBound(refIDs) To UBound(refIDs)
        refs.Add vtkReferenceWithXML(refIDs(i)), Key:=refIDs(i)
    Next i
M_Error:    ' refIDs attribute is optional
    Set getConfigurationReferencesWithNumber = refs
End Function</code_list>
      <call>getConfigurationReferencesWithNumber</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkConfigurationManager_getConfigurationReferencesWithNumber</name>
      <code_list>Public Function vtkConfigurationManager_getConfigurationReferencesWithNumber(n As Integer) As Collection
    Set vtkConfigurationManager_getConfigurationReferencesWithNumber = getConfigurationReferencesWithNumber(n)
End Function</code_list>
      <call>vtkConfigurationManager_getConfigurationReferencesWithNumber</call>
    </child>
    <child>
      <type>function</type>
      <name>modules</name>
      <code_list>Public Function modules() As Collection
    Dim col As New Collection, i As Integer, m As vtkModule
    For i = 1 To moduleCount
        Set m = New vtkModule
        m.init confManager:=Me, modNumber:=i
        col.Add Item:=m, Key:=module(i)
    Next i
    Set modules = col
End Function</code_list>
      <call>modules</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkConfigurationManager_modules</name>
      <code_list>Public Function vtkConfigurationManager_modules() As Collection
    Set vtkConfigurationManager_modules = modules
End Function</code_list>
      <call>vtkConfigurationManager_modules</call>
    </child>
    <child>
      <type>function</type>
      <name>module</name>
      <code_list>Public Function module(n As Integer) As String
    If n &gt; 0 And n &lt;= moduleCount Then
        module = m_DOMDocument.SelectSingleNode("/vtkConf/module[@mID=""m" &amp; n &amp; """]/name").Text
       Else
        module = ""
    End If
End Function</code_list>
      <call>module</call>
      <call>module</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkConfigurationManager_module</name>
      <code_list>Public Function vtkConfigurationManager_module(n As Integer) As String
    vtkConfigurationManager_module = module(n)
End Function</code_list>
      <call>vtkConfigurationManager_module</call>
    </child>
    <child>
      <type>function</type>
      <name>getModuleNumber</name>
      <code_list>Public Function getModuleNumber(module As String) As Integer
    Dim textValue As String
   On Error Resume Next
    textValue = m_DOMDocument.SelectSingleNode("/vtkConf/module[name=""" &amp; module &amp; """]/@mID").Text
   On Error GoTo 0
    If textValue = "" Then
        getModuleNumber = 0
       Else
        getModuleNumber = CInt(Right$(textValue, Len(textValue) - 1))
    End If
End Function</code_list>
      <call>module</call>
      <call>getModuleNumber</call>
      <call>getModuleNumber</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkConfigurationManager_getModuleNumber</name>
      <code_list>Public Function vtkConfigurationManager_getModuleNumber(module As String) As Integer
    vtkConfigurationManager_getModuleNumber = getModuleNumber(module)
End Function</code_list>
      <call>vtkConfigurationManager_getModuleNumber</call>
    </child>
    <child>
      <type>function</type>
      <name>addModule</name>
      <code_list>Public Function addModule(module As String) As Integer
    raiseReadOnlyError Source:="addModule:vtkConfigurationManagerXML"
End Function</code_list>
      <call>raiseReadOnlyError</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkConfigurationManager_addModule</name>
      <code_list>Public Function vtkConfigurationManager_addModule(module As String) As Integer
    vtkConfigurationManager_addModule = addModule(module)
End Function</code_list>
      <call>vtkConfigurationManager_addModule</call>
    </child>
    <child>
      <type>function</type>
      <name>getModulePathWithNumber</name>
      <code_list>Public Function getModulePathWithNumber(numModule As Integer, numConfiguration As Integer) As String
    If numModule &gt; 0 And numModule &lt;= moduleCount And numConfiguration &gt; 0 And numConfiguration &lt;= configurationCount Then
       On Error Resume Next
        getModulePathWithNumber = m_DOMDocument.SelectSingleNode("/vtkConf/module[@mID=""m" &amp; numModule &amp; """]/modulePath[@confId=""c" &amp; numConfiguration &amp; """]").Text
       On Error GoTo 0
       Else
        getModulePathWithNumber = ""
    End If
End Function</code_list>
      <call>configurationCount</call>
      <call>getModulePathWithNumber</call>
      <call>getModulePathWithNumber</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkConfigurationManager_getModulePathWithNumber</name>
      <code_list>Public Function vtkConfigurationManager_getModulePathWithNumber(numModule As Integer, numConfiguration As Integer) As String
    vtkConfigurationManager_getModulePathWithNumber = getModulePathWithNumber(numModule, numConfiguration)
End Function</code_list>
      <call>vtkConfigurationManager_getModulePathWithNumber</call>
    </child>
    <child>
      <type>sub</type>
      <name>setModulePathWithNumber</name>
      <code_list>Public Sub setModulePathWithNumber(path As String, numModule As Integer, numConfiguration As Integer)
    raiseReadOnlyError Source:="setModulePathWithNumber:vtkConfigurationManagerXML"
End Sub</code_list>
      <call>raiseReadOnlyError</call>
    </child>
    <child>
      <type>sub</type>
      <name>vtkConfigurationManager_setModulePathWithNumber</name>
      <code_list>Public Sub vtkConfigurationManager_setModulePathWithNumber(path As String, numModule As Integer, numConfiguration As Integer)
    setModulePathWithNumber path, numModule, numConfiguration
End Sub</code_list>
      <call>setModulePathWithNumber</call>
    </child>
    <child>
      <type>function</type>
      <name>references</name>
      <code_list>Public Function references() As Collection
    Dim i As Integer, refs As New Collection, id As String
    For i = 1 To m_DOMDocument.SelectNodes("/vtkConf/reference").Length
        id = "r" &amp; i
        refs.Add vtkReferenceWithXML(id), Key:=id
    Next i
    Set references = refs
End Function</code_list>
      <call>references</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkConfigurationManager_references</name>
      <code_list>Public Function vtkConfigurationManager_references() As Collection
    Set vtkConfigurationManager_references = references
End Function</code_list>
      <call>vtkConfigurationManager_references</call>
    </child>
  </child>
  <child>
    <type>file</type>
    <name>0vtkNormalize.bas</name>
    <child>
      <type>sub</type>
      <name>initializeList</name>
      <code_list>Private Sub initializeList()
    
    Dim properlyCasedIdentifiersString As String
    
    properlyCasedIdentifiersString = _
    "Dim" &amp; "," &amp; _
    "Wb" &amp; "," &amp; _
    "Err" &amp; "," &amp; _
    "Number" &amp; "," &amp; _
    "Description" &amp; "," &amp; _
    "Source" &amp; "," &amp; _
    "Count" &amp; "," &amp; _
    "File" &amp; "," &amp; _
    "Folder" &amp; "," &amp; _
    "Scripting" &amp; "," &amp; _
    "Boolean" &amp; "," &amp; _
    "String" &amp; "," &amp; _
    "Integer" &amp; "," &amp; _
    "addModule" &amp; "," &amp; _
    "returnValue" &amp; "," &amp; _
    "retVal" &amp; "," &amp; _
    "fileName" &amp; "," &amp; _
    "saveChanges" &amp; "," &amp; _
    "FileExists" &amp; "," &amp; _
    "m" &amp; "," &amp; _
    "c" &amp; "," &amp; _
    "Tests" &amp; "," &amp; _
    ""
    
    properlyCasedIdentifiersArray = Split(properlyCasedIdentifiersString, ",")
    
End Sub</code_list>
    </child>
    <child>
      <type>function</type>
      <name>vtkListOfProperlyCasedIdentifiers</name>
      <code_list>Public Function vtkListOfProperlyCasedIdentifiers() As String()
    
    If Len(Join(properlyCasedIdentifiersArray, "")) = 0 Then ' if the array has not been initialized
        initializeList
    End If
    
    vtkListOfProperlyCasedIdentifiers = properlyCasedIdentifiersArray
    
End Function</code_list>
      <call>vtkListOfProperlyCasedIdentifiers</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkNormalizeToken</name>
      <code_list>Public Function vtkNormalizeToken(token As String, listOfTokens() As String) As String

    On Error GoTo vtkNormalizeToken_Error
    
    If Len(Join(listOfTokens, "")) &lt;&gt; 0 Then
        Dim i As Integer
        For i = LBound(listOfTokens) To UBound(listOfTokens)
            If StrComp(UCase(token), UCase(listOfTokens(i))) = 0 Then
                vtkNormalizeToken = listOfTokens(i)
                Exit Function
            End If
        Next
    End If
    
    On Error GoTo 0
    vtkNormalizeToken = token
    Exit Function

vtkNormalizeToken_Error:
    Err.Source = "function vtkNormalizeToken of module vtkNormalize"
    Err.Number = VTK_UNEXPECTED_ERROR
    Err.Raise Err.Number, Err.Source, Err.Description
    Exit Function
End Function</code_list>
      <call>vtkNormalizeToken</call>
      <call>vtkNormalizeToken</call>
      <call>module</call>
      <call>vtkNormalizeToken</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkNormalizeString</name>
      <code_list>Public Function vtkNormalizeString(s As String, listOfTokens() As String) As String

Dim token As String
Dim State As Integer, OldState As Integer
Dim Cnt As Integer
Dim ch As String
Dim p As Integer

Dim returnString As String

On Error GoTo vtkNormalizeString_Error
p = 1: State = 0: OldState = -1
s = s &amp; Chr(0)
    
Do While p &lt;= Len(s)
    If State = OldState Then Cnt = Cnt + 1 Else Cnt = 0
    OldState = State
    ch = Mid(s, p, 1)
        Select Case State
            Case 0:
                If Asc(ch) = 0 Then
                    State = 9
                ElseIf ch Like "[A-Za-z]" Then
                    token = token &amp; ch
                    State = 1
                ElseIf ch Like "[']" Then
                    returnString = returnString &amp; ch
                    token = ""
                    State = 2
                ElseIf ch Like "[""]" Then
                    returnString = returnString &amp; ch
                    token = ""
                    State = 3
                ElseIf ch Like "[!']" Then
                    returnString = returnString &amp; ch
                    token = ""
                    State = 0
                Else: Err.Raise VTK_UNEXPECTED_CHAR
                End If

            Case 1:
                If Asc(ch) = 0 Then
                    returnString = returnString &amp; vtkNormalizeToken(token, listOfTokens)
                    State = 9
                ElseIf ch Like "[A-Za-z,0-9,_]" Then
                    token = token &amp; ch
                    State = 1
                ElseIf ch Like "[']" Then
                    returnString = returnString &amp; vtkNormalizeToken(token, listOfTokens) &amp; ch
                    token = ""
                    State = 2
                ElseIf ch Like "[""]" Then
                    returnString = returnString &amp; vtkNormalizeToken(token, listOfTokens) &amp; ch
                    token = ""
                    State = 3
                ElseIf ch Like "[!']" Then
                    returnString = returnString &amp; vtkNormalizeToken(token, listOfTokens) &amp; ch
                    token = ""
                    State = 0
                Else: Err.Raise VTK_UNEXPECTED_CHAR
                End If


            Case 2:
                If Asc(ch) = 0 Then
                    State = 9
                ElseIf Asc(ch) &gt; 0 Then
                    returnString = returnString &amp; ch
                    State = 2
                Else: Err.Raise VTK_UNEXPECTED_CHAR
                End If
                
            Case 3:
                If Asc(ch) = 0 Then
                    State = 9
                ElseIf ch Like "[""]" Then
                    returnString = returnString &amp; ch
                    State = 0
                ElseIf Asc(ch) &gt; 0 Then
                    returnString = returnString &amp; ch
                    State = 3
                Else: Err.Raise VTK_UNEXPECTED_CHAR
                End If
                    

            Case 9:
                If True Then
                    State = 9
                Else: Err.Raise VTK_UNEXPECTED_CHAR
                End If

        End Select

p = p + 1
Loop

If State &lt;&gt; 9 Then Err.Raise VTK_UNEXPECTED_EOS

vtkNormalizeString = returnString
Exit Function

vtkNormalizeString_Error:
    
    Err.Source = "function vtkNormalizeString of module vtkNormalize"
    
    Select Case Err.Number
        Case VTK_UNEXPECTED_EOS
            Err.Description = "Unexpected EOS in String " &amp; s
        Case VTK_UNEXPECTED_CHAR
            Err.Description = "Unexpected character of Ascii code " &amp; Asc(ch) &amp; " in String " &amp; s &amp; " at position " &amp; p
        Case Else
            Err.Number = VTK_UNEXPECTED_ERROR
    End Select
    
    Err.Raise Err.Number, Err.Source, Err.Description
    
End Function</code_list>
      <call>module</call>
      <call>vtkNormalizeString</call>
    </child>
    <child>
      <type>sub</type>
      <name>vtkNormalizeFile</name>
      <code_list>Public Sub vtkNormalizeFile(fullFilePath As String, listOfTokens() As String)

On Error GoTo vtkNormalizeFile_Error

    Dim fso As New FileSystemObject
    
    Dim inputFileObject As File
    Set inputFileObject = fso.GetFile(fullFilePath)
    
    Dim normalizedFullFilePath As String
    normalizedFullFilePath = inputFileObject.ParentFolder &amp; "\" &amp; "tmp_" &amp; inputFileObject.name
    fso.CreateTextFile (normalizedFullFilePath)
    Dim outputFileObject As File
    Set outputFileObject = fso.GetFile(normalizedFullFilePath)
    
    Dim textFileRead As TextStream
    Set textFileRead = fso.OpenTextFile(fullFilePath, ForReading)
    Dim textFileWrite As TextStream
    Set textFileWrite = fso.OpenTextFile(normalizedFullFilePath, ForWriting)
    
    Do Until textFileRead.AtEndOfStream
        textFileWrite.WriteLine (vtkNormalizeString(textFileRead.ReadLine, listOfTokens))
    Loop
    
    textFileRead.Close
    textFileWrite.Close
    
    Kill fullFilePath
    
    outputFileObject.name = fso.GetFileName(fullFilePath)
    
   On Error GoTo 0
   
   Exit Sub

vtkNormalizeFile_Error:

    Err.Source = "sub vtkNormalizeFile of module vtkNormalize"
    
    Select Case Err.Number
        Case 53
            Err.Number = VTK_WRONG_FILE_PATH
        Case Else
            Err.Number = VTK_UNEXPECTED_ERROR
    End Select
    
    Err.Raise Err.Number, Err.Source, Err.Description
    
    Exit Sub
    
End Sub</code_list>
      <call>module</call>
      <call>vtkNormalizeFile</call>
    </child>
  </child>
  <child>
    <type>file</type>
    <name>1vtkConfigurationManagerExcel.cls</name>
    <child>
      <type>sub</type>
      <name>Class_Initialize</name>
      <code_list>Private Sub Class_Initialize()
    m_devConfiguration = -1
End Sub</code_list>
    </child>
    <child>
      <type>sub</type>
      <name>Class_Terminate</name>
      <code_list>Private Sub Class_Terminate()
    Set m_configurationSheet = Nothing
    Set m_workbook = Nothing
    Set m_refManager = Nothing
End Sub</code_list>
      <child>
        <type>sub</type>
        <name>Workbook_AddinInstall2</name>
        <code_list>    Private Sub Workbook_AddinInstall2()
        VBAToolKit.vtkToolBars.vtkCreateToolbars
    End Sub</code_list>
      </child>
      <child>
        <type>sub</type>
        <name>Workbook_AddinInstall2</name>
        <code_list>    Private Sub Workbook_AddinInstall2()
        VBAToolKit.vtkToolBars.vtkCreateToolbars
    End Sub</code_list>
      </child>
    </child>
    <child>
      <type>function</type>
      <name>defaultProjectNameWithNumber</name>
      <code_list>Private Function defaultProjectNameWithNumber(n As Integer) As String
    defaultProjectNameWithNumber = Me.configuration(n)
End Function</code_list>
      <call>defaultProjectNameWithNumber</call>
    </child>
    <child>
      <type>function</type>
      <name>defaultCommentWithNumber</name>
      <code_list>Private Function defaultCommentWithNumber(n As Integer) As String
    defaultCommentWithNumber = "Project " &amp; Me.configuration(n)
End Function</code_list>
      <call>defaultCommentWithNumber</call>
    </child>
    <child>
      <type>function</type>
      <name>defaultTemplateWithNumber</name>
      <code_list>Private Function defaultTemplateWithNumber(n As Integer) As String
    defaultTemplateWithNumber = ""
End Function</code_list>
      <call>defaultTemplateWithNumber</call>
    </child>
    <child>
      <type>function</type>
      <name>defaultPasswordWithNumber</name>
      <code_list>Private Function defaultPasswordWithNumber(n As Integer) As String
    defaultPasswordWithNumber = ""
End Function</code_list>
      <call>defaultPasswordWithNumber</call>
    </child>
    <child>
      <type>function</type>
      <name>isConfigurationInitializedForWorkbook</name>
      <code_list>Public Function isConfigurationInitializedForWorkbook(ExcelName As String) As Boolean
    Dim ws As Worksheet
   On Error Resume Next
    Set ws = Workbooks(ExcelName).Worksheets(sheetName)
   On Error GoTo 0
    isConfigurationInitializedForWorkbook = Not (ws Is Nothing)
End Function</code_list>
      <call>isConfigurationInitializedForWorkbook</call>
    </child>
    <child>
      <type>function</type>
      <name>nbTitleRows</name>
      <code_list>Private Function nbTitleRows() As Integer
    If m_sheetVersion = version10 Then nbTitleRows = 2
    If m_sheetVersion = version11 Then nbTitleRows = 5
    If m_sheetVersion = currentVersion Then nbTitleRows = 6
End Function</code_list>
      <call>nbTitleRows</call>
      <call>nbTitleRows</call>
      <call>nbTitleRows</call>
    </child>
    <child>
      <type>sub</type>
      <name>setConfigurationSheet</name>
      <code_list>Private Sub setConfigurationSheet()
    Dim ws As Worksheet
    On Error Resume Next
    Set ws = Workbook.Worksheets(sheetName)
    On Error GoTo 0
    If ws Is Nothing Then        ' If the Configuration doesn't exist, create one
        Set ws = Workbook.Worksheets.Add(Type:=xlWorksheet)
        ws.name = sheetName
        initializeConfigurationSheet ws
        End If
    If ws.Range("A1") &lt;&gt; currentVersion Then
        If ws.Range("A1") &lt;&gt; version11 Then
            If ws.Range("A1") &lt;&gt; version10 Then
                Else
                m_sheetVersion = version10
                End If
            Else
            m_sheetVersion = version11
            End If
        Else
        m_sheetVersion = currentVersion
        End If
    Set m_configurationSheet = ws
End Sub</code_list>
      <call>initializeConfigurationSheet</call>
    </child>
    <child>
      <type>sub</type>
      <name>initializeConfigurationSheet</name>
      <code_list>Private Sub initializeConfigurationSheet(ws As Worksheet)
    ws.Range("A1") = currentVersion
    ws.Range("A2") = "Path"
    ws.Range("A3") = "Template"
    ws.Range("A4") = "Name"
    ws.Range("A5") = "Comment"
    ws.Range("A6") = "Module Name \ Password"
    ws.Columns("A").ColumnWidth = 22
    ws.Range("A1").Font.Size = 8
    ws.Range("A2").HorizontalAlignment = xlRight
    ws.Range("A3").HorizontalAlignment = xlRight
    ws.Range("A4").HorizontalAlignment = xlRight
    ws.Range("A5").HorizontalAlignment = xlRight
    ws.Range("A6").HorizontalAlignment = xlCenter
    ws.Range("A6").Font.Bold = True
    If Me.projectName &lt;&gt; "" Then
        m_devConfiguration = 2
        ws.Range("B1") = vtkProjectForName(projectName).projectName
        ws.Range("B2") = vtkProjectForName(projectName).projectStandardRelativePath
        ws.Range("C1") = vtkProjectForName(projectName).projectDEVName
        ws.Range("C2") = vtkProjectForName(projectName).projectDEVStandardRelativePath
        ws.Range("B1:C2").HorizontalAlignment = xlCenter
        ws.Range("B1:C1").Font.Bold = True
        ws.Columns("B:C").ColumnWidth = 22
    End If
End Sub</code_list>
    </child>
    <child>
      <type>sub</type>
      <name>updateConfigurationSheetFormat</name>
      <code_list>Public Sub updateConfigurationSheetFormat()
    Dim ws As Worksheet
    
    If m_sheetVersion = version11 Then
        Set ws = configurationSheet
         
        ws.Rows("6:6").EntireRow.Insert     ' Insert new lines for the new format
        
        ws.Range("A1") = currentVersion
        ws.Range("A2") = "Path"
        ws.Range("A3") = "Template"
        ws.Range("A4") = "Name"
        ws.Range("A5") = "Comment"
        ws.Range("A6") = "Module Name \ Password"
    
        ws.Range("A2").Font.Bold = False
        ws.Range("A3").Font.Bold = False
        ws.Range("A2").HorizontalAlignment = xlRight
        ws.Range("A3").HorizontalAlignment = xlRight
        ws.Range("A4").HorizontalAlignment = xlRight
        ws.Range("A5").HorizontalAlignment = xlRight
        ws.Range("A6").HorizontalAlignment = xlCenter
        ws.Range("A6").Font.Bold = True
        
        m_sheetVersion = currentVersion     ' Set the sheetVersion for correct behavior after conversion
    End If

    If m_sheetVersion = version10 Then
        Set ws = configurationSheet
         
        ws.Rows("3:6").EntireRow.Insert     ' Insert new lines for the new format
        
        ws.Range("A1") = currentVersion
        ws.Range("A2") = "Path"
        ws.Range("A3") = "Template"
        ws.Range("A4") = "Name"
        ws.Range("A5") = "Comment"
        ws.Range("A6") = "Module Name \ Password"
    
        ws.Range("A2").Font.Bold = False
        ws.Range("A3").Font.Bold = False
        ws.Range("A2").HorizontalAlignment = xlRight
        ws.Range("A3").HorizontalAlignment = xlRight
        ws.Range("A4").HorizontalAlignment = xlRight
        ws.Range("A5").HorizontalAlignment = xlRight
        ws.Range("A6").HorizontalAlignment = xlCenter
        ws.Range("A6").Font.Bold = True
        
        m_sheetVersion = currentVersion     ' Set the sheetVersion for correct behavior after conversion
    End If

End Sub</code_list>
    </child>
    <child>
      <type>function</type>
      <name>configuration</name>
      <code_list>Public Function configuration(n As Integer) As String
    Dim sResult As String
    sResult = ""
    If n &gt;= 1 And n &lt;= configurationCount Then
        sResult = configurationSheet.Cells(1, n + nbTitleColumns)
       Else
        sResult = ""
    End If
    configuration = sResult
End Function</code_list>
      <call>configurationCount</call>
      <call>configuration</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkConfigurationManager_configuration</name>
      <code_list>Public Function vtkConfigurationManager_configuration(n As Integer) As String
    vtkConfigurationManager_configuration = configuration(n)
End Function</code_list>
      <call>vtkConfigurationManager_configuration</call>
    </child>
    <child>
      <type>function</type>
      <name>addConfiguration</name>
      <code_list>Public Function addConfiguration(configuration As String, Optional path As String = "", Optional template As String = "", Optional projectName As String = "", Optional comment As String = "") As Integer
    Dim n As Integer
    n = getConfigurationNumber(configuration)
    If n = 0 Then   ' n = 0 means non-existant configuration
        n = configurationCount + 1                                        ' Set configuration number
        configurationSheet.Cells(1, n + nbTitleColumns) = configuration   ' Write configuration name
        configurationSheet.Cells(2, n + nbTitleColumns) = path            ' Write configuration path
        configurationSheet.Cells(3, n + nbTitleColumns) = template        ' Write configuration Excel template path
        configurationSheet.Cells(4, n + nbTitleColumns) = projectName     ' Write configuration projectName
        configurationSheet.Cells(5, n + nbTitleColumns) = comment         ' Write configuration Comment
        Dim i As Integer
        For i = 1 To moduleCount                         ' For each module
            configurationSheet.Cells(i + nbTitleRows, n + nbTitleColumns) = "-"     ' Set Default path as not initialized
        Next i
        addConfiguration = n
       Else
        addConfiguration = -n
    End If
End Function</code_list>
      <call>projectName</call>
      <call>configuration</call>
      <call>configurationCount</call>
      <call>configuration</call>
      <call>configuration</call>
      <call>configuration</call>
      <call>configuration</call>
      <call>projectName</call>
      <call>configuration</call>
      <call>addConfiguration</call>
      <call>addConfiguration</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkConfigurationManager_addConfiguration</name>
      <code_list>Public Function vtkConfigurationManager_addConfiguration(configuration As String, Optional path As String = "", Optional template As String = "", Optional projectName As String = "", Optional comment As String = "") As Integer
    vtkConfigurationManager_addConfiguration = addConfiguration(configuration, path, template, projectName, comment)
End Function</code_list>
      <call>projectName</call>
      <call>vtkConfigurationManager_addConfiguration</call>
    </child>
    <child>
      <type>function</type>
      <name>configurations</name>
      <code_list>Public Function configurations() As Collection
    Dim col As New Collection, i As Integer, c As vtkConfiguration
    For i = 1 To configurationCount
        Set c = New vtkConfiguration
        c.init confManager:=Me, confNumber:=i
        col.Add Item:=c, Key:=configuration(i)
    Next i
    Set configurations = col
End Function</code_list>
      <call>configurations</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkConfigurationManager_configurations</name>
      <code_list>Public Function vtkConfigurationManager_configurations() As Collection
    Set vtkConfigurationManager_configurations = configurations
End Function</code_list>
      <call>vtkConfigurationManager_configurations</call>
    </child>
    <child>
      <type>function</type>
      <name>getConfigurationNumber</name>
      <code_list>Public Function getConfigurationNumber(configuration As String) As Integer
    Dim r As Range
    On Error Resume Next
    Set r = configurationSheet.Rows(1)      ' Select first column of the sheet
    Set r = r.Offset(0, nbTitleColumns)     ' Forget the first column
    Set r = r.Find(what:=configuration, SearchOrder:=xlByRows, LookAt:=xlWhole)
    On Error GoTo 0
    If r Is Nothing Then
        getConfigurationNumber = 0
       Else
        getConfigurationNumber = r.Column - nbTitleColumns
    End If
End Function</code_list>
      <call>getConfigurationNumber</call>
      <call>getConfigurationNumber</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkConfigurationManager_getConfigurationNumber</name>
      <code_list>Public Function vtkConfigurationManager_getConfigurationNumber(configuration As String) As Integer
    vtkConfigurationManager_getConfigurationNumber = getConfigurationNumber(configuration)
End Function</code_list>
      <call>vtkConfigurationManager_getConfigurationNumber</call>
    </child>
    <child>
      <type>function</type>
      <name>getConfigurationPathWithNumber</name>
      <code_list>Public Function getConfigurationPathWithNumber(n As Integer) As String
    Dim sResult As String
    sResult = ""
    If n &gt;= 1 And n &lt;= configurationCount Then
        sResult = configurationSheet.Cells(pathLine, n + nbTitleColumns)
       Else
        sResult = ""
    End If
    getConfigurationPathWithNumber = sResult
End Function</code_list>
      <call>configurationCount</call>
      <call>getConfigurationPathWithNumber</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkConfigurationManager_getConfigurationPathWithNumber</name>
      <code_list>Public Function vtkConfigurationManager_getConfigurationPathWithNumber(n As Integer) As String
    vtkConfigurationManager_getConfigurationPathWithNumber = getConfigurationPathWithNumber(n)
End Function</code_list>
      <call>vtkConfigurationManager_getConfigurationPathWithNumber</call>
    </child>
    <child>
      <type>sub</type>
      <name>setConfigurationPathWithNumber</name>
      <code_list>Public Sub setConfigurationPathWithNumber(n As Integer, path As String)
    If n &gt;= 1 And n &lt;= configurationCount Then
        configurationSheet.Cells(pathLine, n + nbTitleColumns) = path
    End If
End Sub</code_list>
      <call>configurationCount</call>
    </child>
    <child>
      <type>sub</type>
      <name>vtkConfigurationManager_setConfigurationPathWithNumber</name>
      <code_list>Public Sub vtkConfigurationManager_setConfigurationPathWithNumber(n As Integer, path As String)
    setConfigurationPathWithNumber n, path
End Sub</code_list>
      <call>setConfigurationPathWithNumber</call>
    </child>
    <child>
      <type>function</type>
      <name>getConfigurationPath</name>
      <code_list>Public Function getConfigurationPath(configuration As String) As String
    getConfigurationPath = getConfigurationPathWithNumber(getConfigurationNumber(configuration))
End Function</code_list>
      <call>getConfigurationPath</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkConfigurationManager_getConfigurationPath</name>
      <code_list>Public Function vtkConfigurationManager_getConfigurationPath(configuration As String) As String
    vtkConfigurationManager_getConfigurationPath = getConfigurationPath(configuration)
End Function</code_list>
      <call>vtkConfigurationManager_getConfigurationPath</call>
    </child>
    <child>
      <type>sub</type>
      <name>setConfigurationPath</name>
      <code_list>Public Sub setConfigurationPath(configuration As String, path As String)
    setConfigurationPathWithNumber n:=getConfigurationNumber(configuration), path:=path
End Sub</code_list>
      <call>setConfigurationPathWithNumber</call>
    </child>
    <child>
      <type>sub</type>
      <name>vtkConfigurationManager_setConfigurationPath</name>
      <code_list>Public Sub vtkConfigurationManager_setConfigurationPath(configuration As String, path As String)
    setConfigurationPath configuration, path
End Sub</code_list>
      <call>setConfigurationPath</call>
    </child>
    <child>
      <type>function</type>
      <name>getConfigurationProjectNameWithNumber</name>
      <code_list>Public Function getConfigurationProjectNameWithNumber(n As Integer) As String
    Dim sResult As String
    sResult = ""
    If n &gt;= 1 And n &lt;= configurationCount Then
        If m_sheetVersion = currentVersion Or m_sheetVersion = version11 Then
            sResult = configurationSheet.Cells(projectNameLine, n + nbTitleColumns)
            If sResult = "" Then sResult = defaultProjectNameWithNumber(n)
           Else
            sResult = defaultProjectNameWithNumber(n)
            End If
       Else
        sResult = ""
    End If
    getConfigurationProjectNameWithNumber = sResult
End Function</code_list>
      <call>configurationCount</call>
      <call>getConfigurationProjectNameWithNumber</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkConfigurationManager_getConfigurationProjectNameWithNumber</name>
      <code_list>Public Function vtkConfigurationManager_getConfigurationProjectNameWithNumber(n As Integer) As String
    vtkConfigurationManager_getConfigurationProjectNameWithNumber = getConfigurationProjectNameWithNumber(n)
End Function</code_list>
      <call>vtkConfigurationManager_getConfigurationProjectNameWithNumber</call>
    </child>
    <child>
      <type>sub</type>
      <name>setConfigurationProjectNameWithNumber</name>
      <code_list>Public Sub setConfigurationProjectNameWithNumber(n As Integer, projectName As String)
    If n &gt;= 1 And n &lt;= configurationCount Then
        If m_sheetVersion = currentVersion Or m_sheetVersion = version11 Then
            configurationSheet.Cells(projectNameLine, n + nbTitleColumns) = projectName
           Else
            Err.Raise VTK_OBSOLETE_CONFIGURATION_SHEET, "vtkConfigurationManagerExcel:setConfigurationProjectNameWithNumber", _
            "Impossible to set a configuration projectName with this configuration sheet version (project=" &amp; m_projectName &amp; ", " &amp; m_sheetVersion &amp; ")"
        End If
    End If
End Sub</code_list>
      <call>projectName</call>
      <call>configurationCount</call>
      <call>configuration</call>
      <call>projectName</call>
    </child>
    <child>
      <type>sub</type>
      <name>vtkConfigurationManager_setConfigurationProjectNameWithNumber</name>
      <code_list>Public Sub vtkConfigurationManager_setConfigurationProjectNameWithNumber(n As Integer, projectName As String)
    setConfigurationProjectNameWithNumber n, projectName
End Sub</code_list>
      <call>projectName</call>
      <call>setConfigurationProjectNameWithNumber</call>
    </child>
    <child>
      <type>function</type>
      <name>getConfigurationCommentWithNumber</name>
      <code_list>Public Function getConfigurationCommentWithNumber(n As Integer) As String
    Dim sResult As String
    sResult = ""
    If n &gt;= 1 And n &lt;= configurationCount Then
        If m_sheetVersion = currentVersion Or m_sheetVersion = version11 Then
            sResult = configurationSheet.Cells(commentLine, n + nbTitleColumns)
            If sResult = "" Then sResult = defaultCommentWithNumber(n)
           Else
            sResult = defaultCommentWithNumber(n)
            End If
       Else
        sResult = ""
    End If
    getConfigurationCommentWithNumber = sResult
End Function</code_list>
      <call>configurationCount</call>
      <call>getConfigurationCommentWithNumber</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkConfigurationManager_getConfigurationCommentWithNumber</name>
      <code_list>Public Function vtkConfigurationManager_getConfigurationCommentWithNumber(n As Integer) As String
    vtkConfigurationManager_getConfigurationCommentWithNumber = getConfigurationCommentWithNumber(n)
End Function</code_list>
      <call>vtkConfigurationManager_getConfigurationCommentWithNumber</call>
    </child>
    <child>
      <type>sub</type>
      <name>setConfigurationCommentWithNumber</name>
      <code_list>Public Sub setConfigurationCommentWithNumber(n As Integer, comment As String)
    If n &gt;= 1 And n &lt;= configurationCount Then
        If m_sheetVersion = currentVersion Or m_sheetVersion = version11 Then
            configurationSheet.Cells(commentLine, n + nbTitleColumns) = comment
           Else
            Err.Raise VTK_OBSOLETE_CONFIGURATION_SHEET, "vtkConfigurationManagerExcel:setConfigurationCommentWithNumber", _
            "Impossible to set a configuration comment with this configuration sheet version (project=" &amp; m_projectName &amp; ", " &amp; m_sheetVersion &amp; ")"
        End If
    End If
End Sub</code_list>
      <call>configurationCount</call>
      <call>configuration</call>
    </child>
    <child>
      <type>sub</type>
      <name>vtkConfigurationManager_setConfigurationCommentWithNumber</name>
      <code_list>Public Sub vtkConfigurationManager_setConfigurationCommentWithNumber(n As Integer, comment As String)
    setConfigurationCommentWithNumber n, comment
End Sub</code_list>
      <call>setConfigurationCommentWithNumber</call>
    </child>
    <child>
      <type>function</type>
      <name>getConfigurationTemplateWithNumber</name>
      <code_list>Public Function getConfigurationTemplateWithNumber(n As Integer) As String
    Dim sResult As String
    sResult = ""
    If n &gt;= 1 And n &lt;= configurationCount Then
        If m_sheetVersion = currentVersion Or m_sheetVersion = version11 Then
            sResult = configurationSheet.Cells(templateLine, n + nbTitleColumns)
            If sResult = "" Then sResult = defaultTemplateWithNumber(n)
           Else
            sResult = defaultTemplateWithNumber(n)
            End If
       Else
        sResult = ""
    End If
    getConfigurationTemplateWithNumber = sResult
End Function</code_list>
      <call>configurationCount</call>
      <call>getConfigurationTemplateWithNumber</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkConfigurationManager_getConfigurationTemplateWithNumber</name>
      <code_list>Public Function vtkConfigurationManager_getConfigurationTemplateWithNumber(n As Integer) As String
    vtkConfigurationManager_getConfigurationTemplateWithNumber = getConfigurationTemplateWithNumber(n)
End Function</code_list>
      <call>vtkConfigurationManager_getConfigurationTemplateWithNumber</call>
    </child>
    <child>
      <type>sub</type>
      <name>setConfigurationTemplateWithNumber</name>
      <code_list>Public Sub setConfigurationTemplateWithNumber(n As Integer, template As String)
    If n &gt;= 1 And n &lt;= configurationCount Then
        If m_sheetVersion = currentVersion Or m_sheetVersion = version11 Then
            configurationSheet.Cells(templateLine, n + nbTitleColumns) = template
           Else
            Err.Raise VTK_OBSOLETE_CONFIGURATION_SHEET, "vtkConfigurationManagerExcel:setConfigurationTemplateWithNumber", _
            "Impossible to set a configuration template path with this configuration sheet version (project=" &amp; m_projectName &amp; ", " &amp; m_sheetVersion &amp; ")"
        End If
    End If
End Sub</code_list>
      <call>configurationCount</call>
      <call>configuration</call>
    </child>
    <child>
      <type>sub</type>
      <name>vtkConfigurationManager_setConfigurationTemplateWithNumber</name>
      <code_list>Public Sub vtkConfigurationManager_setConfigurationTemplateWithNumber(n As Integer, template As String)
    setConfigurationTemplateWithNumber n, template
End Sub</code_list>
      <call>setConfigurationTemplateWithNumber</call>
    </child>
    <child>
      <type>function</type>
      <name>getConfigurationPasswordWithNumber</name>
      <code_list>Public Function getConfigurationPasswordWithNumber(n As Integer) As String
    Dim sResult As String
    sResult = ""
    If n &gt;= 1 And n &lt;= configurationCount Then
        If m_sheetVersion = currentVersion Then
            sResult = configurationSheet.Cells(passwordLine, n + nbTitleColumns)
            If sResult = "" Then sResult = defaultPasswordWithNumber(n)
           Else
            sResult = defaultPasswordWithNumber(n)
            End If
       Else
        sResult = ""
    End If
    getConfigurationPasswordWithNumber = sResult
End Function</code_list>
      <call>configurationCount</call>
      <call>getConfigurationPasswordWithNumber</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkConfigurationManager_getConfigurationPasswordWithNumber</name>
      <code_list>Public Function vtkConfigurationManager_getConfigurationPasswordWithNumber(n As Integer) As String
    vtkConfigurationManager_getConfigurationPasswordWithNumber = getConfigurationPasswordWithNumber(n)
End Function</code_list>
      <call>vtkConfigurationManager_getConfigurationPasswordWithNumber</call>
    </child>
    <child>
      <type>sub</type>
      <name>setConfigurationPasswordWithNumber</name>
      <code_list>Public Sub setConfigurationPasswordWithNumber(n As Integer, password As String)
    If n &gt;= 1 And n &lt;= configurationCount Then
        If m_sheetVersion = currentVersion Then
            configurationSheet.Cells(passwordLine, n + nbTitleColumns) = password
           Else
            Err.Raise VTK_OBSOLETE_CONFIGURATION_SHEET, "vtkConfigurationManagerExcel:setConfigurationPasswordWithNumber", _
            "Impossible to set a configuration code password with this configuration sheet version (project=" &amp; m_projectName &amp; ", " &amp; m_sheetVersion &amp; ")"
        End If
    End If
End Sub</code_list>
      <call>configurationCount</call>
      <call>configuration</call>
    </child>
    <child>
      <type>sub</type>
      <name>vtkConfigurationManager_setConfigurationPasswordWithNumber</name>
      <code_list>Public Sub vtkConfigurationManager_setConfigurationPasswordWithNumber(n As Integer, password As String)
    setConfigurationPasswordWithNumber n, password
End Sub</code_list>
      <call>setConfigurationPasswordWithNumber</call>
    </child>
    <child>
      <type>function</type>
      <name>getConfigurationReferencesWithNumber</name>
      <code_list>Public Function getConfigurationReferencesWithNumber(n As Integer) As Collection
    Set getConfigurationReferencesWithNumber = referenceManager.references(n)
End Function</code_list>
      <call>getConfigurationReferencesWithNumber</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkConfigurationManager_getConfigurationReferencesWithNumber</name>
      <code_list>Public Function vtkConfigurationManager_getConfigurationReferencesWithNumber(n As Integer) As Collection
    Set vtkConfigurationManager_getConfigurationReferencesWithNumber = getConfigurationReferencesWithNumber(n)
End Function</code_list>
      <call>vtkConfigurationManager_getConfigurationReferencesWithNumber</call>
    </child>
    <child>
      <type>function</type>
      <name>modules</name>
      <code_list>Public Function modules() As Collection
    Dim col As New Collection, i As Integer, m As vtkModule
    For i = 1 To moduleCount
        Set m = New vtkModule
        m.init confManager:=Me, modNumber:=i
        col.Add Item:=m, Key:=module(i)
    Next i
    Set modules = col
End Function</code_list>
      <call>modules</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkConfigurationManager_modules</name>
      <code_list>Public Function vtkConfigurationManager_modules() As Collection
    Set vtkConfigurationManager_modules = modules
End Function</code_list>
      <call>vtkConfigurationManager_modules</call>
    </child>
    <child>
      <type>function</type>
      <name>module</name>
      <code_list>Public Function module(n As Integer) As String
    Dim sResult As String
    sResult = ""
    If n &gt;= 1 And n &lt;= moduleCount Then
        sResult = configurationSheet.Cells(n + nbTitleRows, 1)
       Else
        sResult = ""
    End If
    module = sResult
End Function</code_list>
      <call>module</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkConfigurationManager_module</name>
      <code_list>Public Function vtkConfigurationManager_module(n As Integer) As String
    vtkConfigurationManager_module = module(n)
End Function</code_list>
      <call>vtkConfigurationManager_module</call>
    </child>
    <child>
      <type>function</type>
      <name>getModuleNumber</name>
      <code_list>Public Function getModuleNumber(module As String) As Integer
    Dim r As Range
    On Error Resume Next
    Set r = configurationSheet.Columns(1)   ' Select first column of the sheet
    Set r = r.Offset(nbTitleRows, 0)                  ' Forget the two first rows
    Set r = r.Find(what:=module, SearchOrder:=xlByColumns, LookAt:=xlWhole)
    On Error GoTo 0
    If r Is Nothing Then
        getModuleNumber = 0
       Else
        getModuleNumber = r.Row - nbTitleRows
    End If
End Function</code_list>
      <call>getModuleNumber</call>
      <call>getModuleNumber</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkConfigurationManager_getModuleNumber</name>
      <code_list>Public Function vtkConfigurationManager_getModuleNumber(module As String) As Integer
    vtkConfigurationManager_getModuleNumber = getModuleNumber(module)
End Function</code_list>
      <call>vtkConfigurationManager_getModuleNumber</call>
    </child>
    <child>
      <type>function</type>
      <name>addModule</name>
      <code_list>Public Function addModule(module As String) As Integer
    Dim n As Integer
    n = getModuleNumber(module)
    If n = 0 Then   ' n = 0 means non-existant module
        n = moduleCount + 1                                     ' Set module number
        configurationSheet.Cells(n + nbTitleRows, 1) = module   ' Write module name
        Dim i As Integer
        For i = 1 To configurationCount                         ' For each configuration
            configurationSheet.Cells(n + nbTitleRows, i + nbTitleColumns) = "-"     ' Set Default path as not initialized
        Next i
        addModule = n
       Else
        addModule = -n
    End If
End Function</code_list>
      <call>module</call>
      <call>module</call>
      <call>configurationCount</call>
      <call>addModule</call>
      <call>addModule</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkConfigurationManager_addModule</name>
      <code_list>Public Function vtkConfigurationManager_addModule(module As String) As Integer
    vtkConfigurationManager_addModule = addModule(module)
End Function</code_list>
      <call>vtkConfigurationManager_addModule</call>
    </child>
    <child>
      <type>function</type>
      <name>getModulePathWithNumber</name>
      <code_list>Public Function getModulePathWithNumber(numModule As Integer, numConfiguration As Integer) As String
    Dim sResult As String
    If numModule &gt;= 1 And numModule &lt;= moduleCount And numConfiguration &gt;= 1 And numConfiguration &lt;= configurationCount Then
        sResult = configurationSheet.Cells(numModule + nbTitleRows, numConfiguration + nbTitleColumns)
        If sResult = "-" Then sResult = ""
       Else
        sResult = ""
    End If
    getModulePathWithNumber = sResult
End Function</code_list>
      <call>configurationCount</call>
      <call>getModulePathWithNumber</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkConfigurationManager_getModulePathWithNumber</name>
      <code_list>Public Function vtkConfigurationManager_getModulePathWithNumber(numModule As Integer, numConfiguration As Integer) As String
    vtkConfigurationManager_getModulePathWithNumber = getModulePathWithNumber(numModule, numConfiguration)
End Function</code_list>
      <call>vtkConfigurationManager_getModulePathWithNumber</call>
    </child>
    <child>
      <type>sub</type>
      <name>setModulePathWithNumber</name>
      <code_list>Public Sub setModulePathWithNumber(path As String, numModule As Integer, numConfiguration As Integer)
    Dim s As String
    If numModule &gt;= 1 And numModule &lt;= moduleCount And numConfiguration &gt;= 1 And numConfiguration &lt;= configurationCount Then
        If path = "" Then
            s = "-"
           Else
            s = path
        End If
        configurationSheet.Cells(numModule + nbTitleRows, numConfiguration + nbTitleColumns) = s
    End If
End Sub</code_list>
      <call>configurationCount</call>
    </child>
    <child>
      <type>sub</type>
      <name>vtkConfigurationManager_setModulePathWithNumber</name>
      <code_list>Public Sub vtkConfigurationManager_setModulePathWithNumber(path As String, numModule As Integer, numConfiguration As Integer)
    setModulePathWithNumber path, numModule, numConfiguration
End Sub</code_list>
      <call>setModulePathWithNumber</call>
    </child>
    <child>
      <type>function</type>
      <name>referenceManager</name>
      <code_list>Private Function referenceManager() As vtkReferenceManager
    initReferences refs:=Nothing
    Set referenceManager = m_refManager
End Function</code_list>
      <call>initReferences</call>
      <call>referenceManager</call>
    </child>
    <child>
      <type>function</type>
      <name>references</name>
      <code_list>Public Function references() As Collection
    Set references = referenceManager.allReferences
End Function</code_list>
      <call>references</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkConfigurationManager_references</name>
      <code_list>Public Function vtkConfigurationManager_references() As Collection
    Set vtkConfigurationManager_references = references
End Function</code_list>
      <call>vtkConfigurationManager_references</call>
    </child>
    <child>
      <type>sub</type>
      <name>initReferences</name>
      <code_list>Public Sub initReferences(refs As Collection)
    If m_refManager Is Nothing Then
        Set m_refManager = New vtkReferenceManager
        m_refManager.init Wb:=Workbook, confCount:=Me.configurationCount, nbTitleColumnsInConfSheet:=nbTitleColumns, devConf:=m_devConfiguration, references:=refs
    End If
End Sub</code_list>
    </child>
    <child>
      <type>sub</type>
      <name>duplicate</name>
      <code_list>Public Sub duplicate(Wb As Workbook, cm As vtkConfigurationManager)
    Dim ws As Worksheet, i As Integer, j As Integer, ref As vtkReference, refs As Collection, refn As Integer
    If Not m_workbook Is Nothing Then _
        Err.Raise Number:=VTK_ALREADY_INITIALIZED, Source:="vtkConfigurationManagerExcel:duplicate", Description:="The configuration manager to duplicate to is already initialized with an attached workbook."
    If Wb Is Nothing Then _
        Err.Raise Number:=VTK_WORKBOOK_NOTOPEN, Source:="vtkConfigurationManagerExcel:duplicate", Description:="The workbook in which to is not opened."
   On Error Resume Next
    Set ws = Wb.Worksheets(sheetName)
   On Error GoTo 0
    If Not ws Is Nothing Then _
        Err.Raise Number:=VTK_ALREADY_INITIALIZED, Source:="vtkConfigurationManagerExcel:duplicate", Description:="The Excel workbook already contains a configuration sheet."
    
    Set m_workbook = Wb     ' setConfigurationSheet needs a workbook
    setConfigurationSheet   ' NOTE: must be called before projectName set to not create the two standard confs
    m_projectName = cm.projectName
    m_rootPath = cm.rootPath
    For i = 1 To cm.configurationCount
        Me.addConfiguration configuration:=cm.configuration(i), path:=cm.getConfigurationPathWithNumber(i), _
            template:=cm.getConfigurationTemplateWithNumber(i), projectName:=cm.getConfigurationProjectNameWithNumber(i), _
            comment:=cm.getConfigurationCommentWithNumber(i)
    Next i
    Me.initReferences cm.references
    For i = 1 To cm.moduleCount
        Me.addModule module:=cm.module(i)
    Next i
    For i = 1 To cm.configurationCount
        For j = 1 To cm.moduleCount
            Me.setModulePathWithNumber cm.getModulePathWithNumber(j, i), j, i
        Next j
    Next i
    For i = 1 To cm.configurationCount
        Set refs = cm.getConfigurationReferencesWithNumber(i)
        For j = 1 To refs.Count
            Set ref = refs(j)
            refn = CInt(Right(ref.id, Len(ref.id) - 1))
            referenceManager.setReferenceWihNumber True, refn, i
        Next j
    Next i
End Sub</code_list>
      <call>configuration</call>
      <call>duplicate</call>
      <call>initialized</call>
      <call>configuration</call>
      <call>setConfigurationSheet</call>
      <call>setConfigurationSheet</call>
      <call>projectName</call>
    </child>
  </child>
  <child>
    <type>file</type>
    <name>1vtkConfigurationManagers.bas</name>
    <child>
      <type>function</type>
      <name>vtkConfigurationManagerForProject</name>
      <code_list>Public Function vtkConfigurationManagerForProject(projectName As String) As vtkConfigurationManager
    If configurationManagers Is Nothing Then
        Set configurationManagers = New Collection
        End If
    Dim cm As vtkConfigurationManager
    On Error Resume Next
    Set cm = configurationManagers(projectName)
    If Err &lt;&gt; 0 Then
        Set cm = New vtkConfigurationManagerExcel
        Dim cmE As vtkConfigurationManagerExcel
        Set cmE = cm
        cmE.projectName = projectName    ' The projectName setter is specific to the Excel conf Manager
        If cm.projectName Like projectName Then     ' The initialization could fail (if the Workbook is closed)
            configurationManagers.Add Item:=cm, Key:=projectName
           Else
            Set cm = Nothing
        End If
    End If
   On Error GoTo 0
    Set vtkConfigurationManagerForProject = cm
End Function</code_list>
      <call>projectName</call>
      <call>projectName</call>
      <call>vtkConfigurationManagerForProject</call>
    </child>
    <child>
      <type>sub</type>
      <name>vtkResetConfigurationManagers</name>
      <code_list>Public Sub vtkResetConfigurationManagers()
    Set configurationManagers = Nothing
End Sub</code_list>
    </child>
    <child>
      <type>sub</type>
      <name>vtkInitializeConfigurationForActiveWorkBook</name>
      <code_list>Public Sub vtkInitializeConfigurationForActiveWorkBook(Optional withBeforeSaveHandler As Boolean = False)
    Dim cm As New vtkConfigurationManagerExcel
    If cm.isConfigurationInitializedForWorkbook(ExcelName:=ActiveWorkbook.name) Then Exit Sub
    Set cm = Nothing
    
    Dim project As vtkProject
    Set project = vtkProjectForName(projectName:=ActiveWorkbook.VBProject.name)
    
    ActiveWorkbook.VBProject.name = project.projectDEVName
    
    ActiveWorkbook.SaveAs fileName:=ActiveWorkbook.path &amp; "\" &amp; project.workbookDEVName
    
    Dim i As Integer, c As VBComponent, cn_dev As Integer, cn_prod As Integer, nm As Integer
    Set cm = vtkConfigurationManagerForProject(projectName:=project.projectName)
    cn_dev = cm.getConfigurationNumber(configuration:=project.projectDEVName)
    cn_prod = cm.getConfigurationNumber(configuration:=project.projectName)
    
    For i = 1 To ActiveWorkbook.VBProject.VBComponents.Count
        Set c = ActiveWorkbook.VBProject.VBComponents.Item(i)
        If c.Type &lt;&gt; vbext_ct_Document Then
            nm = cm.addModule(c.name)
            cm.setModulePathWithNumber path:=vtkStandardPathForModule(module:=c), numModule:=nm, numConfiguration:=cn_dev
            If vtkStandardCategoryForModuleName(moduleName:=c.name) Like "Prod" Then
                cm.setModulePathWithNumber path:=vtkStandardPathForModule(module:=c), numModule:=nm, numConfiguration:=cn_prod
            End If
        End If
    Next
    
    cm.initReferences vtkReferencesInWorkbook(ActiveWorkbook)
    
    If withBeforeSaveHandler Then vtkAddBeforeSaveHandlerInDEVWorkbook Wb:=ActiveWorkbook, projectName:=project.projectName, confName:=project.projectDEVName
    
    ActiveWorkbook.Save
    
End Sub</code_list>
      <call>vtkAddBeforeSaveHandlerInDEVWorkbook</call>
    </child>
    <child>
      <type>sub</type>
      <name>vtkVerifyConfigurations</name>
      <code_list>Sub vtkVerifyConfigurations()
    Application.EnableEvents = False

    Dim prj As vtkProject
    Set prj = vtkProjectForName(getCurrentProjectName)
    Dim cm As vtkConfigurationManager
    Set cm = vtkConfigurationManagerForProject(prj.projectName)
    
    Dim c As vtkConfiguration, s As String, fso As New FileSystemObject
    Dim cwb() As ConfWB
    ReDim cwb(1 To cm.configurationCount) As ConfWB
    Debug.Print "----------------------------------------------------"
    Debug.Print "  Start verification of " &amp; getCurrentProjectName &amp; " project configurations"
    Debug.Print "----------------------------------------------------"
   
    Dim nbConf As Integer
    nbConf = 0
    For Each c In cm.configurations
        s = cm.rootPath &amp; "\" &amp; c.path
        If fso.FileExists(s) Then
            nbConf = nbConf + 1
            Set cwb(nbConf).conf = c
           On Error Resume Next
            Set cwb(nbConf).Wb = Workbooks(fso.GetFileName(s))
           On Error GoTo 0
            cwb(nbConf).wasOpened = Not (cwb(nbConf).Wb Is Nothing)
            If Not cwb(nbConf).wasOpened Then Set cwb(nbConf).Wb = Workbooks.Open(fileName:=s, ReadOnly:=True)
            If Not (cwb(nbConf).Wb Is Nothing) Then

                If Not (c.projectName = cwb(nbConf).Wb.VBProject.name) Then
                    Debug.Print "For configuration " &amp; c.name &amp; ", the projectName property (" &amp; c.projectName &amp; ") is different of the project name (" &amp; cwb(nbConf).Wb.VBProject.name &amp; ")."
                End If

                If Not (c.projectName = cwb(nbConf).Wb.BuiltinDocumentProperties("Title").Value) Then
                    Debug.Print "For configuration " &amp; c.name &amp; ", the projectName property (" &amp; c.projectName &amp; ") is different of the workbook title (" &amp; cwb(nbConf).Wb.BuiltinDocumentProperties("Title").Value &amp; ")."
                End If

                If Not (c.comment = cwb(nbConf).Wb.BuiltinDocumentProperties("Comments").Value) Then
                    Debug.Print "For configuration " &amp; c.name &amp; ", the comment property (" &amp; c.comment &amp; ") is different of the workbook comment (" &amp; cwb(nbConf).Wb.BuiltinDocumentProperties("Comments").Value &amp; ")."
                End If

                If (c.template &lt;&gt; "") And Not (fso.FileExists(cm.rootPath &amp; "\" &amp; c.template)) Then
                    Debug.Print "For configuration " &amp; c.name &amp; ", the template path (" &amp; cm.rootPath &amp; "\" &amp; c.template &amp; ") is unreachable."
                End If

               Else
                Debug.Print "Impossible to open Workbook for configuration " &amp; c.name &amp; " (" &amp; s &amp; ")."
            End If
           Else
            Debug.Print "Path of configuration " &amp; c.name &amp; " unreachable (" &amp; s &amp; ")."
        End If
    Next
    
    Dim i As Integer, mods As Collection, vbc As VBIDE.VBComponent, md As vtkModule
    For i = 1 To nbConf
        Set mods = cwb(i).conf.modules
        For Each vbc In cwb(i).Wb.VBProject.VBComponents
           On Error Resume Next
            Set md = mods(vbc.name)
            If Err.Number &lt;&gt; 0 Then
                Debug.Print "Module " &amp; vbc.name &amp; " is in configuration workbook " &amp; cwb(i).conf.name &amp; " but not in description of configuration."
            End If
           On Error GoTo 0
        Next
    Next i
    
    For i = 1 To nbConf
        For Each md In cwb(i).conf.modules
           On Error Resume Next
            Set vbc = cwb(i).Wb.VBProject.VBComponents(md.name)
            If Err.Number &lt;&gt; 0 Then
                Debug.Print "Module " &amp; md.name &amp; " is in the configuration description of " &amp; cwb(i).conf.name &amp; " but not in the workbook."
            End If
           On Error GoTo 0
        Next
    Next i
    
    For i = 1 To nbConf
        For Each md In cwb(i).conf.modules
            s = cm.rootPath &amp; "\" &amp; md.path
            If Not fso.FileExists(s) Then
                Debug.Print "Module " &amp; md.name &amp; " path (" &amp; md.path &amp; " is not reachable for the configuration " &amp; cwb(i).conf.name &amp; "."
            End If
        Next
    Next i
    
    Dim testPath As String, s1 As String
    testPath = vtkPathToTestFolder(ActiveWorkbook) &amp; "\Temporary"
    vtkCreateTreeFolder testPath
    For i = 1 To nbConf
        For Each md In cwb(i).conf.modules
            s = cm.rootPath &amp; "\" &amp; md.path
            s1 = testPath &amp; "\" &amp; md.path
            vtkExportOneModule cwb(i).Wb.VBProject, md.name, s1
            If Not compareFiles(s, s1, True) Then
                Debug.Print "Module " &amp; md.name &amp; " content of source path (" &amp; md.path &amp; " is different from module in the configuration " &amp; cwb(i).conf.name &amp; "."
            End If
        Next
    Next i
    vtkDeleteFolder testPath
    
    Dim actualList As Collection, actualRef  As vtkReference, expectedRef As vtkReference
    For i = 1 To nbConf
        Set actualList = vtkReferencesInWorkbook(cwb(i).Wb) ' Get the actual list, indexed by name
        For Each expectedRef In cwb(i).conf.references      ' the expected list is indexed by ID
           On Error Resume Next
            Set actualRef = actualList(expectedRef.name)
            If Err.Number &lt;&gt; 0 Then
                Debug.Print "Reference " &amp; expectedRef.name &amp; " is expected but not present in configuration " &amp; cwb(i).conf.name &amp; "."
               Else
                actualList.Remove expectedRef.name
            End If
           On Error GoTo 0
        Next expectedRef
        If actualList.Count &lt;&gt; 0 Then
            For Each actualRef In actualList
                Debug.Print "Reference " &amp; actualRef.name &amp; " is present but not expected in configuration " &amp; cwb(i).conf.name &amp; "."
            Next actualRef
        End If
    Next i
    
    For i = 1 To nbConf
        If Not cwb(i).wasOpened Then cwb(i).Wb.Close saveChanges:=False
    Next i
    Debug.Print "----------------------------------------------------"
    
    Application.EnableEvents = True

End Sub</code_list>
      <call>getCurrentProjectName</call>
      <call>configuration</call>
      <call>projectName</call>
      <call>configuration</call>
      <call>projectName</call>
      <call>configuration</call>
      <call>configuration</call>
      <call>configuration</call>
      <call>configuration</call>
      <call>configuration</call>
      <call>configuration</call>
      <call>configuration</call>
      <call>vtkCreateTreeFolder</call>
      <call>vtkExportOneModule</call>
      <call>configuration</call>
      <call>module</call>
      <call>vtkDeleteFolder</call>
      <call>configuration</call>
      <call>configuration</call>
    </child>
  </child>
  <child>
    <type>file</type>
    <name>ThisWorkbook.cls</name>
    <child>
      <type>sub</type>
      <name>Workbook_AddinInstall</name>
      <code_list>Private Sub Workbook_AddinInstall()
    VBAToolKit.vtkToolBars.vtkCreateToolbars





    


End Sub</code_list>
      <child>
        <type>sub</type>
        <name>Workbook_AddinInstall</name>
        <code_list>    Private Sub Workbook_AddinInstall()
        VBAToolKit.vtkToolBars.vtkCreateToolbars
    End Sub</code_list>
      </child>
      <child>
        <type>sub</type>
        <name>Workbook_AddinInstall2</name>
        <code_list>    Private Sub Workbook_AddinInstall2()
        VBAToolKit.vtkToolBars.vtkCreateToolbars
    End Sub</code_list>
      </child>
      <child>
        <type>sub</type>
        <name>Workbook_AddinInstall33</name>
        <code_list>    Private Sub Workbook_AddinInstall33()
        VBAToolKit.vtkToolBars.vtkCreateToolbars
    End Sub</code_list>
      </child>
    </child>
    <child>
      <type>sub</type>
      <name>Workbook_AddinUninstall</name>
      <code_list>Private Sub Workbook_AddinUninstall()
    VBAToolKit.vtkToolBars.vtkDeleteToolbars
End Sub</code_list>
    </child>
    <child>
      <type>sub</type>
      <name>Workbook_Open</name>
      <code_list>Private Sub Workbook_Open()
    On Error Resume Next
    If AddIns("VBAToolKit").Installed Then VBAToolKit.vtkToolBars.vtkCreateToolbars excToolbar:=False
End Sub</code_list>
    </child>
  </child>
  <child>
    <type>file</type>
    <name>vtkConfiguration.cls</name>
    <child>
      <type>sub</type>
      <name>init</name>
      <code_list>Public Sub init(confManager As vtkConfigurationManager, confNumber As Integer)
    Set m_parent = confManager
    m_number = confNumber
End Sub</code_list>
    </child>
    <child>
      <type>sub</type>
      <name>addReferencesToWorkbook</name>
      <code_list>Public Sub addReferencesToWorkbook(Wb As Workbook)
    Dim ref As vtkReference
    For Each ref In Me.references
        ref.addToWorkbook Wb
    Next
End Sub</code_list>
    </child>
  </child>
  <child>
    <type>file</type>
    <name>vtkConfigurationManager.cls</name>
    <child>
      <type>function</type>
      <name>configurations</name>
      <code_list>Public Function configurations() As Collection
' configuration</code_list>
      <child>
        <type>function</type>
        <name>configuration</name>
        <code_list>Public Function configuration(n As Integer) As String
' getConfigurationNumber</code_list>
        <child>
          <type>function</type>
          <name>getConfigurationNumber</name>
          <code_list>Public Function getConfigurationNumber(configuration As String) As Integer
' setConfigurationPath</code_list>
          <child>
            <type>sub</type>
            <name>setConfigurationPath</name>
            <code_list>Public Sub setConfigurationPath(configuration As String, path As String)
' getConfigurationPath</code_list>
            <child>
              <type>function</type>
              <name>getConfigurationPath</name>
              <code_list>Public Function getConfigurationPath(configuration As String) As String
' getConfigurationPathWithNumber</code_list>
              <child>
                <type>function</type>
                <name>getConfigurationPathWithNumber</name>
                <code_list>Public Function getConfigurationPathWithNumber(n As Integer) As String
' setConfigurationPathWithNumber &lt;- (dans vtkConfiguration, ne sont utilis�s que pour les tests)</code_list>
                <call>setConfigurationPathWithNumber</call>
                <child>
                  <type>sub</type>
                  <name>setConfigurationPathWithNumber</name>
                  <code_list>Public Sub setConfigurationPathWithNumber(n As Integer, path As String)
' getConfigurationProjectNameWithNumber</code_list>
                  <child>
                    <type>function</type>
                    <name>getConfigurationProjectNameWithNumber</name>
                    <code_list>Public Function getConfigurationProjectNameWithNumber(n As Integer) As String
' setConfigurationProjectNameWithNumber &lt;-</code_list>
                    <call>setConfigurationProjectNameWithNumber</call>
                    <child>
                      <type>sub</type>
                      <name>setConfigurationProjectNameWithNumber</name>
                      <code_list>Public Sub setConfigurationProjectNameWithNumber(n As Integer, projectName As String)
' getConfigurationCommentWithNumber</code_list>
                      <call>projectName</call>
                      <child>
                        <type>function</type>
                        <name>getConfigurationCommentWithNumber</name>
                        <code_list>Public Function getConfigurationCommentWithNumber(n As Integer) As String
' setConfigurationCommentWithNumber &lt;-</code_list>
                        <call>setConfigurationCommentWithNumber</call>
                        <child>
                          <type>sub</type>
                          <name>setConfigurationCommentWithNumber</name>
                          <code_list>Public Sub setConfigurationCommentWithNumber(n As Integer, comment As String)
' getConfigurationTemplateWithNumber</code_list>
                          <child>
                            <type>function</type>
                            <name>getConfigurationTemplateWithNumber</name>
                            <code_list>Public Function getConfigurationTemplateWithNumber(n As Integer) As String
' setConfigurationTemplateWithNumber &lt;-</code_list>
                            <call>setConfigurationTemplateWithNumber</call>
                            <child>
                              <type>sub</type>
                              <name>setConfigurationTemplateWithNumber</name>
                              <code_list>Public Sub setConfigurationTemplateWithNumber(n As Integer, template As String)
' getConfigurationPasswordWithNumber</code_list>
                              <child>
                                <type>function</type>
                                <name>getConfigurationPasswordWithNumber</name>
                                <code_list>Public Function getConfigurationPasswordWithNumber(n As Integer) As String
' setConfigurationPasswordWithNumber &lt;-
' addConfiguration</code_list>
                                <call>setConfigurationPasswordWithNumber</call>
                                <child>
                                  <type>sub</type>
                                  <name>setConfigurationPasswordWithNumber</name>
                                  <code_list>Public Sub setConfigurationPasswordWithNumber(n As Integer, password As String)

End Sub</code_list>
                                </child>
                                <child>
                                  <type>function</type>
                                  <name>addConfiguration</name>
                                  <code_list>Public Function addConfiguration(configuration As String, Optional path As String = "", Optional template As String = "", Optional projectName As String = "", Optional comment As String = "") As Integer
' --&gt; on garde les setters dans l'interface, avec une erreur dans XML

' moduleCount
Public Property Get moduleCount() As Integer
' modules</code_list>
                                  <call>projectName</call>
                                  <child>
                                    <type>function</type>
                                    <name>modules</name>
                                    <code_list>Public Function modules() As Collection
' module</code_list>
                                    <child>
                                      <type>function</type>
                                      <name>module</name>
                                      <code_list>Public Function module(n As Integer) As String
' getModuleNumber</code_list>
                                      <child>
                                        <type>function</type>
                                        <name>getModuleNumber</name>
                                        <code_list>Public Function getModuleNumber(module As String) As Integer
' getModulePathWithNumber</code_list>
                                        <child>
                                          <type>function</type>
                                          <name>getModulePathWithNumber</name>
                                          <code_list>Public Function getModulePathWithNumber(numModule As Integer, numConfiguration As Integer) As String
' setModulePathWithNumber &lt;- (dans vtkModule, non utilis� � part dans les tests)</code_list>
                                          <call>setModulePathWithNumber</call>
                                          <child>
                                            <type>sub</type>
                                            <name>setModulePathWithNumber</name>
                                            <code_list>Public Sub setModulePathWithNumber(path As String, numModule As Integer, numConfiguration As Integer)
' addModule</code_list>
                                            <child>
                                              <type>function</type>
                                              <name>addModule</name>
                                              <code_list>Public Function addModule(module As String) As Integer

' references</code_list>
                                              <child>
                                                <type>function</type>
                                                <name>references</name>
                                                <code_list>Public Function references() As Collection
' getConfigurationReferencesWithNumber</code_list>
                                                <child>
                                                  <type>function</type>
                                                  <name>getConfigurationReferencesWithNumber</name>
                                                  <code_list>Public Function getConfigurationReferencesWithNumber(n As Integer) As Collection
</code_list>
                                                </child>
                                              </child>
                                            </child>
                                          </child>
                                        </child>
                                      </child>
                                    </child>
                                  </child>
                                </child>
                              </child>
                            </child>
                          </child>
                        </child>
                      </child>
                    </child>
                  </child>
                </child>
              </child>
            </child>
          </child>
        </child>
      </child>
    </child>
  </child>
  <child>
    <type>file</type>
    <name>vtkConstants.bas</name>
  </child>
  <child>
    <type>file</type>
    <name>vtkCreateProjectForm.frm</name>
    <child>
      <type>sub</type>
      <name>BrowseButton_Click</name>
      <code_list>Private Sub BrowseButton_Click()
    With Application.FileDialog(msoFileDialogFolderPicker)
        .AllowMultiSelect = False
        .Show
        If .SelectedItems.Count &gt; 0 Then
            ProjectPathTextBox.Text = .SelectedItems(1)
        End If
    End With
End Sub</code_list>
    </child>
    <child>
      <type>sub</type>
      <name>CreateButton_Click</name>
      <code_list>Private Sub CreateButton_Click()
    VBAToolKit.vtkCreateProject path:=ProjectPathTextBox.Text, name:=ProjectNameTextBox.Text
    Unload Me
End Sub</code_list>
    </child>
    <child>
      <type>sub</type>
      <name>CancelButton_Click</name>
      <code_list>Private Sub CancelButton_Click()
' don''t use End , because it stop debugger
    Unload Me
End Sub</code_list>
    </child>
    <child>
      <type>sub</type>
      <name>ProjectPathTextBox_Change</name>
      <code_list>Private Sub ProjectPathTextBox_Change()
    enableCreateButton
End Sub</code_list>
    </child>
    <child>
      <type>sub</type>
      <name>ProjectNameTextBox_Change</name>
      <code_list>Private Sub ProjectNameTextBox_Change()
    enableCreateButton
End Sub</code_list>
    </child>
    <child>
      <type>sub</type>
      <name>UserForm_Initialize</name>
      <code_list>Private Sub UserForm_Initialize()
    enableCreateButton
End Sub</code_list>
    </child>
    <child>
      <type>sub</type>
      <name>enableCreateButton</name>
      <code_list>Private Sub enableCreateButton()
    Dim folderExists As Boolean, projectDoesntExists As Boolean, sep As String
    Dim fso As New FileSystemObject
    Const PINK = &amp;HC0E0FF
    Const GREEN = &amp;HC0FFC0
    
   On Error Resume Next
    fso.GetFolder (ProjectPathTextBox.Text)
    folderExists = Err.Number = 0
    If folderExists Then ProjectPathTextBox.BackColor = GREEN Else ProjectPathTextBox.BackColor = PINK
    
    If Right$(ProjectPathTextBox.Text, 1) Like "\" Then sep = "" Else sep = "\"
    fso.GetFolder (ProjectPathTextBox.Text &amp; sep &amp; ProjectNameTextBox.Text) 'Will raise an error 76 if wrong path or not a folder
    projectDoesntExists = Err.Number = 76
    If (Not folderExists And ProjectNameTextBox.Text Like "") Or (folderExists And Not projectDoesntExists) _
            Then ProjectNameTextBox.BackColor = PINK Else ProjectNameTextBox.BackColor = GREEN
   On Error GoTo 0
    
    CreateButton.Enabled = folderExists And projectDoesntExists
End Sub</code_list>
    </child>
  </child>
  <child>
    <type>file</type>
    <name>vtkCreateProjectForm.frx</name>
  </child>
  <child>
    <type>file</type>
    <name>vtkEventHandler.cls</name>
    <child>
      <type>sub</type>
      <name>cbe_Click</name>
      <code_list>Private Sub cbe_Click(ByVal CommandBarControl As Object, Handled As Boolean, CancelDefault As Boolean)
    On Error Resume Next
    Application.Run CommandBarControl.onAction
    Handled = True
    CancelDefault = True
End Sub</code_list>
    </child>
  </child>
  <child>
    <type>file</type>
    <name>vtkExcelUtilities.bas</name>
    <child>
      <type>function</type>
      <name>vtkCreateExcelWorkbook</name>
      <code_list>Public Function vtkCreateExcelWorkbook() As Workbook
    Dim Wb As Workbook
    Set Wb = Workbooks.Add(xlWBATWorksheet)
    Set vtkCreateExcelWorkbook = Wb
End Function</code_list>
      <call>vtkCreateExcelWorkbook</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkCreateExcelWorkbookForTestWithProjectName</name>
      <code_list>Public Function vtkCreateExcelWorkbookForTestWithProjectName(projectName As String) As Workbook
    Dim Wb As Workbook
    Set Wb = vtkCreateExcelWorkbookWithPathAndName(vtkPathToTestFolder, vtkProjectForName(projectName).workbookDEVName)
    Wb.VBProject.name = projectName
    Set vtkCreateExcelWorkbookForTestWithProjectName = Wb
End Function</code_list>
      <call>vtkCreateExcelWorkbookForTestWithProjectName</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkCreateExcelWorkbookWithPathAndName</name>
      <code_list>Public Function vtkCreateExcelWorkbookWithPathAndName(path As String, name As String) As Workbook
    Dim Wb As Workbook
    Set Wb = vtkCreateExcelWorkbook
    Wb.SaveAs fileName:=path &amp; "\" &amp; name, FileFormat:=xlOpenXMLWorkbookMacroEnabled
    Set vtkCreateExcelWorkbookWithPathAndName = Wb
End Function</code_list>
      <call>vtkCreateExcelWorkbookWithPathAndName</call>
    </child>
    <child>
      <type>sub</type>
      <name>vtkCloseAndKillWorkbook</name>
      <code_list>Public Sub vtkCloseAndKillWorkbook(Wb As Workbook)
    Dim fullPath As String
    fullPath = Wb.fullName
    Wb.Close saveChanges:=False
    Kill PathName:=fullPath
End Sub</code_list>
    </child>
    <child>
      <type>function</type>
      <name>VtkWorkbookIsOpen</name>
      <code_list>Public Function VtkWorkbookIsOpen(workbookName As String) As Boolean
    On Error Resume Next
    Workbooks(workbookName).Activate 'if we have a problem to activate workbook = the workbook is closed , if we can activate it without problem = the workbook is open
    VtkWorkbookIsOpen = (Err = 0)
End Function</code_list>
      <call>VtkWorkbookIsOpen</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkDefaultExcelExtension</name>
      <code_list>Public Function vtkDefaultExcelExtension() As String
    If vtkExcelVersion &gt;= 12 Then
        vtkDefaultExcelExtension = ".xlsm"
    Else
        vtkDefaultExcelExtension = ".xls"
    End If
End Function</code_list>
      <call>vtkExcelVersion</call>
      <call>vtkDefaultExcelExtension</call>
      <call>vtkDefaultExcelExtension</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkDefaultExcelAddInExtension</name>
      <code_list>Public Function vtkDefaultExcelAddInExtension() As String
    If vtkExcelVersion &gt;= 12 Then
        vtkDefaultExcelAddInExtension = ".xlam"
    Else
        vtkDefaultExcelAddInExtension = ".xla"
    End If
End Function</code_list>
      <call>vtkExcelVersion</call>
      <call>vtkDefaultExcelAddInExtension</call>
      <call>vtkDefaultExcelAddInExtension</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkExcelVersion</name>
      <code_list>Public Function vtkExcelVersion() As Integer
    If vtkExcelVersionForTest = 0 Then
        vtkExcelVersion = Val(Application.Version)
       Else
        vtkExcelVersion = vtkExcelVersionForTest
    End If
End Function</code_list>
      <call>vtkExcelVersion</call>
      <call>vtkExcelVersion</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkDefaultIsAddIn</name>
      <code_list>Public Function vtkDefaultIsAddIn(filePath As String) As Boolean
    vtkDefaultIsAddIn = (vtkGetFileExtension(filePath) = "xlam") Or (vtkGetFileExtension(filePath) = "xla")
End Function</code_list>
      <call>vtkDefaultIsAddIn</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkReferencesInWorkbook</name>
      <code_list>Public Function vtkReferencesInWorkbook(Wb As Workbook) As Collection
    Dim c As New Collection, ref As vtkReference, r As VBIDE.Reference
    For Each r In Wb.VBProject.references
        Set ref = New vtkReference
        ref.initWithVBAReference r
        c.Add Item:=ref, Key:=ref.name
    Next
    Set vtkReferencesInWorkbook = c
End Function</code_list>
      <call>vtkReferencesInWorkbook</call>
    </child>
    <child>
      <type>sub</type>
      <name>vtkProtectProject</name>
      <code_list>Sub vtkProtectProject(project As VBProject, password As String)
    Set Application.VBE.ActiveVBProject = project
    Application.VBE.CommandBars(1).FindControl(id:=2578, recursive:=True).Execute
    SendKeys "+{TAB}{RIGHT}%V{+}{TAB}" &amp; password &amp; "{TAB}" &amp; password &amp; "~", True
End Sub</code_list>
    </child>
  </child>
  <child>
    <type>file</type>
    <name>vtkExcelUtilities2003.bas</name>
    <child>
      <type>function</type>
      <name>vtkDefaultFileFormat</name>
      <code_list>Public Function vtkDefaultFileFormat(filePath As String) As XlFileFormat
    Select Case vtkGetFileExtension(filePath)
        Case "xla"
            vtkDefaultFileFormat = xlAddIn
        Case "xls"
            vtkDefaultFileFormat = xlWorkbookNormal
        Case Else
            vtkDefaultFileFormat = 0
        End Select
End Function</code_list>
      <call>vtkDefaultFileFormat</call>
      <call>vtkDefaultFileFormat</call>
      <call>vtkDefaultFileFormat</call>
    </child>
  </child>
  <child>
    <type>file</type>
    <name>vtkExcelUtilities2007.bas</name>
    <child>
      <type>function</type>
      <name>vtkDefaultFileFormat</name>
      <code_list>Public Function vtkDefaultFileFormat(filePath As String) As XlFileFormat
    Select Case vtkGetFileExtension(filePath)
        Case "xlsx"
            vtkDefaultFileFormat = xlOpenXMLWorkbook
        Case "xltx"
            vtkDefaultFileFormat = xlOpenXMLTemplate
        Case "xltm"
            vtkDefaultFileFormat = xlOpenXMLTemplateMacroEnabled
        Case "xlsm"
            vtkDefaultFileFormat = xlOpenXMLWorkbookMacroEnabled
        Case "xlam"
            vtkDefaultFileFormat = xlOpenXMLAddIn
        Case "xla"
            vtkDefaultFileFormat = xlAddIn
        Case "xls"
            vtkDefaultFileFormat = xlExcel8
        Case Else
            vtkDefaultFileFormat = 0
        End Select
End Function</code_list>
      <call>vtkDefaultFileFormat</call>
      <call>vtkDefaultFileFormat</call>
      <call>vtkDefaultFileFormat</call>
      <call>vtkDefaultFileFormat</call>
      <call>vtkDefaultFileFormat</call>
      <call>vtkDefaultFileFormat</call>
      <call>vtkDefaultFileFormat</call>
      <call>vtkDefaultFileFormat</call>
    </child>
  </child>
  <child>
    <type>file</type>
    <name>vtkFileSystemUtilities.bas</name>
    <child>
      <type>function</type>
      <name>vtkTextFileReader</name>
      <code_list>Public Function vtkTextFileReader(fullFilePath As String) As String

    Dim Textfile As Variant
    Dim strresult As String
    Dim fso As New FileSystemObject

On Error GoTo vtkTextFileReader_Error

    Set Textfile = fso.OpenTextFile(fullFilePath, ForReading)
    Do Until Textfile.AtEndOfStream
        strresult = strresult &amp; Chr(10) &amp; Textfile.ReadLine
    Loop
    vtkTextFileReader = strresult

   On Error GoTo 0
   Exit Function

vtkTextFileReader_Error:
    MsgBox "Error " &amp; Err.Number &amp; " (" &amp; Err.Description &amp; ") in procedure VtkTextFileReader of Module vtkGitFunctions"
    vtkTextFileReader = Err.Number
End Function</code_list>
      <call>vtkTextFileReader</call>
      <call>vtkTextFileReader</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkCleanFolder</name>
      <code_list>Public Function vtkCleanFolder(folderPath As String) As Integer
    
    On Error GoTo vtkCleanFolder_Error
    
    Dim fso As New Scripting.FileSystemObject
    Dim sourceFolder As Scripting.Folder
    Dim subFolder As Scripting.Folder
    Dim File As Scripting.File
    Set sourceFolder = fso.GetFolder(folderPath)

    For Each File In sourceFolder.Files
        fso.DeleteFile File
    Next File
    For Each subFolder In sourceFolder.SubFolders
        vtkCleanFolder (subFolder.path)
        fso.DeleteFolder subFolder.path, True
    Next subFolder
    
    On Error GoTo 0
    vtkCleanFolder = VTK_OK
    Exit Function
    
vtkCleanFolder_Error:
    If Err.Number = 76 Then
        vtkCleanFolder = Err.Number
    Else
        vtkCleanFolder = VTK_UNEXPECTED_ERROR
    End If
    Exit Function
    
End Function</code_list>
      <call>vtkCleanFolder</call>
      <call>vtkCleanFolder</call>
      <call>vtkCleanFolder</call>
      <call>vtkCleanFolder</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkDeleteFolder</name>
      <code_list>Public Function vtkDeleteFolder(folderPath As String)
    
    Dim fso As New Scripting.FileSystemObject
    Dim sourceFolder As Scripting.Folder

    On Error GoTo vtkDeleteFolder_Error

    Set sourceFolder = fso.GetFolder(folderPath)
    
    vtkCleanFolder (folderPath)
    fso.DeleteFolder (sourceFolder.path)

    On Error GoTo 0
    vtkDeleteFolder = VTK_OK
    Exit Function

vtkDeleteFolder_Error:
    If Err.Number = 76 Then
        vtkDeleteFolder = Err.Number
    Else
        vtkDeleteFolder = VTK_UNEXPECTED_ERROR
    End If
    Exit Function

End Function</code_list>
      <call>vtkCleanFolder</call>
      <call>vtkDeleteFolder</call>
      <call>vtkDeleteFolder</call>
      <call>vtkDeleteFolder</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkDoesFolderExist</name>
      <code_list>Public Function vtkDoesFolderExist(folderPath As String) As Integer

    On Error GoTo vtkDoesFolderExist_Error
    
    Dim fso As New FileSystemObject
    fso.GetFolder (folderPath)
    
    On Error GoTo 0
    vtkDoesFolderExist = True
    Exit Function

vtkDoesFolderExist_Error:
    vtkDoesFolderExist = False
    Exit Function

End Function</code_list>
      <call>vtkDoesFolderExist</call>
      <call>vtkDoesFolderExist</call>
    </child>
    <child>
      <type>sub</type>
      <name>vtkCreateFolderPath</name>
      <code_list>Public Sub vtkCreateFolderPath(fileOrFolderPath As String)

    Dim fso As New FileSystemObject

    On Error GoTo vtkCreateFolderPath_Error

    If fso.GetDriveName(fileOrFolderPath) Like "" Then
        Err.Raise VTK_FORBIDDEN_PARAMETER
    End If
    
    If fso.DriveExists(fso.GetDriveName(fileOrFolderPath)) = False Then
        Err.Raise VTK_WRONG_FOLDER_PATH
    End If
    
    If InStr(fileOrFolderPath, ".\") &lt;&gt; 0 Then
        Err.Raise VTK_FORBIDDEN_PARAMETER
    End If
    
    Dim folderPath As String
    If Not fso.GetExtensionName(fileOrFolderPath) Like "" Then
        folderPath = fso.GetParentFolderName(fileOrFolderPath)
    Else
        folderPath = fileOrFolderPath
    End If
    
    Dim currentFolder As String
    Dim folderArray() As String
    folderArray = Split(folderPath, "\")
    Dim i As Integer: i = 0
    
    currentFolder = folderArray(i)
    i = i + 1
    While i &lt;= UBound(folderArray)
        currentFolder = currentFolder &amp; "\" &amp; folderArray(i)
        If Not fso.folderExists(currentFolder) Then MkDir currentFolder
        i = i + 1
    Wend

    On Error GoTo 0
    Exit Sub

vtkCreateFolderPath_Error:
    Err.Source = "vtkCreateFolderPath of module vtkFileSystemUtilities"
    
    Select Case Err.Number
        Case VTK_WRONG_FOLDER_PATH
            Err.Description = "The path given as a parameter corresponds to a drive that is not mounted."
        Case VTK_FORBIDDEN_PARAMETER
            Err.Description = "The path given as a parameter has illegal features. " &amp; vbCrLf &amp; _
                              "Make sure it is an absolute path that does not use dots or double dots to designate a folder."
        Case Else
            Err.Number = VTK_UNEXPECTED_ERROR
    End Select
    
    Err.Raise Err.Number, Err.Source, Err.Description
    
    Exit Sub
End Sub</code_list>
      <call>module</call>
    </child>
  </child>
  <child>
    <type>file</type>
    <name>vtkGitFunctions.bas</name>
    <child>
      <type>function</type>
      <name>vtkInitializeGit</name>
      <code_list>Public Function vtkInitializeGit(folderPath As String, Optional logFile As String = "")
    Dim tmpLogFileName As String
    tmpLogFileName = "initialize.log"
    Dim logFileFullPath As String
    
    Dim convertedFolderPath As String
    Dim convertedLogFilePath As String
    
    Dim fso As New FileSystemObject
    Dim contentStream As TextStream
    
    On Error GoTo vtkInitializeGit_Err
        
    If InStr(UCase(Environ("PATH")), UCase("Git\cmd")) = False Then
        Err.Raise VTK_GIT_NOT_INSTALLED, "", "Git not installed."
    End If
    
    convertedFolderPath = vtkGitConvertWinPath(folderPath)
    
    If vtkDoesFolderExist(folderPath) = False Then
        Err.Raise VTK_WRONG_FOLDER_PATH, "", "Folder path not found."
    End If
    
    If vtkDoesFolderExist(folderPath &amp; "\.git") = True Then
        Err.Raise VTK_GIT_ALREADY_INITIALIZED_IN_FOLDER, "", "Git has already been initialized in the folder " &amp; folderPath
    End If
    
    If logFile &lt;&gt; "" Then
        Dim splittedLogFilePath() As String
        splittedLogFilePath = Split(logFile, ":")
        If splittedLogFilePath(LBound(splittedLogFilePath)) = logFile Then
            logFileFullPath = folderPath &amp; "\" &amp; logFile
        End If
        convertedLogFilePath = vtkGitConvertWinPath(logFileFullPath)
    Else
        convertedLogFilePath = vtkGitConvertWinPath(folderPath &amp; "\" &amp; tmpLogFileName)
    End If
    
    ShellAndWait "cmd.exe /c git init " &amp; convertedFolderPath _
    &amp; " &gt; " &amp; convertedLogFilePath, 0, vbHide, AbandonWait
    
    Dim logFileContent As String
    logFileContent = vtkTextFileReader(folderPath &amp; "\" &amp; tmpLogFileName)
    If Left(logFileContent, 12) &lt;&gt; Chr(10) &amp; "Initialized" Then
        Err.Raise VTK_GIT_PROBLEM_DURING_INITIALIZATION, , "There was a problem during Git initialization." _
        &amp; vbCrLf &amp; "Content of the log file : " &amp; logFileContent
    End If
    
    If logFile = "" Then
        Kill folderPath &amp; "\" &amp; tmpLogFileName
    End If
    
    fso.DeleteFile folderPath &amp; "\.git\info\exclude", True
    
    Set contentStream = fso.CreateTextFile(folderPath &amp; "\.git\info\exclude")
    contentStream.WriteLine "# Ignore the content of the Tests and GitLog folders"
    contentStream.WriteLine "/Tests/*"
    contentStream.WriteLine "/GitLog/*"
    contentStream.WriteLine
    contentStream.WriteLine "# Ignore the temporary Excel files"
    contentStream.WriteLine "~*"
    contentStream.WriteLine
    contentStream.WriteLine "# Ignore the delivery Excel files"
    contentStream.WriteLine "/Delivery/*.xl*"
    contentStream.WriteLine
    contentStream.WriteLine "# Ignore the Project Excel files"
    contentStream.WriteLine "/Project/*.xl*"
    contentStream.Close
    
    ShellAndWait "cmd.exe /c cd " &amp; folderPath &amp; " &amp; git add " &amp; ". ", 0, vbHide, AbandonWait
     
    On Error GoTo 0
    vtkInitializeGit = VTK_OK
    Exit Function
    
    
vtkInitializeGit_Err:
    If ((Err.Number = VTK_GIT_NOT_INSTALLED) _
        Or (Err.Number = VTK_GIT_ALREADY_INITIALIZED_IN_FOLDER) _
        Or (Err.Number = VTK_FORBIDDEN_PARAMETER) _
        Or (Err.Number = VTK_GIT_PROBLEM_DURING_INITIALIZATION) _
        Or (Err.Number = VTK_WRONG_FOLDER_PATH)) Then
        Err.Raise Err.Number, "Module vktGitFuntions : Function vtkGitInitialize", Err.Description
    Else
        Debug.Print "ERR IN INITIALIZE : " &amp; Err.Number &amp; Err.Description
        Err.Raise VTK_UNEXPECTED_ERROR, "Module vktGitFuntions : Function vtkGitInitialize", Err.Description
    End If
     
    Exit Function

End Function</code_list>
      <call>initialized</call>
      <call>init</call>
      <call>ShellAndWait</call>
      <call>ShellAndWait</call>
      <call>vtkInitializeGit</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkGitConvertWinPath</name>
      <code_list>Public Function vtkGitConvertWinPath(winPath As String) As String
    
    Dim convertedPath As String
    convertedPath = winPath
    Dim convertedSplittedPath() As String
    
    On Error GoTo vtkGitConvertWinPath_Error
    
    convertedSplittedPath = Split(convertedPath, ":")
    
    If convertedSplittedPath(LBound(convertedSplittedPath)) &lt;&gt; "C" Then
        Err.Raise VTK_FORBIDDEN_PARAMETER, "", "Parameter is invalid."
    End If

    convertedPath = convertedSplittedPath(LBound(convertedSplittedPath) + 1)
    
    convertedPath = Replace(convertedPath, "\", "/")
        
    On Error GoTo 0
    vtkGitConvertWinPath = Chr(34) &amp; convertedPath &amp; Chr(34)
    Exit Function
    

vtkGitConvertWinPath_Error:
    If (Err.Number = VTK_FORBIDDEN_PARAMETER) Then
        Err.Raise Err.Number, "Module vtkGitFunctions ; Function vtkGitConvertWinPath", Err.Description
    Else
        Err.Raise VTK_UNEXPECTED_ERROR, "Module vtkGitFunctions ; Function vtkGitConvertWinPath", Err.Description
    End If
    Exit Function

End Function</code_list>
      <call>vtkGitConvertWinPath</call>
    </child>
  </child>
  <child>
    <type>file</type>
    <name>vtkImportExportUtilities.bas</name>
    <child>
      <type>function</type>
      <name>VBComponentTypeAsString</name>
      <code_list>Private Function VBComponentTypeAsString(ctype As Integer)
    Select Case ctype
        Case vbext_ct_ActiveXDesigner
            VBComponentTypeAsString = "ActiveX"
        Case vbext_ct_ClassModule
            VBComponentTypeAsString = "Class"
        Case vbext_ct_Document
            VBComponentTypeAsString = "Document"
        Case vbext_ct_MSForm
            VBComponentTypeAsString = "Form"
        Case vbext_ct_StdModule
            VBComponentTypeAsString = "Standard"
        Case Else
            VBComponentTypeAsString = "Unknown"
    End Select
End Function</code_list>
      <call>VBComponentTypeAsString</call>
      <call>VBComponentTypeAsString</call>
      <call>VBComponentTypeAsString</call>
      <call>VBComponentTypeAsString</call>
      <call>VBComponentTypeAsString</call>
      <call>VBComponentTypeAsString</call>
    </child>
    <child>
      <type>function</type>
      <name>extensionForVBComponentType</name>
      <code_list>Private Function extensionForVBComponentType(ctype As Integer)
    Select Case ctype
        Case vbext_ct_ActiveXDesigner
            extensionForVBComponentType = ".???"
        Case vbext_ct_ClassModule
            extensionForVBComponentType = ".cls"
        Case vbext_ct_Document
            extensionForVBComponentType = ".cls"
        Case vbext_ct_MSForm
            extensionForVBComponentType = ".frm"
        Case vbext_ct_StdModule
            extensionForVBComponentType = ".bas"
        Case Else
            extensionForVBComponentType = ".???"
    End Select
End Function</code_list>
      <call>extensionForVBComponentType</call>
      <call>extensionForVBComponentType</call>
      <call>extensionForVBComponentType</call>
      <call>extensionForVBComponentType</call>
      <call>extensionForVBComponentType</call>
      <call>extensionForVBComponentType</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkStandardCategoryForModuleName</name>
      <code_list>Public Function vtkStandardCategoryForModuleName(moduleName As String) As String
   
   On Error Resume Next
    Dim ret As String
    ret = vtkVBAUnitModulesList.Item(moduleName)
    If Err.Number = 0 Then
        vtkStandardCategoryForModuleName = "VBAUnit"
       On Error GoTo 0
        Exit Function
        End If
   On Error GoTo 0
   
    If Right(moduleName, 6) Like "Tester" Then
        vtkStandardCategoryForModuleName = "Test"
       Else
        vtkStandardCategoryForModuleName = "Prod"
    End If

End Function</code_list>
      <call>vtkStandardCategoryForModuleName</call>
      <call>vtkStandardCategoryForModuleName</call>
      <call>vtkStandardCategoryForModuleName</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkStandardPathForModule</name>
      <code_list>Public Function vtkStandardPathForModule(module As VBComponent) As String

    Dim path As String
    Select Case vtkStandardCategoryForModuleName(moduleName:=module.name)
        Case "VBAUnit"
            path = "Source\VbaUnit\"
        Case "Prod"
            path = "Source\ConfProd\"
        Case "Test"
            path = "Source\ConfTest\"
    End Select
    
    vtkStandardPathForModule = path &amp; module.name &amp; extensionForVBComponentType(ctype:=module.Type)
    
End Function</code_list>
      <call>vtkStandardPathForModule</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkVBAUnitModulesList</name>
      <code_list>Public Function vtkVBAUnitModulesList() As Collection
    If vbaUnitModules Is Nothing Then
        Set vbaUnitModules = New Collection
        With vbaUnitModules
            .Add Item:="VbaUnitMain", Key:="VbaUnitMain"
            .Add Item:="Assert", Key:="Assert"
            .Add Item:="AutoGen", Key:="AutoGen"
            .Add Item:="IAssert", Key:="IAssert"
            .Add Item:="IResultUser", Key:="IResultUser"
            .Add Item:="IRunManager", Key:="IRunManager"
            .Add Item:="ITest", Key:="ITest"
            .Add Item:="ITestCase", Key:="ITestCase"
            .Add Item:="ITestManager", Key:="ITestManager"
            .Add Item:="RunManager", Key:="RunManager"
            .Add Item:="TestCaseManager", Key:="TestCaseManager"
            .Add Item:="TestClassLister", Key:="TestClassLister"
            .Add Item:="TesterTemplate", Key:="TesterTemplate"
            .Add Item:="TestFailure", Key:="TestFailure"
            .Add Item:="TestResult", Key:="TestResult"
            .Add Item:="TestRunner", Key:="TestRunner"
            .Add Item:="TestSuite", Key:="TestSuite"
            .Add Item:="TestSuiteManager", Key:="TestSuiteManager"
        End With
    End If
    Set vtkVBAUnitModulesList = vbaUnitModules
End Function</code_list>
      <call>vtkVBAUnitModulesList</call>
    </child>
    <child>
      <type>sub</type>
      <name>vtkImportOneModule</name>
      <code_list>Public Sub vtkImportOneModule(project As VBProject, moduleName As String, filePath As String)
    Dim newModule As VBComponent, oldModule As VBComponent
    
   
   On Error Resume Next
    Set oldModule = project.VBComponents(moduleName)
    
    If oldModule Is Nothing Then
        Set newModule = project.VBComponents.Import(filePath)
        If Not newModule Is Nothing Then newModule.name = moduleName
       Else
        Dim fso, buf As TextStream, code As String
        Set fso = CreateObject("Scripting.FileSystemObject")
        Const ForReading = 1, ForWriting = 2, ForAppending = 3
        Const TristateUseDefault = -2, TristateTrue = -1, TristateFalse = 0

        Set buf = fso.OpenTextFile(filePath, ForReading, False, TristateUseDefault)
        
        If Not buf Is Nothing Then
            Do
                code = buf.ReadLine
                Loop While Not Left$(code, 9) Like "Attribute"
            Do While Left$(code, 9) Like "Attribute"
                code = buf.ReadLine
                Loop
            code = code &amp; vbCrLf &amp; buf.ReadAll
            
            oldModule.CodeModule.DeleteLines StartLine:=1, Count:=oldModule.CodeModule.CountOfLines
            oldModule.CodeModule.InsertLines 1, code
        End If
        Set fso = Nothing
    End If
   On Error GoTo 0
End Sub</code_list>
    </child>
    <child>
      <type>sub</type>
      <name>vtkExportOneModule</name>
      <code_list>Public Sub vtkExportOneModule(project As VBProject, moduleName As String, filePath As String, Optional normalize As Boolean = True)
    Dim fso As New FileSystemObject, m As VBComponent
    
   On Error GoTo vtkExportOneModule_Error
   
    Set m = project.VBComponents(moduleName)
        
    If fso.FileExists(filePath) Then fso.DeleteFile fileSpec:=filePath
    
    vtkCreateFolderPath fileOrFolderPath:=filePath
    
    m.Export fileName:=filePath
    
    If normalize Then vtkNormalizeFile filePath, vtkListOfProperlyCasedIdentifiers
    
   On Error GoTo 0
    Exit Sub

vtkExportOneModule_Error:
    If Err.Number = 9 Then
        Err.Raise Number:=VTK_UNKNOWN_MODULE, Source:="ExportOneModule", Description:="Module to export doesn't exist : " &amp; moduleName
       Else
        Err.Raise Number:=VTK_UNEXPECTED_ERROR, Source:="ExportOneModule", Description:="Unexpected error when exporting " &amp; moduleName &amp; " : " &amp; Err.Description
    End If
End Sub</code_list>
      <call>vtkCreateFolderPath</call>
      <call>vtkNormalizeFile</call>
    </child>
    <child>
      <type>sub</type>
      <name>vtkExportModulesFromAnotherProject</name>
      <code_list>Public Sub vtkExportModulesFromAnotherProject(projectWithModules As VBProject, projectName As String, confName As String)
    Dim cm As vtkConfigurationManager, rootPath As String
    Dim cn As Integer, filePath As String, i As Integer
    
   On Error GoTo vtkExportModulesFromAnotherProject_Error

    Set cm = vtkConfigurationManagerForProject(projectName)
    cn = cm.getConfigurationNumber(configuration:=confName)
    rootPath = cm.rootPath
    
    For i = 1 To cm.moduleCount
        filePath = cm.getModulePathWithNumber(numModule:=i, numConfiguration:=cn)
        If Not filePath Like "" Then vtkExportOneModule project:=projectWithModules, moduleName:=cm.module(i), filePath:=rootPath &amp; "\" &amp; filePath
    Next i
    
   On Error GoTo 0
   Exit Sub

vtkExportModulesFromAnotherProject_Error:
    Err.Raise VTK_UNEXPECTED_ERROR, "vtkExportModulesFromAnotherProject", "Unexpected error when exporting modules from " &amp; projectWithModules.name &amp; " : " &amp; Err.Description
End Sub</code_list>
      <call>projectName</call>
      <call>vtkExportOneModule</call>
      <call>modules</call>
    </child>
    <child>
      <type>sub</type>
      <name>vtkImportModulesInAnotherProject</name>
      <code_list>Public Sub vtkImportModulesInAnotherProject(projectForModules As VBProject, projectName As String, confName As String, Optional cm As vtkConfigurationManager = Nothing)
    Dim rootPath As String, cn As Integer, filePath As String, i As Integer
    
   On Error GoTo vtkImportModulesInAnotherProject_Error

    If cm Is Nothing Then Set cm = vtkConfigurationManagerForProject(projectName)
    cn = cm.getConfigurationNumber(configuration:=confName)
    rootPath = cm.rootPath
    
    For i = 1 To cm.moduleCount
        filePath = cm.getModulePathWithNumber(numModule:=i, numConfiguration:=cn)
        If Not filePath Like "" Then vtkImportOneModule project:=projectForModules, moduleName:=cm.module(i), filePath:=rootPath &amp; "\" &amp; filePath
    Next i
    
   On Error GoTo 0
   Exit Sub

vtkImportModulesInAnotherProject_Error:
    Err.Raise VTK_UNEXPECTED_ERROR, "vtkImportModulesInAnotherProject_Error", "Unexpected error when importing modules into " &amp; projectForModules.name &amp; " : " &amp; Err.Description
End Sub</code_list>
      <call>projectName</call>
      <call>vtkImportOneModule</call>
      <call>modules</call>
    </child>
    <child>
      <type>sub</type>
      <name>vtkRecreateConfiguration</name>
      <code_list>Public Sub vtkRecreateConfiguration(projectName As String, configurationName As String, Optional confManager As vtkConfigurationManager = Nothing)
    Dim cm As vtkConfigurationManager
    Dim rootPath As String
    Dim wbPath As String, templatePath As String
    Dim Wb As Workbook
    Dim tmpWb As Workbook
    Dim fso As New FileSystemObject

    On Error GoTo vtkRecreateConfiguration_Error
    Application.EnableEvents = False
    
    If confManager Is Nothing Then
        Set cm = vtkConfigurationManagerForProject(projectName)
       Else
        Set cm = confManager
    End If
    rootPath = cm.rootPath
    
    wbPath = cm.configurations(configurationName).path
    
    For Each tmpWb In Workbooks
        If tmpWb.name Like fso.GetFileName(wbPath) Then Err.Raise VTK_WORKBOOK_ALREADY_OPEN
    Next
    
    Dim mo As vtkModule
    Dim conf As vtkConfiguration
    Set conf = cm.configurations(configurationName)
    For Each mo In conf.modules
        If fso.FileExists(rootPath &amp; "\" &amp; mo.getPathForConfiguration(configurationName)) = False Then
            Err.Raise VTK_NO_SOURCE_FILES
        End If
    Next
    
    templatePath = conf.template
    If templatePath = "" Then
        Set Wb = vtkCreateExcelWorkbook()   ' If there is no template, a new workbook is created
       Else
        templatePath = rootPath &amp; "\" &amp; templatePath
        If Not fso.FileExists(templatePath) Then
            Err.Raise VTK_TEMPLATE_NOT_FOUND
        End If
        Set Wb = Workbooks.Open(fileName:=templatePath, ReadOnly:=True) ' If there is a template, it's open as ReadOnly
    End If
    
    Wb.VBProject.name = conf.projectName
    
    Wb.BuiltinDocumentProperties("Title").Value = conf.projectName
    Wb.BuiltinDocumentProperties("Comments").Value = conf.comment
    
    vtkImportModulesInAnotherProject projectForModules:=Wb.VBProject, projectName:=projectName, confName:=configurationName, cm:=cm
    
    conf.addReferencesToWorkbook Wb
    
    If conf.isDEV Then
        Dim cmE As New vtkConfigurationManagerExcel
        cmE.duplicate Wb, cm
    End If
    
    If conf.password &lt;&gt; "" Then vtkProtectProject project:=Wb.VBProject, password:=conf.password
    
    Dim tmpPath As String
    tmpPath = fso.BuildPath(rootPath &amp; "\" &amp; fso.GetParentFolderName(wbPath), _
              vtkStripFilePathOrNameOfExtension(fso.GetFileName(wbPath)) &amp; _
              CStr(Round((99999 - 10000 + 1) * Rnd(), 0)) + 10000 &amp; _
              "." &amp; fso.GetExtensionName(wbPath))
    
    vtkCreateFolderPath tmpPath
    
    Wb.IsAddin = vtkDefaultIsAddIn(wbPath)
    Wb.SaveAs fileName:=tmpPath, FileFormat:=vtkDefaultFileFormat(wbPath)
    Wb.Close saveChanges:=False
    Application.EnableEvents = True
    
    Dim fullWbpath As String
    fullWbpath = rootPath &amp; "\" &amp; wbPath
    If fso.FileExists(fullWbpath) Then fso.DeleteFile (fullWbpath)
    
    fso.GetFile(tmpPath).name = fso.GetFileName(rootPath &amp; "\" &amp; wbPath)
    
    On Error GoTo 0
    Exit Sub

vtkRecreateConfiguration_Error:

    If Not Wb Is Nothing Then Wb.Close saveChanges:=False

    Err.Source = "vtkRecreateConfiguration of module vtkImportExportUtilities"
    
    Select Case Err.Number
        Case VTK_WORKBOOK_ALREADY_OPEN
            Err.Number = VTK_WORKBOOK_ALREADY_OPEN
            Err.Description = "The configuration you're trying to create (" &amp; configurationName &amp; ") corresponds to an open workbook. " &amp; _
                              "Please close it before recreating the configuration."
        Case VTK_TEMPLATE_NOT_FOUND
            Err.Number = VTK_TEMPLATE_NOT_FOUND
            Err.Description = "The configuration you're trying to create (" &amp; configurationName &amp; ") needs an Excel template file (" &amp; templatePath &amp; "). " &amp; _
                              "This template file is unreachable."
        Case VTK_NO_SOURCE_FILES
            Err.Number = VTK_NO_SOURCE_FILES
            Err.Description = "The configuration you're trying to create (" &amp; configurationName &amp; ") is missing one or several source files." &amp; _
                              "Please export the modules in their relevant path before recreating the configuration."
        Case VTK_WRONG_FILE_PATH
            Err.Number = VTK_WRONG_FILE_PATH
            Err.Description = "The configuration you're trying to create (" &amp; configurationName &amp; ") has a invalid path." &amp; _
                              "Please check if the folder structure it needs is not more than one-level deep."
        Case Else
            Err.Number = VTK_UNEXPECTED_ERROR
    End Select

    Err.Raise Err.Number, Err.Source, Err.Description
    
    Exit Sub
    
End Sub</code_list>
      <call>vtkImportModulesInAnotherProject</call>
      <call>vtkProtectProject</call>
      <call>vtkCreateFolderPath</call>
      <call>module</call>
      <call>configuration</call>
      <call>configuration</call>
      <call>configuration</call>
      <call>modules</call>
      <call>configuration</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkExportConfiguration</name>
      <code_list>Public Function vtkExportConfiguration(projectWithModules As VBProject, projectName As String, confName As String, _
        Optional onlyModified As Boolean = False) As Integer
    
    Dim cm As vtkConfigurationManager, rootPath As String
    Dim mo As vtkModule
    Dim exportedModulesCount As Integer: exportedModulesCount = 0
    Dim fso As New FileSystemObject
    
    On Error GoTo vtkExportConfiguration_Error

    Set cm = vtkConfigurationManagerForProject(projectName)
    
    For Each mo In cm.configurations(confName).modules
        
        Dim modulePath As String
        modulePath = cm.rootPath &amp; "\" &amp; mo.path
                   
        If onlyModified And fso.FileExists(modulePath) Then
            If mo.VBAModule.Saved = False Then
                vtkExportOneModule projectWithModules, mo.name, modulePath
                exportedModulesCount = exportedModulesCount + 1
            End If
        Else
            vtkExportOneModule projectWithModules, mo.name, modulePath
            exportedModulesCount = exportedModulesCount + 1
        End If
        
    Next
    
    On Error GoTo 0
    vtkExportConfiguration = exportedModulesCount
    Exit Function

vtkExportConfiguration_Error:
    Err.Raise Err.Number, "procedure vtkExportConfiguration of Module vtkImportExportUtilities", Err.Description
    Resume Next

End Function</code_list>
      <call>projectName</call>
      <call>vtkExportOneModule</call>
      <call>vtkExportOneModule</call>
      <call>vtkExportConfiguration</call>
      <call>vtkExportConfiguration</call>
    </child>
  </child>
  <child>
    <type>file</type>
    <name>vtkMainFunctions.bas</name>
    <child>
      <type>function</type>
      <name>vtkCreateProject</name>
      <code_list>Public Function vtkCreateProject(path As String, name As String, Optional displayError As Boolean = True) As Long
    
  On Error GoTo vtkCreateProject_Error

    Dim project As vtkProject
    Set project = vtkProjectForName(projectName:=name)
    Dim rootPath As String
    rootPath = path &amp; "\" &amp; project.projectName
    
    Dim internalError As Long
    internalError = vtkCreateTreeFolder(rootPath)
    If internalError &lt;&gt; VTK_OK Then GoTo vtkCreateProject_ErrorTreeFolder
     
    Workbooks.Add.SaveAs (rootPath &amp; "\" &amp; project.projectDEVStandardRelativePath), FileFormat:=xlOpenXMLWorkbookMacroEnabled
    Workbooks(project.workbookDEVName).VBProject.name = project.projectDEVName
    VtkActivateReferences Wb:=Workbooks(project.workbookDEVName), projectName:=project.projectName, confName:=project.projectDEVName
    vtkInitializeVbaUnitNamesAndPathes project:=project.projectName
    Workbooks(project.workbookDEVName).Save
    
    
    Workbooks.Add.SaveAs (rootPath &amp; "\" &amp; project.projectStandardRelativePath), FileFormat:=(52) '52 is xlsm format
    Workbooks(project.workbookName).VBProject.name = project.projectName
    VtkActivateReferences Wb:=Workbooks(project.workbookName), projectName:=project.projectName, confName:=project.projectName
    Workbooks(project.workbookName).VBProject.VBComponents.Add ComponentType:=vbext_ct_StdModule
    Workbooks(project.workbookName).Close saveChanges:=True
    
    Dim Wb As Workbook
    Set Wb = Workbooks(project.workbookDEVName)
    Wb.Activate
    vtkExportModulesFromAnotherProject projectWithModules:=ThisWorkbook.VBProject, projectName:=project.projectName, confName:=project.projectDEVName
    vtkImportModulesInAnotherProject projectForModules:=Wb.VBProject, projectName:=project.projectName, confName:=project.projectDEVName
    
    vtkAddBeforeSaveHandlerInDEVWorkbook Wb:=wb, projectName:=project.projectName, confName:=project.projectDEVName
    Dim module As VBComponent, nm As Integer, nc As Integer, moduleName As String, cm As vtkConfigurationManager
    Set cm = vtkConfigurationManagerForProject(project.projectName)
    nc = cm.getConfigurationNumber(project.projectDEVName)
    moduleName = "thisWorkbook"
    Set module = Wb.VBProject.VBComponents(moduleName)
    nm = cm.addModule(moduleName)
    cm.setModulePathWithNumber path:="Source\ConfTest\" &amp; module.name &amp; ".cls", numModule:=nm, numConfiguration:=nc
    Wb.Save
        
    On Error GoTo vtkCreateProject_ErrorGit
    vtkInitializeGit rootPath

    On Error GoTo 0
    vtkCreateProject = VTK_OK
    Exit Function

vtkCreateProject_ErrorTreeFolder:
    vtkCreateProject = internalError
    If displayError Then MsgBox "Error " &amp; Err.Number &amp; " (" &amp; Err.Description &amp; ") in procedure vtkCreateProject of Module MainFunctions"
    Exit Function
vtkCreateProject_Error:
    vtkCreateProject = Err.Number
    If displayError Then MsgBox "Error " &amp; Err.Number &amp; " (" &amp; Err.Description &amp; ") in procedure vtkCreateProject of Module MainFunctions"
vtkCreateProject_ErrorGit:
    vtkCreateProject = Err.Number
    If displayError Then MsgBox "Error " &amp; Err.Number &amp; " (" &amp; Err.Description &amp; ") in procedure vtkCreateProject of Module MainFunctions"

End Function</code_list>
      <call>VtkActivateReferences</call>
      <call>vtkInitializeVbaUnitNamesAndPathes</call>
      <call>VtkActivateReferences</call>
      <call>vtkExportModulesFromAnotherProject</call>
      <call>vtkImportModulesInAnotherProject</call>
      <call>vtkAddBeforeSaveHandlerInDEVWorkbook</call>
      <call>module</call>
      <call>module</call>
      <call>vtkInitializeGit</call>
      <call>vtkCreateProject</call>
      <call>vtkCreateProject</call>
      <call>vtkCreateProject</call>
      <call>vtkCreateProject</call>
      <call>vtkCreateProject</call>
      <call>vtkCreateProject</call>
      <call>vtkCreateProject</call>
    </child>
    <child>
      <type>sub</type>
      <name>vtkRecreateConfigurations</name>
      <code_list>Public Sub vtkRecreateConfigurations(confManager As vtkConfigurationManager, confNames As Collection)
    Dim c As Variant, confName As String
    For Each c In confNames
        confName = c
        vtkRecreateConfiguration confManager.projectName, confName, confManager
    Next c
End Sub</code_list>
      <call>vtkRecreateConfiguration</call>
    </child>
  </child>
  <child>
    <type>file</type>
    <name>vtkModule.cls</name>
    <child>
      <type>sub</type>
      <name>init</name>
      <code_list>Public Sub init(confManager As vtkConfigurationManager, modNumber As Integer, Optional confNumber As Integer = 0)
    Set m_parent = confManager
    m_number = modNumber
    m_confNumber = confNumber
End Sub</code_list>
    </child>
    <child>
      <type>function</type>
      <name>getPathForConfiguration</name>
      <code_list>Public Function getPathForConfiguration(confName As String) As String
    Dim cn As Integer
    cn = parent.getConfigurationNumber(confName)
    getPathForConfiguration = ""
    If cn = 0 Then Err.Raise VTK_INEXISTANT_CONFIGURATION, "vtkModule getPathForConfiguration", "Configuration """ &amp; confName &amp; """ in project """ &amp; parent.projectName &amp; """"
    getPathForConfiguration = parent.getModulePathWithNumber(Number, cn)
End Function</code_list>
      <call>getPathForConfiguration</call>
      <call>getPathForConfiguration</call>
    </child>
    <child>
      <type>function</type>
      <name>setPathForConfiguration</name>
      <code_list>Public Function setPathForConfiguration(confName As String, newPath As String) As String
    Dim cn As Integer
    cn = parent.getConfigurationNumber(confName)
    If cn = 0 Then Err.Raise VTK_INEXISTANT_CONFIGURATION, "vtkModule getPathForConfiguration", "Configuration """ &amp; confName &amp; """ in project """ &amp; parent.projectName &amp; """"
    parent.setModulePathWithNumber path:=newPath, numModule:=Number, numConfiguration:=cn
End Function</code_list>
    </child>
  </child>
  <child>
    <type>file</type>
    <name>VtKPathUtilities.bas</name>
    <child>
      <type>function</type>
      <name>vtkPathOfCurrentProject</name>
      <code_list>Public Function vtkPathOfCurrentProject(Optional Wb As Workbook) As String
    Dim fso As New FileSystemObject
    If Wb Is Nothing Then
        vtkPathOfCurrentProject = fso.GetParentFolderName(ThisWorkbook.path)
       Else
        vtkPathOfCurrentProject = fso.GetParentFolderName(Wb.path)
    End If
End Function</code_list>
      <call>vtkPathOfCurrentProject</call>
      <call>vtkPathOfCurrentProject</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkPathToTestFolder</name>
      <code_list>Public Function vtkPathToTestFolder(Optional Wb As Workbook) As String '\VBAToolKit\Tests
    Dim path As String
    path = vtkPathOfCurrentProject(Wb) &amp; "\Tests"
    If Dir(path, vbDirectory) = vbNullString Then MkDir (path)
    vtkPathToTestFolder = path
End Function</code_list>
      <call>vtkPathToTestFolder</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkPathToSourceFolder</name>
      <code_list>Public Function vtkPathToSourceFolder(Optional Wb As Workbook) As String 'VBAToolKit\Source
   vtkPathToSourceFolder = vtkPathOfCurrentProject(Wb) &amp; "\Source"
End Function</code_list>
      <call>vtkPathToSourceFolder</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkPathToTemplateFolder</name>
      <code_list>Public Function vtkPathToTemplateFolder(Optional Wb As Workbook) As String 'VBAToolKit\Source
   vtkPathToTemplateFolder = vtkPathOfCurrentProject(Wb) &amp; "\Templates"
End Function</code_list>
      <call>vtkPathToTemplateFolder</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkGetFileExtension</name>
      <code_list>Public Function vtkGetFileExtension(filePath As String) As String
    Dim dotPosition As Integer
    dotPosition = InStrRev(filePath, ".")
    If dotPosition = 0 Then
        vtkGetFileExtension = ""
       Else
        vtkGetFileExtension = Mid(filePath, dotPosition + 1)
    End If
End Function</code_list>
      <call>vtkGetFileExtension</call>
      <call>vtkGetFileExtension</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkStripFilePathOrNameOfExtension</name>
      <code_list>Public Function vtkStripFilePathOrNameOfExtension(fileNameOrPath As String) As String

    On Error GoTo vtkStripFilePathOrNameOfExtension_Error

    Dim fso As New FileSystemObject
    Dim substring As String
    substring = fso.GetFileName(fileNameOrPath)
    
    Dim dotPosition As Integer
    dotPosition = InStrRev(substring, ".")
    If dotPosition &lt;&gt; 0 Then
        substring = Left(substring, dotPosition - 1)
    End If
    
    vtkStripFilePathOrNameOfExtension = substring

    On Error GoTo 0
    Exit Function

vtkStripFilePathOrNameOfExtension_Error:
    Err.Raise VTK_UNEXPECTED_ERROR, "vtkStripFileNameOfExtension", Err.Description
    Resume Next

End Function</code_list>
      <call>vtkStripFilePathOrNameOfExtension</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkConvertGenericExcelPath</name>
      <code_list>Public Function vtkConvertGenericExcelPath(genericFilePath As String) As String
    Dim extension As String, template As String, dotPosition As Integer, pathWithoutExt As String
    
    dotPosition = InStrRev(genericFilePath, ".")
    If dotPosition &lt;&gt; 0 Then
        extension = Mid(genericFilePath, dotPosition + 1)
        pathWithoutExt = Left(genericFilePath, dotPosition - 1)
        If Left$(extension, 1) = "&lt;" And Right$(extension, 1) = "&gt;" Then template = Mid(extension, 2, Len(extension) - 2)
        If template = "" Then
            vtkConvertGenericExcelPath = genericFilePath
           ElseIf template = "xla" Then
            vtkConvertGenericExcelPath = pathWithoutExt &amp; vtkDefaultExcelAddInExtension()
           ElseIf template = "xls" Then
            vtkConvertGenericExcelPath = pathWithoutExt &amp; vtkDefaultExcelExtension()
           Else
            Err.Raise VTK_WRONG_GENERIC_EXTENSION, "vtkConvertGenericExcelPath", "Unexpected extension template: " &amp; extension
        End If
       Else
        vtkConvertGenericExcelPath = genericFilePath
    End If
End Function</code_list>
      <call>vtkConvertGenericExcelPath</call>
      <call>vtkConvertGenericExcelPath</call>
      <call>vtkConvertGenericExcelPath</call>
      <call>vtkConvertGenericExcelPath</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkStripPathOrNameOfVtkExtension</name>
      <code_list>Public Function vtkStripPathOrNameOfVtkExtension(projectNameOrPath As String, extension As String) As String

    On Error GoTo vtkStripPathOrNameOfVtkExtension_Error

    Dim substring As String
    substring = vtkStripFilePathOrNameOfExtension(projectNameOrPath)
    
    Dim underscorePosition As Integer
    underscorePosition = InStrRev(substring, "_")
    If Mid(substring, underscorePosition + 1) Like extension Then
        substring = Left(substring, underscorePosition - 1)
    End If
    
    vtkStripPathOrNameOfVtkExtension = substring

    On Error GoTo 0
    Exit Function

vtkStripPathOrNameOfVtkExtension_Error:
    Err.Raise VTK_UNEXPECTED_ERROR, "vtkStripPathOrNameOfVtkExtension", Err.Description
    Resume Next

End Function</code_list>
      <call>vtkStripPathOrNameOfVtkExtension</call>
    </child>
    <child>
      <type>function</type>
      <name>vtkCreateTreeFolder</name>
      <code_list>Public Function vtkCreateTreeFolder(rootPath As String)
   On Error GoTo vtkCreateTreeFolder_Error
    
    MkDir rootPath
    MkDir rootPath &amp; "\" &amp; "Delivery"
    MkDir rootPath &amp; "\" &amp; "Project"
    MkDir rootPath &amp; "\" &amp; "Tests"
    MkDir rootPath &amp; "\" &amp; "GitLog"
    MkDir rootPath &amp; "\" &amp; "Templates"
    MkDir rootPath &amp; "\" &amp; "Source"
    MkDir rootPath &amp; "\" &amp; "Source" &amp; "\" &amp; "ConfProd"
    MkDir rootPath &amp; "\" &amp; "Source" &amp; "\" &amp; "ConfTest"
    MkDir rootPath &amp; "\" &amp; "Source" &amp; "\" &amp; "VbaUnit"

   On Error GoTo 0
   vtkCreateTreeFolder = VTK_OK
   Exit Function
   
vtkCreateTreeFolder_Error:
    vtkCreateTreeFolder = Err.Number
    Err.Raise Err.Number, "Module vtkFileSystemUtilities : Function vtkCreateTreeFolder", Err.Description
End Function</code_list>
      <call>vtkCreateTreeFolder</call>
      <call>vtkCreateTreeFolder</call>
    </child>
    <child>
      <type>sub</type>
      <name>vtkDeleteTreeFolder</name>
      <code_list>Public Sub vtkDeleteTreeFolder(rootPath As String)
    Dir (rootPath)                  ' Make sure to be out of the folder to clean it without Err
    On Error Resume Next
    Kill rootPath &amp; "\Source\ConfProd\*"
    RmDir rootPath &amp; "\Source\ConfProd"
    Kill rootPath &amp; "\Source\ConfTest\*"
    RmDir rootPath &amp; "\Source\ConfTest"
    Kill rootPath &amp; "\Source\VbaUnit\*"
    RmDir rootPath &amp; "\Source\VbaUnit"
    Kill rootPath &amp; "\Templates\*"
    RmDir rootPath &amp; "\Templates"
    Kill rootPath &amp; "\GitLog\*"
    RmDir rootPath &amp; "\GitLog"
    Kill rootPath &amp; "\Tests\*"
    RmDir rootPath &amp; "\Tests"
    Kill rootPath &amp; "\Source\*"
    RmDir rootPath &amp; "\Source"
    Kill rootPath &amp; "\Delivery\*"
    RmDir rootPath &amp; "\Delivery"
    Kill rootPath &amp; "\Project\*"
    RmDir rootPath &amp; "\Project"
    Kill rootPath &amp; "\*"
    RmDir rootPath
End Sub</code_list>
    </child>
    <child>
      <type>function</type>
      <name>vtkIsPathAbsolute</name>
      <code_list>Public Function vtkIsPathAbsolute(path As String) As Boolean
    vtkIsPathAbsolute = (UCase(Left(path, 3)) Like "[A-Z]:\") Or (Left(path, 1) = "\")
End Function</code_list>
      <call>vtkIsPathAbsolute</call>
    </child>
  </child>
  <child>
    <type>file</type>
    <name>vtkProject.cls</name>
    <child>
      <type>function</type>
      <name>initialized</name>
      <code_list>Private Function initialized() As Boolean
    initialized = (m_projectName &lt;&gt; "")
End Function</code_list>
      <call>initialized</call>
    </child>
  </child>
  <child>
    <type>file</type>
    <name>vtkProjectCreationUtilities.bas</name>
    <child>
      <type>function</type>
      <name>vtkInitializeVbaUnitNamesAndPathes</name>
      <code_list>Public Function vtkInitializeVbaUnitNamesAndPathes(project As String) As Boolean
    Dim i As Integer, cm As vtkConfigurationManager, ret As Boolean, nm As Integer, nc As Integer, ext As String
    Dim moduleName As String, module As VBComponent
    
    Set cm = vtkConfigurationManagerForProject(project)
    nc = cm.getConfigurationNumber(vtkProjectForName(project).projectDEVName)
    ret = (nc &gt; 0)
    
    For i = 1 To vtkVBAUnitModulesList.Count
        moduleName = vtkVBAUnitModulesList.Item(i)
        Set module = ThisWorkbook.VBProject.VBComponents(moduleName)
        
        nm = cm.addModule(moduleName)
        ret = ret And (nm &gt; 0)
        
        cm.setModulePathWithNumber path:=vtkStandardPathForModule(module), numModule:=nm, numConfiguration:=nc
        
    Next i
    
    vtkInitializeVbaUnitNamesAndPathes = ret
End Function</code_list>
      <call>module</call>
      <call>module</call>
      <call>vtkInitializeVbaUnitNamesAndPathes</call>
    </child>
    <child>
      <type>sub</type>
      <name>VtkActivateReferences</name>
      <code_list>Public Sub VtkActivateReferences(Wb As Workbook, projectName As String, confName As String)
    Dim ref As vtkReference
    If VtkWorkbookIsOpen(Wb.name) Then
        For Each ref In vtkConfigurationManagerForProject(projectName).getConfigurationReferencesWithNumber(vtkConfigurationManagerForProject(projectName).getConfigurationNumber(confName))
            ref.addToWorkbook Wb
        Next
    End If
End Sub</code_list>
      <call>projectName</call>
    </child>
    <child>
      <type>sub</type>
      <name>vtkDisplayActivatedReferencesGuid</name>
      <code_list>Public Sub vtkDisplayActivatedReferencesGuid()
    Dim r As vtkReference
    For Each r In vtkReferencesInWorkbook(ActiveWorkbook)
        Debug.Print r.name, r.GUID, r.fullPath
    Next
End Sub</code_list>
    </child>
    <child>
      <type>sub</type>
      <name>vtkAddBeforeSaveHandlerInDEVWorkbook</name>
      <code_list>Public Sub vtkAddBeforeSaveHandlerInDEVWorkbook(Wb As Workbook, projectName As String, confName As String)
    
    On Error GoTo vtkAddBeforeSaveHandlerInDEVWorkbook_Error
    
    Dim c As Collection
    Set c = vtkConfigurationManagerForProject(projectName).references
    
    Dim wbVTKName As String
    wbVTKName = ThisWorkbook.VBProject.name ' Get the name of the Running project (VBAToolKit)
    
    Dim handlerString As String
    handlerString = _
    
    With Wb.VBProject.VBComponents("ThisWorkbook").CodeModule
        .InsertLines .CountOfLines + 1, handlerString
    End With
    
    On Error GoTo 0
    Exit Sub

vtkAddBeforeSaveHandlerInDEVWorkbook_Error:
    Err.Raise VTK_UNEXPECTED_ERROR, "vtkAddBeforeSaveHandlerInDEVWorkBook", Err.Description
    Resume Next
End Sub</code_list>
      <call>projectName</call>
      <child>
        <type>sub</type>
        <name>Workbook_BeforeSave</name>
        <code_list>    "Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)" &amp; vbNewLine &amp; _
    "   On error goto M_Error" &amp; vbNewLine &amp; _
    "   " &amp; wbVTKName &amp; ".vtkExportConfiguration projectWithModules:=ThisWorkbook.VBProject, projectName:=" &amp; """" &amp; projectName &amp; """" &amp; _
                                                                    " , confName:=" &amp; """" &amp; confName &amp; """" &amp; _
                                                                    " , onlyModified:=True" &amp; _
                                                                    vbNewLine &amp; _
                                                                    vbNewLine &amp; _
    "   " &amp; wbVTKName &amp; ".vtkExportConfigurationsAsXML projectName:=""" &amp; projectName &amp; """, filePath:=" &amp; _
    wbVTKName &amp; ".vtkPathOfCurrentProject(ThisWorkbook) &amp; ""\"" &amp; " &amp; wbVTKName &amp; ".vtkProjectForName(""" &amp; projectName &amp; """).XMLConfigurationStandardRelativePath" &amp; vbNewLine &amp; _
    "M_Error:" &amp; vbNewLine &amp; _
    "End Sub" &amp; vbNewLine</code_list>
        <call>projectName</call>
        <call>projectName</call>
        <call>projectName</call>
      </child>
    </child>
  </child>
  <child>
    <type>file</type>
    <name>vtkProjects.bas</name>
    <child>
      <type>function</type>
      <name>vtkProjectForName</name>
      <code_list>Public Function vtkProjectForName(projectName As String) As vtkProject
    If projects Is Nothing Then
        Set projects = New Collection
    End If
    Dim cm As vtkProject
    On Error Resume Next
    Set cm = projects(projectName)
    If Err &lt;&gt; 0 Then
        Set cm = New vtkProject
        cm.projectName = projectName
        projects.Add Item:=cm, Key:=projectName
        End If
    On Error GoTo 0
    Set vtkProjectForName = cm
End Function</code_list>
      <call>vtkProjectForName</call>
    </child>
    <child>
      <type>sub</type>
      <name>vtkResetProjects</name>
      <code_list>Public Sub vtkResetProjects()
    Set projects = Nothing
End Sub</code_list>
    </child>
    <child>
      <type>function</type>
      <name>getCurrentProjectName</name>
      <code_list>Public Function getCurrentProjectName() As String
    getCurrentProjectName = vtkStripPathOrNameOfVtkExtension(ActiveWorkbook.FullName, "DEV")
End Function</code_list>
      <call>getCurrentProjectName</call>
    </child>
  </child>
  <child>
    <type>file</type>
    <name>vtkRecreateConfigurationForm.frm</name>
    <child>
      <type>sub</type>
      <name>BrowseButton_Click</name>
      <code_list>Private Sub BrowseButton_Click()
    With Application.FileDialog(msoFileDialogFilePicker)
        .AllowMultiSelect = False
        .Show
        If .SelectedItems.Count &gt; 0 Then
            XMLFileTextBox.Text = .SelectedItems(1)
        End If
    End With
End Sub</code_list>
    </child>
    <child>
      <type>sub</type>
      <name>UserForm_Initialize</name>
      <code_list>Private Sub UserForm_Initialize()
    
    XMLFileTextBox.Text = m_XMLFilePath
    validateXMLFileTextBox
    
    enableReCreateButton

End Sub</code_list>
    </child>
    <child>
      <type>sub</type>
      <name>ConfigurationListBox_AfterUpdate</name>
      <code_list>Private Sub ConfigurationListBox_AfterUpdate()
    If m_ConfSelected Then ConfigurationListBox.BackColor = GREEN Else ConfigurationListBox.BackColor = PINK
End Sub</code_list>
    </child>
    <child>
      <type>sub</type>
      <name>ConfigurationListBox_Change</name>
      <code_list>Private Sub ConfigurationListBox_Change()
    Dim i As Integer
    m_ConfSelected = False
    For i = 0 To ConfigurationListBox.ListCount - 1
        m_ConfSelected = m_ConfSelected Or ConfigurationListBox.Selected(i)
    Next i
    enableReCreateButton
End Sub</code_list>
    </child>
    <child>
      <type>sub</type>
      <name>CancelButton_Click</name>
      <code_list>Private Sub CancelButton_Click()
    vtkRecreateConfigurationForm.Hide
End Sub</code_list>
    </child>
    <child>
      <type>sub</type>
      <name>CreateConfigurationButton_Click</name>
      <code_list>Private Sub CreateConfigurationButton_Click()
    Me.Hide
    vtkWaitForm.Show vbModeless
    Dim confNames As New Collection, i As Integer
    For i = 0 To ConfigurationListBox.ListCount - 1
        If ConfigurationListBox.Selected(i) Then confNames.Add ConfigurationListBox.List(i)
    Next i
    vtkRecreateConfigurations m_confManager, confNames
    vtkWaitForm.Hide
End Sub</code_list>
      <call>vtkRecreateConfigurations</call>
    </child>
    <child>
      <type>sub</type>
      <name>validateXMLFileTextBox</name>
      <code_list>Private Sub validateXMLFileTextBox()
    Dim cmX As New vtkConfigurationManagerXML, conf As vtkConfiguration
   On Error Resume Next
    cmX.init XMLFileTextBox.Text
    m_XMLFileOK = (Err.Number = 0)
   On Error GoTo 0
    ConfigurationListBox.Clear
    m_ConfSelected = False
    If m_XMLFileOK Then
        XMLFileTextBox.BackColor = GREEN
        m_XMLFilePath = XMLFileTextBox.Text
        Set m_confManager = cmX
        For Each conf In m_confManager.configurations
            ConfigurationListBox.AddItem conf.name
        Next conf
       Else
        XMLFileTextBox.BackColor = PINK
        m_XMLFilePath = ""
        Set m_confManager = Nothing
    End If
    enableReCreateButton
End Sub</code_list>
    </child>
    <child>
      <type>sub</type>
      <name>enableReCreateButton</name>
      <code_list>Private Sub enableReCreateButton()
    CreateConfigurationButton.Enabled = m_XMLFileOK And m_ConfSelected
End Sub</code_list>
    </child>
    <child>
      <type>sub</type>
      <name>XMLFileTextBox_Change</name>
      <code_list>Private Sub XMLFileTextBox_Change()
    validateXMLFileTextBox
End Sub</code_list>
    </child>
  </child>
  <child>
    <type>file</type>
    <name>vtkRecreateConfigurationForm.frx</name>
  </child>
  <child>
    <type>file</type>
    <name>vtkReference.cls</name>
    <child>
      <type>function</type>
      <name>convertRelativePathToFullPath</name>
      <code_list>Private Function convertRelativePathToFullPath(relPath As String) As String
    If vtkIsPathAbsolute(relPath) Then
        convertRelativePathToFullPath = relPath
       Else
        convertRelativePathToFullPath = Environ("AppData") &amp; "\" &amp; relPath
    End If
End Function</code_list>
      <call>convertRelativePathToFullPath</call>
      <call>convertRelativePathToFullPath</call>
    </child>
    <child>
      <type>function</type>
      <name>convertFullPathToRelativePath</name>
      <code_list>Private Function convertFullPathToRelativePath(fullPath As String) As String
    convertFullPathToRelativePath = Replace(fullPath, Environ("AppData") &amp; "\", "")
End Function</code_list>
      <call>convertFullPathToRelativePath</call>
    </child>
    <child>
      <type>sub</type>
      <name>initWithVBAReference</name>
      <code_list>Public Sub initWithVBAReference(ref As Reference)
    Me.name = ref.name
    Me.GUID = ref.GUID
    Me.fullPath = ref.fullPath
End Sub</code_list>
    </child>
    <child>
      <type>sub</type>
      <name>addToWorkbook</name>
      <code_list>Public Sub addToWorkbook(Wb As Workbook)
    On Error Resume Next
    If Me.GUID = "" Then
        Wb.VBProject.references.AddFromFile Me.fullPath
       Else
        Wb.VBProject.references.AddFromGuid Me.GUID, 0, 0
    End If
    On Error GoTo 0
End Sub</code_list>
    </child>
  </child>
  <child>
    <type>file</type>
    <name>vtkReferenceManager.cls</name>
    <child>
      <type>sub</type>
      <name>Class_Terminate</name>
      <code_list>Private Sub Class_Terminate()
    Set m_referenceSheet = Nothing
    Set m_workbook = Nothing
End Sub</code_list>
    </child>
    <child>
      <type>sub</type>
      <name>init</name>
      <code_list>Public Sub init(Wb As Workbook, confCount As Integer, nbTitleColumnsInConfSheet As Integer, Optional devConf As Integer = -1, Optional references As Collection = Nothing)
    If Not m_workbook Is Wb Then
        Set m_workbook = Wb
        m_nbTitleColumnsInConfSheet = nbTitleColumnsInConfSheet
        If Not m_workbook Is Nothing Then
            setReferenceSheet confCount, devConf, references    ' Reset the reference sheet when the attached workbook is changed
           Else
            Set m_referenceSheet = Nothing
        End If
    End If
End Sub</code_list>
      <call>references</call>
      <call>references</call>
      <call>setReferenceSheet</call>
    </child>
    <child>
      <type>sub</type>
      <name>setReferenceSheet</name>
      <code_list>Private Sub setReferenceSheet(confCount As Integer, devConf As Integer, references As Collection)
    On Error Resume Next
    Set m_referenceSheet = m_workbook.Worksheets(sheetName)
    On Error GoTo 0
    If m_referenceSheet Is Nothing Then        ' If the Configuration doesn't exist, create one
        Set m_referenceSheet = m_workbook.Worksheets.Add(Type:=xlWorksheet)
        m_referenceSheet.name = sheetName
        initializeReferenceSheet confCount, devConf, references
        End If
    If m_referenceSheet.Range("A1") &lt;&gt; currentVersion Then
        End If
    alignConfigurationCount confCount
    addReferences
End Sub</code_list>
      <call>references</call>
      <call>initializeReferenceSheet</call>
      <call>alignConfigurationCount</call>
    </child>
    <child>
      <type>function</type>
      <name>selfReference</name>
      <code_list>Private Function selfReference() As vtkReference
    Dim ref As New vtkReference
    ref.name = ThisWorkbook.VBProject.name
    ref.fullPath = ThisWorkbook.fullName
    Set selfReference = ref
End Function</code_list>
      <call>selfReference</call>
    </child>
    <child>
      <type>sub</type>
      <name>initializeReferenceSheet</name>
      <code_list>Private Sub initializeReferenceSheet(confCount As Integer, devConf As Integer, references As Collection)
    Dim ref As vtkReference, i As Integer, j As Integer
    m_referenceSheet.Range("A1") = currentVersion
    m_referenceSheet.Range("A1").Font.Size = 8
    m_referenceSheet.Range("B1") = ""
    m_referenceSheet.Range("C1") = "-"      ' addConfiguration works with the usedRange property
    m_referenceSheet.Columns("A:C").ColumnWidth = 22
    
    If references Is Nothing Then
        m_referenceSheet.Range("A2") = "VBA"
        m_referenceSheet.Range("B2") = "{000204EF-0000-0000-C000-000000000046}"
        m_referenceSheet.Range("A3") = "Excel"
        m_referenceSheet.Range("B3") = "{00020813-0000-0000-C000-000000000046}"
        m_referenceSheet.Range("A4") = "stdole"
        m_referenceSheet.Range("B4") = "{00020430-0000-0000-C000-000000000046}"
        m_referenceSheet.Range("A5") = "Office"
        m_referenceSheet.Range("B5") = "{2DF8D04C-5BFA-101B-BDE5-00AA0044DE52}"
        m_referenceSheet.Range("A6") = "MSForms"
        m_referenceSheet.Range("B6") = "{0D452EE1-E08F-101A-852E-02608C4D0BB4}"
        m_referenceSheet.Range("A7") = "Scripting"
        m_referenceSheet.Range("B7") = "{420B2830-E718-11CF-893D-00A0C9054228}"
        m_referenceSheet.Range("A8") = "VBIDE"
        m_referenceSheet.Range("B8") = "{0002E157-0000-0000-C000-000000000046}"
        m_referenceSheet.Range("A9") = "Shell32"
        m_referenceSheet.Range("B9") = "{50A7E9B0-70EF-11D1-B75A-00A0C90564FE}"
        m_referenceSheet.Range("A10") = "MSXML2"
        m_referenceSheet.Range("B10") = "{F5078F18-C551-11D3-89B9-0000F81FE221}"
        m_referenceSheet.Range("A11") = "ADODB"
        m_referenceSheet.Range("B11") = "{00000206-0000-0010-8000-00AA006D2EA4}"
       Else
        For Each ref In references
            addOneReference ref
        Next
    End If
    
    Set ref = selfReference()
    If devConf &gt;= 0 Then addOneReference ref
    
    For i = 1 To confCount
        addConfiguration
        For j = 1 To referenceCount
            If devConf &gt;= 0 And devConf &lt;= confCount Then m_referenceSheet.Cells(nbTitleRows + j, nbTitleColumns + i) = "X"
            If i &lt;&gt; devConf And m_referenceSheet.Cells(nbTitleRows + j, 1) = ref.name Then m_referenceSheet.Cells(nbTitleRows + j, nbTitleColumns + i) = ""
        Next j
    Next i
End Sub</code_list>
      <call>references</call>
      <call>addConfiguration</call>
      <call>references</call>
      <call>addOneReference</call>
      <call>addOneReference</call>
    </child>
    <child>
      <type>sub</type>
      <name>alignConfigurationCount</name>
      <code_list>Private Sub alignConfigurationCount(confCount As Integer)
    If confCount &gt; configurationCount Then  ' we have to add columns
        Dim i As Integer
        For i = configurationCount + 1 To confCount
            addConfiguration
        Next i
    End If
End Sub</code_list>
      <call>configurationCount</call>
      <call>configurationCount</call>
    </child>
    <child>
      <type>function</type>
      <name>configurationCount</name>
      <code_list>Private Function configurationCount() As Integer
    configurationCount = m_referenceSheet.UsedRange.Columns.Count - nbTitleColumns
End Function</code_list>
      <call>configurationCount</call>
    </child>
    <child>
      <type>function</type>
      <name>referenceCount</name>
      <code_list>Private Function referenceCount() As Integer
    referenceCount = m_referenceSheet.UsedRange.Rows.Count - nbTitleRows
End Function</code_list>
      <call>referenceCount</call>
    </child>
    <child>
      <type>sub</type>
      <name>addConfiguration</name>
      <code_list>Public Sub addConfiguration()
    Dim newColumn As Integer
    If Not m_referenceSheet Is Nothing Then
        newColumn = m_referenceSheet.UsedRange.Columns.Count + 1
        m_referenceSheet.Columns(newColumn).ColumnWidth = 22
        m_referenceSheet.Columns(newColumn).HorizontalAlignment = xlCenter
        m_referenceSheet.Cells(1, newColumn).Formula = "=INDIRECT(ADDRESS(1," &amp; newColumn - nbTitleColumns + m_nbTitleColumnsInConfSheet &amp; ",4,1,""vtkConfigurations""))"
        m_referenceSheet.Cells(1, newColumn).Font.Bold = True
       Else
        Err.Raise Number:=VTK_NOTINITIALIZED, Source:="vtkReferenceManager:addConfiguration", Description:="Impossible to add a configuration to the reference sheet of a null workbook."
    End If
End Sub</code_list>
      <call>configuration</call>
    </child>
    <child>
      <type>sub</type>
      <name>addReferences</name>
      <code_list>Private Sub addReferences()
    Dim ref As Reference, ra As Range, vtkRef As New vtkReference
    For Each ref In m_workbook.VBProject.references
        Set ra = m_referenceSheet.Columns("A:A").Find(ref.name, , xlValues, xlWhole)
        If ra Is Nothing Then
            vtkRef.initWithVBAReference ref
            addOneReference vtkRef
        End If
    Next
End Sub</code_list>
      <call>addOneReference</call>
    </child>
    <child>
      <type>sub</type>
      <name>addOneReference</name>
      <code_list>Private Sub addOneReference(vtkRef As vtkReference)
    Dim newRow As Integer
    newRow = m_referenceSheet.UsedRange.Rows.Count + 1
    m_referenceSheet.Cells(newRow, 1) = vtkRef.name
    If vtkRef.GUID Like "" Then
        m_referenceSheet.Cells(newRow, 3) = vtkRef.relPath
       Else
        m_referenceSheet.Cells(newRow, 2) = vtkRef.GUID
    End If
End Sub</code_list>
    </child>
    <child>
      <type>function</type>
      <name>allReferences</name>
      <code_list>Public Function allReferences() As Collection
    Set allReferences = references(0)
End Function</code_list>
      <call>allReferences</call>
    </child>
    <child>
      <type>function</type>
      <name>references</name>
      <code_list>Public Function references(confNumber As Integer) As Collection
    If Not m_referenceSheet Is Nothing Then
        If Not (confNumber &lt; 0 Or confNumber &gt; configurationCount) Then
            Dim c As New Collection, i As Integer, r As vtkReference, s As String, b As Boolean
            For i = 1 To referenceCount
                Set r = New vtkReference
                r.id = "r" &amp; i
                r.name = m_referenceSheet.Cells(nbTitleRows + i, 1)
                r.GUID = m_referenceSheet.Cells(nbTitleRows + i, 2)
                r.relPath = m_referenceSheet.Cells(nbTitleRows + i, 3)
                If confNumber = 0 Then
                    b = True
                   Else
                    s = m_referenceSheet.Cells(nbTitleRows + i, nbTitleColumns + confNumber)
                    Select Case s
                       Case "X"
                        b = True
                       Case ""
                        b = False
                       Case Else
                        Err.Raise Number:=VTK_INVALID_FIELD, Source:="vtkReferenceManager:references", Description:="Field (" &amp; s &amp; ") must be blank or X in the reference sheet (ref=" &amp; r.name &amp; ", conf=" &amp; m_referenceSheet.Cells(1, nbTitleColumns + confNumber) &amp; ") for the workbook " &amp; m_workbook.name
                    End Select
                End If
                If b Then c.Add Item:=r, Key:=r.id
            Next i
            Set references = c
           Else
            Err.Raise Number:=VTK_FORBIDDEN_PARAMETER, Source:="vtkReferenceManager:references", Description:="confNumber (" &amp; confNumber &amp; ") is out of bound (0," &amp; configurationCount &amp; ") for the workbook " &amp; m_workbook.name
        End If
       Else
        Err.Raise Number:=VTK_NOTINITIALIZED, Source:="vtkReferenceManager:references", Description:="Impossible to get references from a sheet of a null workbook"
    End If
End Function</code_list>
      <call>references</call>
      <call>configurationCount</call>
      <call>references</call>
    </child>
    <child>
      <type>sub</type>
      <name>setReferenceWihNumber</name>
      <code_list>Public Sub setReferenceWihNumber(usedRef As Boolean, refNumber As Integer, confNumber As Integer)
    If refNumber &lt; 1 Or refNumber &gt; referenceCount Then _
        Err.Raise Number:=VTK_FORBIDDEN_PARAMETER, Source:="vtkReferenceManager:setReferenceWithNumber", Description:="Reference number (" &amp; refNumber &amp; ") must be between 1 and " &amp; referenceCount
    If confNumber &lt; 1 Or confNumber &gt; configurationCount Then _
        Err.Raise Number:=VTK_FORBIDDEN_PARAMETER, Source:="vtkReferenceManager:setReferenceWithNumber", Description:="Configuration number (" &amp; confNumber &amp; ") must be between 1 and " &amp; configurationCount
    If usedRef Then
        m_referenceSheet.Cells(nbTitleRows + refNumber, nbTitleColumns + confNumber) = "X"
       Else
        m_referenceSheet.Cells(nbTitleRows + refNumber, nbTitleColumns + confNumber) = ""
    End If
End Sub</code_list>
      <call>referenceCount</call>
      <call>configurationCount</call>
    </child>
  </child>
  <child>
    <type>file</type>
    <name>vtkShellAndWait.bas</name>
    <child>
      <type>function</type>
      <name>ShellAndWait</name>
      <code_list>Public Function ShellAndWait(ShellCommand As String, _
                    TimeOutMs As Long, _
                    ShellWindowState As VbAppWinStyle, _
                    BreakKey As ActionOnBreak) As ShellAndWaitResult
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' ShellAndWait
'
' This function calls Shell and passes to it the command text in ShellCommand. The function
' then waits for TimeOutMs (in milliseconds) to expire.
'
'   Parameters:
'       ShellCommand
'           is the command text to pass to the Shell function.
'
'       TimeOutMs
'           is the number of milliseconds to wait for the shell'd program to wait. If the
'           shell'd program terminates before TimeOutMs has expired, the function returns
'           ShellAndWaitResult.Success = 0. If TimeOutMs expires before the shell'd program
'           terminates, the return value is ShellAndWaitResult.TimeOut = 2.
'
'       ShellWindowState
'           is an item in VbAppWinStyle specifying the window state for the shell'd program.
'
'       BreakKey
'           is an item in ActionOnBreak indicating how to handle the application's cancel key
'           (Ctrl Break). If BreakKey is ActionOnBreak.AbandonWait and the user cancels, the
'           wait is abandoned and the result is ShellAndWaitResult.UserWaitAbandoned = 5.
'           If BreakKey is ActionOnBreak.IgnoreBreak, the cancel key is ignored. If
'           BreakKey is ActionOnBreak.PromptUser, the user is given a ?Continue? message. If the
'           user selects "do not continue", the function returns ShellAndWaitResult.UserBreak = 6.
'           If the user selects "continue", the wait is continued.
'
'   Return values:
'            ShellAndWaitResult.Success = 0
'               indicates the the process completed successfully.
'            ShellAndWaitResult.Failure = 1
'               indicates that the Wait operation failed due to a Windows error.
'            ShellAndWaitResult.TimeOut = 2
'               indicates that the TimeOutMs interval timed out the Wait.
'            ShellAndWaitResult.InvalidParameter = 3
'               indicates that an invalid value was passed to the procedure.
'            ShellAndWaitResult.SysWaitAbandoned = 4
'               indicates that the system abandoned the wait.
'            ShellAndWaitResult.UserWaitAbandoned = 5
'               indicates that the user abandoned the wait via the cancel key (Ctrl+Break).
'               This happens only if BreakKey is set to ActionOnBreak.AbandonWait.
'            ShellAndWaitResult.UserBreak = 6
'               indicates that the user broke out of the wait after being prompted with
'               a ?Continue message. This happens only if BreakKey is set to
'               ActionOnBreak.PromptUser.
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Dim TaskID As Long
Dim ProcHandle As Long
Dim WaitRes As Long
Dim Ms As Long
Dim MsgRes As VbMsgBoxResult
Dim SaveCancelKey As XlEnableCancelKey
Dim ElapsedTime As Long
Dim Quit As Boolean
Const ERR_BREAK_KEY = 18
Const DEFAULT_POLL_INTERVAL = 500

If Trim(ShellCommand) = vbNullString Then
    ShellAndWait = ShellAndWaitResult.InvalidParameter
    Exit Function
End If

If TimeOutMs &lt; 0 Then
    ShellAndWait = ShellAndWaitResult.InvalidParameter
    Exit Function
ElseIf TimeOutMs = 0 Then
    Ms = WAIT_INFINITE
Else
    Ms = TimeOutMs
End If

Select Case BreakKey
    Case AbandonWait, IgnoreBreak, PromptUser
    Case Else
        ShellAndWait = ShellAndWaitResult.InvalidParameter
        Exit Function
End Select

Select Case ShellWindowState
    Case vbHide, vbMaximizedFocus, vbMinimizedFocus, vbMinimizedNoFocus, vbNormalFocus, vbNormalNoFocus
    Case Else
        ShellAndWait = ShellAndWaitResult.InvalidParameter
        Exit Function
End Select

On Error Resume Next
Err.Clear
TaskID = Shell(ShellCommand, ShellWindowState)
If (Err.Number &lt;&gt; 0) Or (TaskID = 0) Then
    ShellAndWait = ShellAndWaitResult.Failure
    Exit Function
End If

ProcHandle = OpenProcess(SYNCHRONIZE, False, TaskID)
If ProcHandle = 0 Then
    ShellAndWait = ShellAndWaitResult.Failure
    Exit Function
End If

On Error GoTo ErrH:
SaveCancelKey = Application.EnableCancelKey
Application.EnableCancelKey = xlErrorHandler
WaitRes = WaitForSingleObject(ProcHandle, DEFAULT_POLL_INTERVAL)
Do Until WaitRes = WAIT_OBJECT_0
    DoEvents
    Select Case WaitRes
        Case WAIT_ABANDONED
            ShellAndWait = ShellAndWaitResult.SysWaitAbandoned
            Exit Do
        Case WAIT_OBJECT_0
            ShellAndWait = ShellAndWaitResult.Success
            Exit Do
        Case WAIT_FAILED
            ShellAndWait = ShellAndWaitResult.Failure
            Exit Do
        Case WAIT_TIMEOUT
            ElapsedTime = ElapsedTime + DEFAULT_POLL_INTERVAL
            If Ms &gt; 0 Then
                If ElapsedTime &gt; Ms Then
                    ShellAndWait = ShellAndWaitResult.TimeOut
                    Exit Do
                Else
                End If
            Else
            End If
            WaitRes = WaitForSingleObject(ProcHandle, DEFAULT_POLL_INTERVAL)
            
        Case Else
            ShellAndWait = ShellAndWaitResult.Failure
            Exit Do
            Quit = True
    End Select
Loop

CloseHandle ProcHandle
Application.EnableCancelKey = SaveCancelKey
Exit Function

ErrH:
Debug.Print "ErrH: Cancel: " &amp; Application.EnableCancelKey
If Err.Number = ERR_BREAK_KEY Then
    If BreakKey = ActionOnBreak.AbandonWait Then
        CloseHandle ProcHandle
        ShellAndWait = ShellAndWaitResult.UserWaitAbandoned
        Application.EnableCancelKey = SaveCancelKey
        Exit Function
    ElseIf BreakKey = ActionOnBreak.IgnoreBreak Then
        Err.Clear
        Resume
    ElseIf BreakKey = ActionOnBreak.PromptUser Then
        MsgRes = MsgBox("User Process Break." &amp; vbCrLf &amp; _
            "Continue to wait?", vbYesNo)
        If MsgRes = vbNo Then
            CloseHandle ProcHandle
            ShellAndWait = ShellAndWaitResult.UserBreak
            Application.EnableCancelKey = SaveCancelKey
        Else
            Err.Clear
            Resume Next
        End If
    Else
        CloseHandle ProcHandle
        Application.EnableCancelKey = SaveCancelKey
        ShellAndWait = ShellAndWaitResult.Failure
    End If
Else
    CloseHandle ProcHandle
    ShellAndWait = ShellAndWaitResult.Failure
End If

Application.EnableCancelKey = SaveCancelKey

End Function</code_list>
      <call>ShellAndWait</call>
      <call>ShellAndWait</call>
      <call>ShellAndWait</call>
      <call>ShellAndWait</call>
      <call>ShellAndWait</call>
      <call>ShellAndWait</call>
      <call>ShellAndWait</call>
      <call>ShellAndWait</call>
      <call>ShellAndWait</call>
      <call>ShellAndWait</call>
      <call>ShellAndWait</call>
      <call>ShellAndWait</call>
      <call>ShellAndWait</call>
      <call>ShellAndWait</call>
      <call>ShellAndWait</call>
    </child>
  </child>
  <child>
    <type>file</type>
    <name>vtkToolBars.bas</name>
    <child>
      <type>sub</type>
      <name>vtkAddEventHandler</name>
      <code_list>Public Sub vtkAddEventHandler(action As String, cmdBarCtl As CommandBarControl)
    Dim evh As New vtkEventHandler
    cmdBarCtl.onAction = action
    Set evh.cbe = Application.VBE.Events.CommandBarEvents(cmdBarCtl)
    If colEventHandlers Is Nothing Then Set colEventHandlers = New Collection
    colEventHandlers.Add Item:=evh, Key:=action
    Set evh = Nothing
End Sub</code_list>
    </child>
    <child>
      <type>sub</type>
      <name>vtkClearEventHandlers</name>
      <code_list>Public Sub vtkClearEventHandlers()
    Set colEventHandlers = Nothing
End Sub</code_list>
    </child>
    <child>
      <type>function</type>
      <name>projectName</name>
      <code_list>Private Function projectName() As String
    projectName = ThisWorkbook.VBProject.name
End Function</code_list>
      <call>projectName</call>
    </child>
    <child>
      <type>function</type>
      <name>toolBarName</name>
      <code_list>Private Function toolBarName() As String
    toolBarName = projectName
End Function</code_list>
      <call>toolBarName</call>
    </child>
    <child>
      <type>function</type>
      <name>controlTag</name>
      <code_list>Private Function controlTag() As String
    controlTag = projectName &amp; "_Tag"
End Function</code_list>
      <call>projectName</call>
      <call>controlTag</call>
    </child>
    <child>
      <type>sub</type>
      <name>vtkCreateToolbars</name>
      <code_list>Public Sub vtkCreateToolbars(Optional vbeToolbar As Boolean = True, Optional excToolbar As Boolean = True)
    vtkCreateEmptyToolbars vbeToolbar:=vbeToolbar, excToolbar:=excToolbar
    If excToolbar Then
        vtkCreateToolbarButton caption:="Reset VBE Toolbar", _
                               helpText:="Click here to reset the VBA IDE Toolbar", _
                               faceId:=688, _
                               action:=projectName &amp; ".vtkReactivateVBEToolBar", _
                               vbeToolbar:=False, _
                               excToolbar:=True
    End If
                               
    vtkCreateToolbarButton caption:="Create Project", _
                           helpText:="Click here to create a new project", _
                           faceId:=2031, _
                           action:=projectName &amp; ".vtkShowCreateProjectForm", _
                           vbeToolbar:=vbeToolbar, _
                           excToolbar:=excToolbar

    vtkCreateToolbarButton caption:="Recreate Configuration", _
                           helpText:="Click here to recreate a configuration", _
                           faceId:=680, _
                           action:=projectName &amp; ".vtkShowRecreateConfigurationForm", _
                           vbeToolbar:=vbeToolbar, _
                           excToolbar:=excToolbar
                           
                           
End Sub</code_list>
      <call>vtkCreateEmptyToolbars</call>
      <call>vtkCreateToolbarButton</call>
      <call>vtkCreateToolbarButton</call>
      <call>vtkCreateToolbarButton</call>
    </child>
    <child>
      <type>sub</type>
      <name>vtkCreateEmptyToolbars</name>
      <code_list>Public Sub vtkCreateEmptyToolbars(Optional vbeToolbar As Boolean = True, Optional excToolbar As Boolean = True)
    Dim barE As CommandBar, barV As CommandBar, cbControl As CommandBarControl
    
    If excToolbar Then
        On Error Resume Next
        Set barE = Application.CommandBars(toolBarName)
        On Error GoTo 0
        If barE Is Nothing Then Set barE = Application.CommandBars.Add(name:=toolBarName, Position:=msoBarFloating)
        barE.Visible = True
    End If
    
    If vbeToolbar Then
        On Error Resume Next
        Set barV = Application.VBE.CommandBars(toolBarName)
        On Error GoTo 0
        If barV Is Nothing Then Set barV = Application.VBE.CommandBars.Add(name:=toolBarName, Position:=msoBarTop)
        barV.Visible = True
    End If
    
End Sub</code_list>
    </child>
    <child>
      <type>sub</type>
      <name>vtkDeleteToolbars</name>
      <code_list>Public Sub vtkDeleteToolbars()
   On Error Resume Next
    Application.CommandBars(toolBarName).Delete     ' Unit tests confirm that the button are deleted with the toolbar
    Application.VBE.CommandBars(toolBarName).Delete
    vtkClearEventHandlers
   On Error GoTo 0
End Sub</code_list>
    </child>
    <child>
      <type>sub</type>
      <name>vtkReactivateVBEToolBar</name>
      <code_list>Public Sub vtkReactivateVBEToolBar()
    Dim c As CommandBarControl
    vtkClearEventHandlers
    For Each c In Application.VBE.CommandBars(toolBarName).Controls
        vtkAddEventHandler action:=c.onAction, cmdBarCtl:=c
    Next
End Sub</code_list>
      <call>vtkAddEventHandler</call>
    </child>
    <child>
      <type>sub</type>
      <name>vtkCreateToolbarButton</name>
      <code_list>Public Sub vtkCreateToolbarButton(caption As String, helpText As String, faceId As Integer, action As String, Optional vbeToolbar As Boolean = True, Optional excToolbar As Boolean = True)
    Dim cbControl As CommandBarButton

    If excToolbar Then
        Set cbControl = Application.CommandBars(toolBarName).Controls.Add(Type:=msoControlButton)
        cbControl.faceId = faceId
        cbControl.caption = caption
        cbControl.TooltipText = helpText
        cbControl.Style = msoButtonAutomatic
        cbControl.onAction = action
    End If

    If vbeToolbar Then
        Set cbControl = Application.VBE.CommandBars(toolBarName).Controls.Add(Type:=msoControlButton)
        cbControl.faceId = faceId
        cbControl.caption = caption
        cbControl.TooltipText = helpText
        cbControl.Style = msoButtonAutomatic
        vtkAddEventHandler action:=action, cmdBarCtl:=cbControl
    End If

End Sub</code_list>
      <call>vtkAddEventHandler</call>
    </child>
    <child>
      <type>sub</type>
      <name>vtkTestCommandBarButtonClicked</name>
      <code_list>Public Sub vtkTestCommandBarButtonClicked()
    buttonClicked = True
End Sub</code_list>
    </child>
    <child>
      <type>sub</type>
      <name>vtkTestCommandBarButtonClickedReset</name>
      <code_list>Public Sub vtkTestCommandBarButtonClickedReset()
    buttonClicked = False
End Sub</code_list>
    </child>
    <child>
      <type>function</type>
      <name>vtkIsTestCommandBarButtonClicked</name>
      <code_list>Public Function vtkIsTestCommandBarButtonClicked() As Boolean
    vtkIsTestCommandBarButtonClicked = buttonClicked
End Function</code_list>
      <call>vtkIsTestCommandBarButtonClicked</call>
    </child>
    <child>
      <type>sub</type>
      <name>vtkShowCreateProjectForm</name>
      <code_list>Private Sub vtkShowCreateProjectForm()
    vtkCreateProjectForm.Show
End Sub</code_list>
    </child>
    <child>
      <type>sub</type>
      <name>vtkShowRecreateConfigurationForm</name>
      <code_list>Public Sub vtkShowRecreateConfigurationForm()
    vtkRecreateConfigurationForm.Show
End Sub</code_list>
    </child>
    <child>
      <type>sub</type>
      <name>vtkClickForVBAToolKitRecreation</name>
      <code_list>Public Sub vtkClickForVBAToolKitRecreation()
    vtkRecreateConfiguration projectName:="VBAToolKit", configurationName:="VBAToolKit"
End Sub</code_list>
      <call>vtkRecreateConfiguration</call>
    </child>
    <child>
      <type>sub</type>
      <name>vtkClickForVBAToolKitDEVRecreation</name>
      <code_list>Public Sub vtkClickForVBAToolKitDEVRecreation()
    If Not ActiveWorkbook.VBProject.name Like "VBAToolKit2_DEV" Then Exit Sub
    If Not ActiveWorkbook.name Like "VBAToolKit2_DEV.xlsm" Then Exit Sub
    vtkRecreateConfiguration projectName:="VBAToolKit2", configurationName:="VBAToolKit_DEV"
End Sub</code_list>
      <call>vtkRecreateConfiguration</call>
    </child>
  </child>
  <child>
    <type>file</type>
    <name>vtkWaitForm.frm</name>
  </child>
  <child>
    <type>file</type>
    <name>vtkWaitForm.frx</name>
  </child>
  <child>
    <type>file</type>
    <name>vtkXMLUtilities.bas</name>
    <child>
      <type>function</type>
      <name>escapedString</name>
      <code_list>Public Function escapedString(str As String) As String
    Dim str1 As String
    str1 = Replace(str, "&lt;", "&amp;lt;")
    escapedString = Replace(str1, "&gt;", "&amp;gt;")
End Function</code_list>
      <call>escapedString</call>
    </child>
    <child>
      <type>sub</type>
      <name>vtkExportConfigurationsAsXML</name>
      <code_list>Public Sub vtkExportConfigurationsAsXML(projectName As String, filePath As String)

   On Error GoTo vtkExportConfigurationsAsXML_Error

    Dim cm As vtkConfigurationManager
    Set cm = vtkConfigurationManagerForProject(projectName)
    If cm Is Nothing Then
        Err.Raise Number:=VTK_WORKBOOK_NOT_OPEN
    End If
    
    Dim fso As New FileSystemObject
    Dim xmlFile As TextStream
    Set xmlFile = fso.CreateTextFile(fileName:=filePath, Overwrite:=True)

    xmlFile.WriteLine Text:="&lt;?xml version=""1.0"" encoding=""ISO-8859-1"" standalone=""yes""?&gt;"
    xmlFile.WriteLine Text:="&lt;!DOCTYPE vtkConf ["
    xmlFile.WriteLine Text:="    &lt;!ELEMENT vtkConf (info, reference*, configuration*, module*)&gt;"
    xmlFile.WriteLine Text:="        &lt;!ELEMENT info (vtkConfigurationsVersion,projectName)&gt;"
    xmlFile.WriteLine Text:="                &lt;!ELEMENT vtkConfigurationsVersion (#PCDATA)&gt;"
    xmlFile.WriteLine Text:="                &lt;!ELEMENT projectName (#PCDATA)&gt;"
    xmlFile.WriteLine Text:="        &lt;!ELEMENT configuration (name,path,templatePath?,title?,comment?,password?)&gt;"
    xmlFile.WriteLine Text:="         &lt;!ATTLIST configuration cID ID #REQUIRED&gt;"
    xmlFile.WriteLine Text:="         &lt;!ATTLIST configuration refIDs IDREFS #IMPLIED&gt;"
    xmlFile.WriteLine Text:="                &lt;!ELEMENT name (#PCDATA)&gt;"
    xmlFile.WriteLine Text:="                &lt;!ELEMENT path (#PCDATA)&gt;"
    xmlFile.WriteLine Text:="                &lt;!ELEMENT templatePath (#PCDATA)&gt;"
    xmlFile.WriteLine Text:="                &lt;!ELEMENT title        (#PCDATA)&gt;"
    xmlFile.WriteLine Text:="                &lt;!ELEMENT comment (#PCDATA)&gt;"
    xmlFile.WriteLine Text:="                &lt;!ELEMENT password (#PCDATA)&gt;"
    xmlFile.WriteLine Text:="        &lt;!ELEMENT module (name, modulePath*)&gt;"
    xmlFile.WriteLine Text:="         &lt;!ATTLIST module mID ID #REQUIRED&gt;"
    xmlFile.WriteLine Text:="                &lt;!ELEMENT modulePath (#PCDATA)&gt;"
    xmlFile.WriteLine Text:="                &lt;!ATTLIST modulePath confId IDREF #REQUIRED&gt;"
    xmlFile.WriteLine Text:="        &lt;!ELEMENT reference (name, (guid|path))&gt;"
    xmlFile.WriteLine Text:="         &lt;!ATTLIST reference refID ID #REQUIRED&gt;"
    xmlFile.WriteLine Text:="                &lt;!ELEMENT guid (#PCDATA)&gt;"
    xmlFile.WriteLine Text:="]&gt;"
    
    xmlFile.WriteLine Text:="&lt;vtkConf&gt;"
    xmlFile.WriteBlankLines Lines:=1
    xmlFile.WriteLine Text:="    &lt;info&gt;"
    xmlFile.WriteLine Text:="        &lt;vtkConfigurationsVersion&gt;2.0&lt;/vtkConfigurationsVersion&gt;"
    xmlFile.WriteLine Text:="        &lt;projectName&gt;" &amp; projectName &amp; "&lt;/projectName&gt;"
    xmlFile.WriteLine Text:="    &lt;/info&gt;"
    xmlFile.WriteBlankLines Lines:=1
    
    Dim ref As vtkReference
    For Each ref In cm.references
        xmlFile.WriteLine Text:="    &lt;reference refID=""" &amp; ref.id &amp; """&gt;"
        xmlFile.WriteLine Text:="        &lt;name&gt;" &amp; ref.name &amp; "&lt;/name&gt;"
        If ref.GUID Like "" Then
            xmlFile.WriteLine Text:="        &lt;path&gt;" &amp; ref.relPath &amp; "&lt;/path&gt;"
           Else
            xmlFile.WriteLine Text:="        &lt;guid&gt;" &amp; ref.GUID &amp; "&lt;/guid&gt;"
        End If
        xmlFile.WriteLine Text:="    &lt;/reference&gt;"
    Next
    
    Dim cf As vtkConfiguration, refList As String
    For Each cf In cm.configurations
        refList = ""
        For Each ref In cf.references
            If refList &lt;&gt; "" Then refList = refList &amp; " "
            refList = refList &amp; ref.id
        Next
        If refList = "" Then
            xmlFile.WriteLine Text:="    &lt;configuration cID=""" &amp; cf.id &amp; """&gt;"
           Else
            xmlFile.WriteLine Text:="    &lt;configuration cID=""" &amp; cf.id &amp; """ refIDs=""" &amp; refList &amp; """&gt;"
        End If
        xmlFile.WriteLine Text:="        &lt;name&gt;" &amp; cf.name &amp; "&lt;/name&gt;"
        xmlFile.WriteLine Text:="        &lt;path&gt;" &amp; escapedString(cf.genericPath) &amp; "&lt;/path&gt;"
        If cf.template &lt;&gt; "" Then _
        xmlFile.WriteLine Text:="        &lt;templatePath&gt;" &amp; cf.template &amp; "&lt;/templatePath&gt;"
        xmlFile.WriteLine Text:="        &lt;title&gt;" &amp; cf.projectName &amp; "&lt;/title&gt;" ' must be initialized in Workbook with Wb.BuiltinDocumentProperties("Title").Value
        xmlFile.WriteLine Text:="        &lt;comment&gt;" &amp; cf.comment &amp; "&lt;/comment&gt;" ' must be initialized in Workbook with Wb.BuiltinDocumentProperties("Comments").Value
        If cf.password &lt;&gt; "" Then _
        xmlFile.WriteLine Text:="        &lt;password&gt;" &amp; cf.password &amp; "&lt;/password&gt;"
        xmlFile.WriteLine Text:="    &lt;/configuration&gt;"
    Next
    
    Dim md As vtkModule, modulePath As String
    For Each md In cm.modules
        xmlFile.WriteLine Text:="    &lt;module mID=""" &amp; md.id &amp; """&gt;"
        xmlFile.WriteLine Text:="        &lt;name&gt;" &amp; md.name &amp; "&lt;/name&gt;"
        For Each cf In cm.configurations
            modulePath = md.getPathForConfiguration(confName:=cf.name)
            If Not modulePath Like "" Then xmlFile.WriteLine Text:="        &lt;modulePath confId=""" &amp; cf.id &amp; """&gt;" &amp; modulePath &amp; "&lt;/modulePath&gt;"
        Next
        xmlFile.WriteLine Text:="    &lt;/module&gt;"
    Next
    
    xmlFile.WriteLine Text:="&lt;/vtkConf&gt;"
    xmlFile.Close
    
   On Error GoTo 0
   Exit Sub

vtkExportConfigurationsAsXML_Error:
    Dim s As String
    s = "vtkXMLutilities::exportConfigurationsAsXML"
    
    Select Case Err.Number
        Case VTK_WORKBOOK_NOT_OPEN
            Err.Description = "The " &amp; projectName &amp; "_DEV workbook is not opened"
        Case 76
            Err.Number = VTK_WRONG_FILE_PATH
            Err.Description = "The " &amp; filePath &amp; " path is unreachable"
        Case Else
            Err.Number = VTK_UNEXPECTED_ERROR
            s = s &amp; " -&gt; " &amp; Err.Source
    End Select

    Err.Raise Err.Number, s, Err.Description
End Sub</code_list>
      <call>projectName</call>
      <call>configuration</call>
      <call>configuration</call>
      <call>configuration</call>
      <call>module</call>
      <call>module</call>
      <call>projectName</call>
      <call>initialized</call>
      <call>initialized</call>
      <call>projectName</call>
    </child>
  </child>
</container>