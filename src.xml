<?xml version="1.0"?>
<container version="1.0" xmlns="urn:oasis:names:tc:opendocument:xmlns:container">
  <child>
    <type>file</type>
    <name>Assert.cls</name>
    <child>
      <type>sub</type>
      <name>AddFailure</name>
      <code_list>
Private Sub AddFailure(TestCase As ITestCase, Comment As String)
    mResult.AddFailure TestCase, Comment
End Sub
</code_list>
    </child>
    <child>
      <type>sub</type>
      <name>IAssert_Delta</name>
      <code_list>
Private Sub IAssert_Delta(actual As Variant, expected As Variant, Delta As Variant, Optional Comment As String)

End Sub
</code_list>
      <call>Delta</call>
    </child>
    <child>
      <type>sub</type>
      <name>IAssert_Equals</name>
      <code_list>
Private Sub IAssert_Equals(actual As Variant, expected As Variant, Optional Comment As String)
    If actual &lt;&gt; expected Then AddFailure CurrentTestCase, NotEqualsComment(Comment, actual, expected)
End Sub
</code_list>
      <call>AddFailure</call>
    </child>
    <child>
      <type>sub</type>
      <name>IAssert_Should</name>
      <code_list>
Private Sub IAssert_Should(Condition As Boolean, Optional Comment As String)
    If Not Condition Then AddFailure CurrentTestCase, Comment
End Sub
</code_list>
      <call>AddFailure</call>
    </child>
    <child>
      <type>function</type>
      <name>NotEqualsComment</name>
      <code_list>
Private Function NotEqualsComment(Comment As String, actual As Variant, expected As Variant) As String
    NotEqualsComment = Comment &amp; ":" &amp; vbCrLf &amp; "expected: " &amp; vbCrLf &amp; QW(CStr(expected)) &amp; vbCrLf &amp; "but was: " &amp; vbCrLf &amp; QW(CStr(actual))
End Function
</code_list>
      <call>NotEqualsComment</call>
    </child>
  </child>
  <child>
    <type>file</type>
    <name>AutoGen.cls</name>
    <child>
      <type>function</type>
      <name>CountOfLines</name>
      <code_list>
Public Function CountOfLines(module As CodeModule) As Long
    CountOfLines = module.CountOfLines
End Function
</code_list>
      <call>CountOfLines</call>
    </child>
    <child>
      <type>function</type>
      <name>Lines</name>
      <code_list>
Public Function Lines(module As CodeModule, StartLine As Long, Count As Long) As String
    Lines = module.Lines(StartLine, Count)
End Function
</code_list>
      <call>Lines</call>
    </child>
    <child>
      <type>function</type>
      <name>SuiteMethodBody</name>
      <code_list>
Public Function SuiteMethodBody(TestMethodNames As Collection) As String
    Dim methodName As Variant
    SuiteMethodBody = SuiteHeader()
    For Each methodName In TestMethodNames
        SuiteMethodBody = SuiteMethodBody &amp; vbCrLf &amp; SuiteLine(CStr(methodName))
    Next
End Function
</code_list>
      <call>SuiteMethodBody</call>
      <call>SuiteMethodBody</call>
    </child>
    <child>
      <type>function</type>
      <name>SuiteMethod</name>
      <code_list>
Public Function SuiteMethod() As String



Public Function EndFunction() As String
</code_list>
      <child>
        <type>function</type>
        <name>ITest_Suite</name>
        <code_list>
    SuiteMethod = "Private Function ITest_Suite() As TestSuite"
End Function
</code_list>
        <call>SuiteMethod</call>
      </child>
      <child>
        <type>function</type>
        <name>SuiteHeader</name>
        <code_list>
Public Function SuiteHeader() As String
    SuiteHeader = "    Set ITest_Suite = New TestSuite"
End Function
</code_list>
        <call>ITest_Suite</call>
        <call>SuiteHeader</call>
      </child>
      <child>
        <type>function</type>
        <name>SuiteLine</name>
        <code_list>
Public Function SuiteLine(methodName As String) As String
    SuiteLine = "    ITest_Suite.AddTest ITest_Manager.ClassName, " &amp; QW(methodName)
End Function
</code_list>
        <call>SuiteLine</call>
      </child>
    </child>
    <child>
      <type>function</type>
      <name>GetMethodBody</name>
      <code_list>
Public Function GetMethodBody(ClassName As String, methodName As String) As String
    Dim module As CodeModule, StartLine As Long, LineCount As Long, BodyLine As Long
    Set module = GetCodeModule(ClassName)
    If module Is Nothing Then Exit Function
    StartLine = BodyStartLine(module, methodName)
    LineCount = BodyLineCount(module, methodName)
    If StartLine = 0 Or LineCount = 0 Then Exit Function
    GetMethodBody = module.Lines(StartLine, LineCount)
End Function
</code_list>
      <call>GetMethodBody</call>
    </child>
    <child>
      <type>function</type>
      <name>BodyStartLine</name>
      <code_list>
Private Function BodyStartLine(module As CodeModule, methodName As String) As Long
    Dim BodyLine As Long, NumFuncLines As Long
    NumFuncLines = 1
    If module Is Nothing Then Exit Function
    On Error GoTo NO_METHOD
    BodyLine = module.ProcBodyLine(methodName, vbext_pk_Proc)
    BodyStartLine = BodyLine + NumFuncLines
NO_METHOD:
    Exit Function
End Function
</code_list>
      <call>BodyStartLine</call>
    </child>
    <child>
      <type>function</type>
      <name>BodyLineCount</name>
      <code_list>
Public Function BodyLineCount(module As CodeModule, methodName As String) As Long
    Dim StartLine As Long, LineCount As Long, BodyLine As Long, NumFuncLines As Long, NumEndFuncLines As Long, BStartLine As Long
    NumFuncLines = 1
    NumEndFuncLines = 1
    If module Is Nothing Then Exit Function
    On Error GoTo NO_METHOD
    StartLine = module.ProcStartLine(methodName, vbext_pk_Proc)
    LineCount = module.ProcCountLines(methodName, vbext_pk_Proc)
    Do While module.Lines(StartLine + LineCount - NumEndFuncLines, 1) = ""
        NumEndFuncLines = NumEndFuncLines + 1
    Loop
    BodyLine = module.ProcBodyLine(methodName, vbext_pk_Proc)
    BodyLineCount = LineCount - (BodyLine - StartLine) - NumFuncLines - NumEndFuncLines
    BStartLine = BodyStartLine(module, methodName)
NO_METHOD:
    Exit Function
End Function
</code_list>
      <call>BodyLineCount</call>
    </child>
    <child>
      <type>function</type>
      <name>GetCodeModule</name>
      <code_list>
Public Function GetCodeModule(ClassName) As CodeModule
    Dim Components As VBComponents, Component As VBComponent
    Set Components = Application.VBE.ActiveVBProject.VBComponents
    For Each Component In Components
        If Component.name = ClassName Then
            Set GetCodeModule = Component.CodeModule
            Exit Function
        End If
    Next
End Function
</code_list>
      <call>GetCodeModule</call>
    </child>
    <child>
      <type>sub</type>
      <name>ReplaceMethodBody</name>
      <code_list>
Public Sub ReplaceMethodBody(ClassName As String, methodName As String, NewMethodBody As String)
    Dim module As CodeModule, LineStart As Long, LineCount As Long, BodyLine As Long
    Set module = GetCodeModule(ClassName)
    If module Is Nothing Then Exit Sub
    DeleteMethodBody module, methodName
    InsertMethodBody module, methodName, NewMethodBody
NO_METHOD:
    Exit Sub
End Sub
</code_list>
      <call>DeleteMethodBody</call>
      <call>InsertMethodBody</call>
    </child>
    <child>
      <type>sub</type>
      <name>DeleteMethodBody</name>
      <code_list>
Public Sub DeleteMethodBody(module As CodeModule, methodName As String)
    Dim StartLine As Long, LineCount As Long
    If module Is Nothing Then Exit Sub
    StartLine = BodyStartLine(module, methodName)
    LineCount = BodyLineCount(module, methodName)
    If StartLine = 0 Or LineCount = 0 Then Exit Sub
    module.DeleteLines StartLine, LineCount
End Sub
</code_list>
    </child>
    <child>
      <type>sub</type>
      <name>InsertMethodBody</name>
      <code_list>
Private Sub InsertMethodBody(module As CodeModule, methodName As String, MethodBody As String)
    Dim StartLine As Long
    If module Is Nothing Then Exit Sub
    StartLine = BodyStartLine(module, methodName)
    If StartLine = 0 Then Exit Sub
    module.InsertLines StartLine, MethodBody
End Sub
</code_list>
    </child>
    <child>
      <type>function</type>
      <name>GetTestMethods</name>
      <code_list>
Public Function GetTestMethods(ClassName As String) As Collection
    Dim module As CodeModule, LineNum As Long
    Set GetTestMethods = New Collection
    Set module = GetCodeModule(ClassName)
    If module Is Nothing Then Exit Function
    For LineNum = 1 To module.CountOfLines
        If IsTestMethodLine(module.Lines(LineNum, 1)) Then
            GetTestMethods.Add module.ProcOfLine(LineNum, vbext_pk_Set)
        End If
    Next
End Function
</code_list>
      <call>GetTestMethods</call>
    </child>
    <child>
      <type>function</type>
      <name>IsTestMethodLine</name>
      <code_list>
Private Function IsTestMethodLine(line As String) As Boolean
    IsTestMethodLine = Left(line, 15) Like "Public Sub Test"
End Function
</code_list>
      <call>IsTestMethodLine</call>
    </child>
    <child>
      <type>sub</type>
      <name>MakeSuite</name>
      <code_list>
Public Sub MakeSuite(ClassName As String)
    ReplaceMethodBody ClassName, "ITest_Suite", SuiteMethodBody(GetTestMethods(ClassName))
End Sub
</code_list>
      <call>ReplaceMethodBody</call>
    </child>
    <child>
      <type>function</type>
      <name>RunTestLine</name>
      <code_list>
Public Function RunTestLine(methodName As String) As String
    RunTestLine = "        Case " &amp; QW(methodName) &amp; ": " &amp; methodName
End Function
</code_list>
      <call>RunTestLine</call>
    </child>
    <child>
      <type>function</type>
      <name>RunTestHeader</name>
      <code_list>
Public Function RunTestHeader() As String
    RunTestHeader = "    Select Case mManager.MethodName"
End Function
</code_list>
      <call>RunTestHeader</call>
    </child>
    <child>
      <type>function</type>
      <name>RunTestFooter</name>
      <code_list>
Public Function RunTestFooter() As String
    RunTestFooter = "        Case Else: mAssert.Should False, " &amp; QW("Invalid test name: ") &amp; " &amp; mManager.MethodName" &amp; vbCrLf &amp; _
                    "    End Select"
End Function
</code_list>
      <call>RunTestFooter</call>
    </child>
    <child>
      <type>function</type>
      <name>RunTestMethodBody</name>
      <code_list>
Public Function RunTestMethodBody(TestMethodNames As Collection) As String
    Dim methodName As Variant
    RunTestMethodBody = RunTestHeader()
    For Each methodName In TestMethodNames
        RunTestMethodBody = RunTestMethodBody &amp; vbCrLf &amp; RunTestLine(CStr(methodName))
    Next
    RunTestMethodBody = RunTestMethodBody &amp; vbCrLf &amp; RunTestFooter()
End Function
</code_list>
      <call>RunTestMethodBody</call>
      <call>RunTestMethodBody</call>
      <call>RunTestMethodBody</call>
    </child>
    <child>
      <type>sub</type>
      <name>MakeRunTest</name>
      <code_list>
Public Sub MakeRunTest(ClassName As String)
    ReplaceMethodBody ClassName, "ITestCase_RunTest", RunTestMethodBody(GetTestMethods(ClassName))
End Sub
</code_list>
      <call>ReplaceMethodBody</call>
    </child>
    <child>
      <type>sub</type>
      <name>Prep</name>
      <code_list>
Public Sub Prep(Optional ClassName As String)
    Dim Classes As Collection, name As Variant
    MakeTestClassLister
    If ClassName = "" Then
        Set Classes = TestClasses()
    Else
        Set Classes = New Collection
        Classes.Add ClassName
    End If
    For Each name In Classes
        MakeSuite CStr(name)
        MakeRunTest CStr(name)
    Next
End Sub
</code_list>
      <call>MakeSuite</call>
      <call>MakeRunTest</call>
    </child>
    <child>
      <type>function</type>
      <name>TestClasses</name>
      <code_list>
Public Function TestClasses() As Collection
    Dim Components As VBComponents, Component As VBComponent
    Set TestClasses = New Collection
    Set Components = Application.VBE.ActiveVBProject.VBComponents
    For Each Component In Components
        If IsClassModule(Component.Type) And IsTestClassName(Component.name) Then
            TestClasses.Add Component.name
        End If
    Next
End Function
</code_list>
      <call>TestClasses</call>
    </child>
    <child>
      <type>function</type>
      <name>IsTestClassName</name>
      <code_list>
Public Function IsTestClassName(ComponentName As String) As Boolean
    If Len(ComponentName) &lt;= 6 Then Exit Function
    IsTestClassName = Right(ComponentName, 6) Like "Tester"
End Function
</code_list>
      <call>IsTestClassName</call>
    </child>
    <child>
      <type>function</type>
      <name>IsClassModule</name>
      <code_list>
Public Function IsClassModule(ComponentType As vbext_ComponentType) As Boolean
    IsClassModule = (ComponentType = vbext_ct_ClassModule)
End Function
</code_list>
      <call>IsClassModule</call>
    </child>
    <child>
      <type>function</type>
      <name>TestClassHeader</name>
      <code_list>
Public Function TestClassHeader() As String
    TestClassHeader = "    Select Case TestClassName"
End Function
</code_list>
      <call>TestClassHeader</call>
    </child>
    <child>
      <type>function</type>
      <name>TestClassLine</name>
      <code_list>
Public Function TestClassLine(TestClassName As String) As String
    TestClassLine = "        Case " &amp; QW(TestClassName) &amp; ": Set SelectTestClass = New " &amp; TestClassName
End Function
</code_list>
      <call>TestClassLine</call>
      <call>SelectTestClass</call>
    </child>
    <child>
      <type>function</type>
      <name>TestClassFooter</name>
      <code_list>
Public Function TestClassFooter() As String
    TestClassFooter = "        Case Else:" &amp; vbCrLf &amp; _
                      "    End Select"
End Function
</code_list>
      <call>TestClassFooter</call>
    </child>
    <child>
      <type>function</type>
      <name>TestClassMethodBody</name>
      <code_list>
Public Function TestClassMethodBody(TestClassNames As Collection) As String
    Dim TestClassName As Variant
    TestClassMethodBody = TestClassHeader()
    For Each TestClassName In TestClassNames
        TestClassMethodBody = TestClassMethodBody &amp; vbCrLf &amp; TestClassLine(CStr(TestClassName))
    Next
    TestClassMethodBody = TestClassMethodBody &amp; vbCrLf &amp; TestClassFooter()
End Function
</code_list>
      <call>TestClassMethodBody</call>
      <call>TestClassMethodBody</call>
      <call>TestClassMethodBody</call>
    </child>
    <child>
      <type>sub</type>
      <name>MakeTestClassLister</name>
      <code_list>
Public Sub MakeTestClassLister()
    ReplaceMethodBody "TestClassLister", "SelectTestClass", TestClassMethodBody(TestClasses())
End Sub
</code_list>
      <call>ReplaceMethodBody</call>
    </child>
  </child>
  <child>
    <type>file</type>
    <name>IAssert.cls</name>
    <child>
      <type>sub</type>
      <name>Should</name>
      <code_list>
Public Sub Should(Condition As Boolean, Optional Comment As String)
</code_list>
      <child>
        <type>sub</type>
        <name>Equals</name>
        <code_list>
Public Sub Equals(actual As Variant, expected As Variant, Optional Comment As String)
</code_list>
        <child>
          <type>sub</type>
          <name>Delta</name>
          <code_list>
Public Sub Delta(actual As Variant, expected As Variant, Delta As Variant, Optional Comment As String)
</code_list>
          <call>Delta</call>
        </child>
      </child>
    </child>
  </child>
  <child>
    <type>file</type>
    <name>IResultUser.cls</name>
  </child>
  <child>
    <type>file</type>
    <name>IRunManager.cls</name>
    <child>
      <type>sub</type>
      <name>Report</name>
      <code_list>
Public Sub Report()
</code_list>
    </child>
  </child>
  <child>
    <type>file</type>
    <name>ITest.cls</name>
    <child>
      <type>function</type>
      <name>Suite</name>
      <code_list>
Public Function Suite() As TestSuite
</code_list>
    </child>
  </child>
  <child>
    <type>file</type>
    <name>ITestCase.cls</name>
    <child>
      <type>sub</type>
      <name>SetUp</name>
      <code_list>
Public Sub SetUp(Assert As IAssert)
</code_list>
      <child>
        <type>sub</type>
        <name>RunTest</name>
        <code_list>
Public Sub RunTest()
</code_list>
        <child>
          <type>sub</type>
          <name>TearDown</name>
          <code_list>
Public Sub TearDown()
Public Property Get Manager() As TestCaseManager

</code_list>
        </child>
      </child>
    </child>
  </child>
  <child>
    <type>file</type>
    <name>ITestManager.cls</name>
    <child>
      <type>function</type>
      <name>Run</name>
      <code_list>
Public Function Run(test As ITest, Optional RunManager As IRunManager) As IRunManager
</code_list>
      <child>
        <type>function</type>
        <name>CountTestCases</name>
        <code_list>
Public Function CountTestCases(test As ITest) As Long

</code_list>
      </child>
    </child>
  </child>
  <child>
    <type>file</type>
    <name>RunManager.cls</name>
    <child>
      <type>sub</type>
      <name>Class_Initialize</name>
      <code_list>
Private Sub Class_Initialize()
    Set mAssert = New Assert
    Set mAssertAsResultUser = mAssert
    Set mAssertAsResultUser.result = New TestResult
End Sub
</code_list>
    </child>
    <child>
      <type>sub</type>
      <name>IRunManager_Report</name>
      <code_list>
Private Sub IRunManager_Report()
    Dim Failure As TestFailure, RM As IRunManager, test As ITest, TestCase As ITestCase
    If result.WasSuccessful Then
        Debug.Print "OK (" &amp; result.TestCasesRun &amp; ")"
    Else
        Debug.Print "Tests run: " &amp; result.TestCasesRun &amp; " Failures: " &amp; result.Failures.Count
        For Each Failure In result.Failures
            Set TestCase = Failure.TestCase
            Set test = TestCase
            Debug.Print test.Manager.ClassName &amp; "." &amp; TestCase.Manager.methodName &amp; ": " &amp; Failure.Comment
        Next
    End If
End Sub
</code_list>
    </child>
  </child>
  <child>
    <type>file</type>
    <name>TestCaseManager.cls</name>
    <child>
      <type>sub</type>
      <name>init</name>
      <code_list>
Public Sub init(methodName As String)
    mMethodName = methodName
End Sub
</code_list>
    </child>
    <child>
      <type>function</type>
      <name>ITestManager_CountTestCases</name>
      <code_list>
Private Function ITestManager_CountTestCases(test As ITest) As Long
    ITestManager_CountTestCases = 1
End Function
</code_list>
      <call>ITestManager_CountTestCases</call>
    </child>
    <child>
      <type>function</type>
      <name>ITestManager_Run</name>
      <code_list>
Private Function ITestManager_Run(test As ITest, Optional RunManager As IRunManager) As IRunManager
    Dim TestCase As ITestCase
    If RunManager Is Nothing Then Set RunManager = New RunManager
    Set TestCase = test
    RunManager.result.StartTest TestCase
    TestCase.SetUp RunManager.Assert
    TestCase.RunTest
    TestCase.TearDown
    RunManager.result.EndTest TestCase
End Function
</code_list>
    </child>
  </child>
  <child>
    <type>file</type>
    <name>TestClassLister.cls</name>
    <child>
      <type>function</type>
      <name>TestClasses</name>
      <code_list>
Public Function TestClasses() As Collection
    Dim Components As VBComponents, component As VBComponent
    Set TestClasses = New Collection
    Set Components = Application.VBE.ActiveVBProject.VBComponents
    For Each component In Components
        If IsClassModule(component.Type) And IsTestClassName(component.name) Then
            TestClasses.Add component.name
        End If
    Next
End Function
</code_list>
      <call>TestClasses</call>
    </child>
    <child>
      <type>function</type>
      <name>IsTestClassName</name>
      <code_list>
Public Function IsTestClassName(ComponentName As String) As Boolean
    If Len(ComponentName) &lt;= 6 Then Exit Function
    IsTestClassName = Right(ComponentName, 6) Like "Tester"
End Function
</code_list>
      <call>IsTestClassName</call>
    </child>
    <child>
      <type>function</type>
      <name>IsClassModule</name>
      <code_list>
Public Function IsClassModule(ComponentType As vbext_ComponentType) As Boolean
    IsClassModule = (ComponentType = vbext_ct_ClassModule)
End Function
</code_list>
      <call>IsClassModule</call>
    </child>
    <child>
      <type>function</type>
      <name>NewTestClass</name>
      <code_list>
Public Function NewTestClass(TestClassName As String) As ITest
    Dim test As ITest
    Set NewTestClass = SelectTestClass(TestClassName)
    If NewTestClass Is Nothing Then Exit Function
    NewTestClass.Manager.ClassName = TestClassName
End Function
</code_list>
      <call>NewTestClass</call>
      <call>NewTestClass</call>
    </child>
    <child>
      <type>function</type>
      <name>SelectTestClass</name>
      <code_list>
Public Function SelectTestClass(TestClassName As String) As ITest
    Select Case TestClassName
        Case "vtkCreateProjectTester": Set SelectTestClass = New vtkCreateProjectTester
        Case "vtkPathUtilitiesTester": Set SelectTestClass = New vtkPathUtilitiesTester
        Case "vtkWorkbookIsOpenTester": Set SelectTestClass = New vtkWorkbookIsOpenTester
        Case "vtkConfManagerExcel10Tester": Set SelectTestClass = New vtkConfManagerExcel10Tester
        Case "vtkConfManagerExcel11Tester": Set SelectTestClass = New vtkConfManagerExcel11Tester
        Case "vtkConfManagerExcel12Tester": Set SelectTestClass = New vtkConfManagerExcel12Tester
        Case "vtkConfigurationManagersTester": Set SelectTestClass = New vtkConfigurationManagersTester
        Case "vtkProjectsTester": Set SelectTestClass = New vtkProjectsTester
        Case "vtkProjectTester": Set SelectTestClass = New vtkProjectTester
        Case "vtkInitializeVbaUnitTester": Set SelectTestClass = New vtkInitializeVbaUnitTester
        Case "vtkCreateTreeFolderTester": Set SelectTestClass = New vtkCreateTreeFolderTester
        Case "vtkImportExportUtilitiesTester": Set SelectTestClass = New vtkImportExportUtilitiesTester
        Case "vtkToolBarsTester": Set SelectTestClass = New vtkToolBarsTester
        Case "vtkExportOneModuleTester": Set SelectTestClass = New vtkExportOneModuleTester
        Case "vtkGitFunctionsTester": Set SelectTestClass = New vtkGitFunctionsTester
        Case "vtkFileSystemUtilitiesTester": Set SelectTestClass = New vtkFileSystemUtilitiesTester
        Case "vtkConfigurationTester": Set SelectTestClass = New vtkConfigurationTester
        Case "vtkModuleTester": Set SelectTestClass = New vtkModuleTester
        Case "vtkExportConfigurationTester": Set SelectTestClass = New vtkExportConfigurationTester
        Case "vtkNormalizeTester": Set SelectTestClass = New vtkNormalizeTester
        Case "vtkTestUtilitiesTester": Set SelectTestClass = New vtkTestUtilitiesTester
        Case "vtkXMLExportTester": Set SelectTestClass = New vtkXMLExportTester
        Case "vtkRecreateConfExcelTester": Set SelectTestClass = New vtkRecreateConfExcelTester
        Case "vtkExcelUtilitiesTester": Set SelectTestClass = New vtkExcelUtilitiesTester
        Case "vtkReferenceManagerTester": Set SelectTestClass = New vtkReferenceManagerTester
        Case "vtkConfManagerXML20Tester": Set SelectTestClass = New vtkConfManagerXML20Tester
        Case "vtkRecreateConfXMLTester": Set SelectTestClass = New vtkRecreateConfXMLTester
        Case Else:
    End Select
End Function
</code_list>
      <call>SelectTestClass</call>
      <call>SelectTestClass</call>
      <call>SelectTestClass</call>
      <call>SelectTestClass</call>
      <call>SelectTestClass</call>
      <call>SelectTestClass</call>
      <call>SelectTestClass</call>
      <call>SelectTestClass</call>
      <call>SelectTestClass</call>
      <call>SelectTestClass</call>
      <call>SelectTestClass</call>
      <call>SelectTestClass</call>
      <call>SelectTestClass</call>
      <call>SelectTestClass</call>
      <call>SelectTestClass</call>
      <call>SelectTestClass</call>
      <call>SelectTestClass</call>
      <call>SelectTestClass</call>
      <call>SelectTestClass</call>
      <call>SelectTestClass</call>
      <call>SelectTestClass</call>
      <call>SelectTestClass</call>
      <call>SelectTestClass</call>
      <call>SelectTestClass</call>
      <call>SelectTestClass</call>
      <call>SelectTestClass</call>
      <call>SelectTestClass</call>
    </child>
  </child>
  <child>
    <type>file</type>
    <name>TesterTemplate.cls</name>
    <child>
      <type>sub</type>
      <name>Class_Initialize</name>
      <code_list>
Private Sub Class_Initialize()
    Set mManager = New TestCaseManager
End Sub
</code_list>
    </child>
    <child>
      <type>sub</type>
      <name>ITestCase_SetUp</name>
      <code_list>
Private Sub ITestCase_SetUp(Assert As IAssert)
    Set mAssert = Assert
End Sub
</code_list>
    </child>
    <child>
      <type>sub</type>
      <name>ITestCase_TearDown</name>
      <code_list>
Private Sub ITestCase_TearDown()
    VBAToolKit.resetTestFolder
End Sub
</code_list>
    </child>
    <child>
      <type>sub</type>
      <name>TestNothing</name>
      <code_list>
Public Sub TestNothing()
End Sub
</code_list>
    </child>
    <child>
      <type>function</type>
      <name>ITest_Suite</name>
      <code_list>
Private Function ITest_Suite() As TestSuite
    Set ITest_Suite = New TestSuite
    ITest_Suite.AddTest ITest_Manager.ClassName, "TestNothing"
End Function
</code_list>
      <call>ITest_Suite</call>
    </child>
    <child>
      <type>sub</type>
      <name>ITestCase_RunTest</name>
      <code_list>
Private Sub ITestCase_RunTest()
    Select Case mManager.methodName
        Case "TestNothing": TestNothing
        Case Else: mAssert.Should False, "Invalid test name: " &amp; mManager.methodName
    End Select
End Sub
</code_list>
    </child>
  </child>
  <child>
    <type>file</type>
    <name>TestFailure.cls</name>
    <child>
      <type>sub</type>
      <name>init</name>
      <code_list>
Public Sub init(TestCase As ITestCase, Comment As String)
    Set mTestCase = TestCase
    mComment = Comment
End Sub
</code_list>
    </child>
  </child>
  <child>
    <type>file</type>
    <name>TestResult.cls</name>
    <child>
      <type>sub</type>
      <name>StartTest</name>
      <code_list>
Public Sub StartTest(TestCase As ITestCase)
    Set mCurrentTestCase = TestCase
    mTestCasesRun = mTestCasesRun + 1
End Sub
</code_list>
    </child>
    <child>
      <type>sub</type>
      <name>EndTest</name>
      <code_list>
Public Sub EndTest(TestCase As ITestCase)
    Set mCurrentTestCase = Nothing
End Sub
</code_list>
    </child>
    <child>
      <type>sub</type>
      <name>AddFailure</name>
      <code_list>
Public Sub AddFailure(TestCase As ITestCase, Comment As String)
    Dim Failure As TestFailure
    Set Failure = New TestFailure
    Failure.init TestCase, Comment
    Failures.Add Failure
End Sub
</code_list>
    </child>
    <child>
      <type>sub</type>
      <name>Class_Initialize</name>
      <code_list>
Private Sub Class_Initialize()
    Set mFailures = New Collection
End Sub
</code_list>
    </child>
  </child>
  <child>
    <type>file</type>
    <name>TestRunner.cls</name>
    <child>
      <type>sub</type>
      <name>Run</name>
      <code_list>
Public Sub Run(Optional TestClassName As String)
    Dim s As TestSuite, T As ITest, RM As IRunManager, TL As TestClassLister
    Dim c As Collection, VName As Variant
    Set TL = New TestClassLister
    If TestClassName &lt;&gt; "" Then
        Set c = New Collection
        c.Add TestClassName
    Else
        Set c = TL.TestClasses()
    End If
    Set s = New TestSuite
    For Each VName In c
        s.AddTest CStr(VName)
    Next
    Set T = s
    Set RM = New RunManager
    T.Manager.Run T, RM
    RM.Report
End Sub
</code_list>
    </child>
  </child>
  <child>
    <type>file</type>
    <name>TestSuite.cls</name>
    <child>
      <type>function</type>
      <name>Tests</name>
      <code_list>
Public Function Tests() As Collection
    Set Tests = mTests
End Function
</code_list>
      <call>Tests</call>
    </child>
    <child>
      <type>sub</type>
      <name>AddTest</name>
      <code_list>
Public Sub AddTest(TestClassName As String, Optional methodName As String)
    Dim test As ITest
    Dim TestCase As ITestCase
    Dim TL As TestClassLister
    Set TL = New TestClassLister
    Set test = TL.NewTestClass(TestClassName)
    If methodName &lt;&gt; "" Then
        Set TestCase = test
        TestCase.Manager.init methodName
        mTests.Add test
    Else
        mTests.Add test.Suite
    End If
End Sub
</code_list>
    </child>
    <child>
      <type>sub</type>
      <name>Class_Initialize</name>
      <code_list>
Private Sub Class_Initialize()
    Set mTests = New Collection
    Set mManager = New TestSuiteManager
End Sub
</code_list>
    </child>
    <child>
      <type>function</type>
      <name>ITest_Suite</name>
      <code_list>
Private Function ITest_Suite() As TestSuite
    Set ITest_Suite = Me
End Function
</code_list>
      <call>ITest_Suite</call>
    </child>
  </child>
  <child>
    <type>file</type>
    <name>TestSuiteManager.cls</name>
    <child>
      <type>function</type>
      <name>ITestManager_CountTestCases</name>
      <code_list>
Private Function ITestManager_CountTestCases(test As ITest) As Long
    Dim Count As Long
    Dim TestSuite As TestSuite, Tests As Collection
    Dim SubTest As ITest
    Set TestSuite = test
    Set Tests = TestSuite.Tests()
    For Each SubTest In Tests
        Count = Count + SubTest.Manager.CountTestCases(SubTest)
    Next
    ITestManager_CountTestCases = Count
End Function
</code_list>
      <call>Tests</call>
      <call>Tests</call>
      <call>ITestManager_CountTestCases</call>
    </child>
    <child>
      <type>function</type>
      <name>ITestManager_Run</name>
      <code_list>
Private Function ITestManager_Run(test As ITest, Optional RunManager As IRunManager) As IRunManager
    Dim TestSuite As TestSuite, Tests As Collection
    Dim SubTest As ITest
    Set TestSuite = test
    Set Tests = TestSuite.Tests()
    If RunManager Is Nothing Then Set RunManager = New RunManager
    For Each SubTest In TestSuite.Tests()
        SubTest.Manager.Run SubTest, RunManager
    Next
    Set ITestManager_Run = RunManager
End Function
</code_list>
      <call>Tests</call>
      <call>Tests</call>
      <call>ITestManager_Run</call>
    </child>
  </child>
  <child>
    <type>file</type>
    <name>VbaUnitMain.bas</name>
    <child>
      <type>sub</type>
      <name>VbaUnitMain</name>
      <code_list>
Public Sub VbaUnitMain()
    
    Run '"AutoGenTester"
End Sub
</code_list>
      <call>Run</call>
    </child>
    <child>
      <type>sub</type>
      <name>Run</name>
      <code_list>
Public Sub Run(Optional TestClassName As String)
    Dim r As TestRunner
    Set r = New TestRunner
    
    Dim hdebut As Single
    Dim hfin As Single
   
    hdebut = Timer 'debut
    VBAToolKit.vtkTestUtilities.prepare ThisWorkbook       ' Prepare vtkTestUtilities
    Application.ScreenUpdating = False

    r.Run TestClassName
    
    Application.ScreenUpdating = True
    hfin = Timer 'fin
    Debug.Print Format(hfin - hdebut, "Fixed"); "  second"
End Sub
</code_list>
    </child>
    <child>
      <type>sub</type>
      <name>Prep</name>
      <code_list>
Public Sub Prep(Optional ClassName As String)
    Dim AG As AutoGen
    Set AG = New AutoGen
    AG.Prep ClassName
End Sub
</code_list>
    </child>
    <child>
      <type>function</type>
      <name>QW</name>
      <code_list>
Public Function QW(s As String) As String
    QW = Chr(34) &amp; s &amp; Chr(34)
End Function
</code_list>
      <call>QW</call>
    </child>
  </child>
</container>