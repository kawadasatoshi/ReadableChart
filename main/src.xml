<?xml version="1.0"?>
<child xmlns="urn:oasis:names:tc:opendocument:xmlns:container">
  <type>file</type>
  <name>0vtkConfigurationManagerXML.cls</name>
  <child>
    <type>sub</type>
    <name>Class_Terminate</name>
    <code_list>
Private Sub Class_Terminate()
    Set m_DOMDocument = Nothing
End Sub
</code_list>
  </child>
  <child>
    <type>sub</type>
    <name>init</name>
    <code_list>
Public Sub init(ByVal XMLFilePath As String)
    Dim fso As New FileSystemObject, DDoc As MSXML2.DOMDocument
    Dim projectName As String, rootPath As String
    If fso.FileExists(XMLFilePath) Then
        Set DDoc = New MSXML2.DOMDocument
        DDoc.Load XMLFilePath
        DDoc.setProperty "SelectionLanguage", "XPath"  ' for the use of the contains() function of XPath
        If DDoc.parseError.ErrorCode &lt;&gt; 0 Then
            Err.Raise Number:=VTK_INVALID_XML_FILE, Source:="init:vtkConfigurationManagerXML", Description:="Parse error of " &amp; XMLFilePath &amp; " : " &amp; DDoc.parseError.reason
        End If
        If DDoc.SelectSingleNode("/vtkConf/info/vtkConfigurationsVersion").Text &lt;&gt; "2.0" Then
            Err.Raise Number:=VTK_OBSOLETE_CONFIGURATION_SHEET, Source:="init:vtkConfigurationManagerXML", Description:="Bad version of XML File : 2.0 expected."
        End If
       On Error GoTo M_Error
        projectName = DDoc.SelectSingleNode("/vtkConf/info/projectName").Text
        rootPath = fso.GetParentFolderName(fso.GetParentFolderName(XMLFilePath))
       On Error GoTo 0
        Set m_DOMDocument = DDoc
        m_projectName = projectName
        m_rootPath = rootPath
       Else
        Err.Raise Number:=VTK_WRONG_FILE_PATH, Source:="init:vtkConfigurationManagerXML", Description:="The File " &amp; XMLFilePath &amp; " is unreachable."
    End If
    Exit Sub
M_Error:
    Err.Raise Number:=VTK_INVALID_XML_FILE, Source:="init:vtkConfigurationManagerXML", Description:="Parse error of " &amp; XMLFilePath &amp; " : " &amp; DDoc.parseError.reason
End Sub
</code_list>
  </child>
  <child>
    <type>function</type>
    <name>configuration</name>
    <code_list>
Public Function configuration(n As Integer) As String
    If n &gt; 0 And n &lt;= configurationCount Then
        configuration = m_DOMDocument.SelectSingleNode("/vtkConf/configuration[@cID=""c" &amp; n &amp; """]/name").Text
       Else
        configuration = ""
    End If
End Function
</code_list>
    <call>configuration</call>
    <call>configuration</call>
  </child>
  <child>
    <type>function</type>
    <name>vtkConfigurationManager_configuration</name>
    <code_list>
Public Function vtkConfigurationManager_configuration(n As Integer) As String
    vtkConfigurationManager_configuration = configuration(n)
End Function
</code_list>
    <call>vtkConfigurationManager_configuration</call>
  </child>
  <child>
    <type>sub</type>
    <name>raiseReadOnlyError</name>
    <code_list>
Private Sub raiseReadOnlyError(Source As String)
    Err.Raise Number:=VTK_READONLY_FILE, Source:=Source, Description:="A XML Configuration File is considered Read-Only"
End Sub
</code_list>
  </child>
  <child>
    <type>function</type>
    <name>addConfiguration</name>
    <code_list>
Public Function addConfiguration(configuration As String, Optional path As String = "", Optional template As String = "", Optional projectName As String = "", Optional comment As String = "") As Integer
    raiseReadOnlyError Source:="addConfiguration:vtkConfigurationManagerXML"
End Function
</code_list>
    <call>raiseReadOnlyError</call>
  </child>
  <child>
    <type>function</type>
    <name>vtkConfigurationManager_addConfiguration</name>
    <code_list>
Public Function vtkConfigurationManager_addConfiguration(configuration As String, Optional path As String = "", Optional template As String = "", Optional projectName As String = "", Optional comment As String = "") As Integer
    vtkConfigurationManager_addConfiguration = addConfiguration(configuration, path, template, projectName, comment)
End Function
</code_list>
    <call>vtkConfigurationManager_addConfiguration</call>
  </child>
  <child>
    <type>function</type>
    <name>configurations</name>
    <code_list>
Public Function configurations() As Collection
    Dim col As New Collection, i As Integer, c As vtkConfiguration
    For i = 1 To configurationCount
        Set c = New vtkConfiguration
        c.init confManager:=Me, confNumber:=i
        col.Add Item:=c, Key:=configuration(i)
    Next i
    Set configurations = col
End Function
</code_list>
    <call>configurations</call>
  </child>
  <child>
    <type>function</type>
    <name>vtkConfigurationManager_configurations</name>
    <code_list>
Public Function vtkConfigurationManager_configurations() As Collection
    Set vtkConfigurationManager_configurations = configurations
End Function
</code_list>
    <call>vtkConfigurationManager_configurations</call>
  </child>
  <child>
    <type>function</type>
    <name>getConfigurationNumber</name>
    <code_list>
Public Function getConfigurationNumber(configuration As String) As Integer
    Dim textValue As String
   On Error Resume Next
    textValue = m_DOMDocument.SelectSingleNode("/vtkConf/configuration[name=""" &amp; configuration &amp; """]/@cID").Text
   On Error GoTo 0
    If textValue = "" Then
        getConfigurationNumber = 0
       Else
        getConfigurationNumber = CInt(Right$(textValue, Len(textValue) - 1))
    End If
End Function
</code_list>
    <call>configuration</call>
    <call>getConfigurationNumber</call>
    <call>getConfigurationNumber</call>
  </child>
  <child>
    <type>function</type>
    <name>vtkConfigurationManager_getConfigurationNumber</name>
    <code_list>
Public Function vtkConfigurationManager_getConfigurationNumber(configuration As String) As Integer
    vtkConfigurationManager_getConfigurationNumber = getConfigurationNumber(configuration)
End Function
</code_list>
    <call>vtkConfigurationManager_getConfigurationNumber</call>
  </child>
  <child>
    <type>function</type>
    <name>getConfigurationPathWithNumber</name>
    <code_list>
Public Function getConfigurationPathWithNumber(n As Integer) As String
    If n &gt; 0 And n &lt;= configurationCount Then
        getConfigurationPathWithNumber = m_DOMDocument.SelectSingleNode("/vtkConf/configuration[@cID=""c" &amp; n &amp; """]/path").Text
       Else
        getConfigurationPathWithNumber = ""
    End If
End Function
</code_list>
    <call>getConfigurationPathWithNumber</call>
    <call>getConfigurationPathWithNumber</call>
  </child>
  <child>
    <type>function</type>
    <name>vtkConfigurationManager_getConfigurationPathWithNumber</name>
    <code_list>
Public Function vtkConfigurationManager_getConfigurationPathWithNumber(n As Integer) As String
    vtkConfigurationManager_getConfigurationPathWithNumber = getConfigurationPathWithNumber(n)
End Function
</code_list>
    <call>vtkConfigurationManager_getConfigurationPathWithNumber</call>
  </child>
  <child>
    <type>sub</type>
    <name>setConfigurationPathWithNumber</name>
    <code_list>
Public Sub setConfigurationPathWithNumber(n As Integer, path As String)
    raiseReadOnlyError Source:="setConfigurationPathWithNumber:vtkConfigurationManagerXML"
End Sub
</code_list>
    <call>raiseReadOnlyError</call>
  </child>
  <child>
    <type>sub</type>
    <name>vtkConfigurationManager_setConfigurationPathWithNumber</name>
    <code_list>
Public Sub vtkConfigurationManager_setConfigurationPathWithNumber(n As Integer, path As String)
    setConfigurationPathWithNumber n, path
End Sub
</code_list>
    <call>setConfigurationPathWithNumber</call>
  </child>
  <child>
    <type>function</type>
    <name>getConfigurationPath</name>
    <code_list>
Public Function getConfigurationPath(configuration As String) As String
    getConfigurationPath = getConfigurationPathWithNumber(getConfigurationNumber(configuration))
End Function
</code_list>
    <call>getConfigurationPath</call>
  </child>
  <child>
    <type>function</type>
    <name>vtkConfigurationManager_getConfigurationPath</name>
    <code_list>
Public Function vtkConfigurationManager_getConfigurationPath(configuration As String) As String
    vtkConfigurationManager_getConfigurationPath = getConfigurationPath(configuration)
End Function
</code_list>
    <call>vtkConfigurationManager_getConfigurationPath</call>
  </child>
  <child>
    <type>sub</type>
    <name>setConfigurationPath</name>
    <code_list>
Public Sub setConfigurationPath(configuration As String, path As String)
    raiseReadOnlyError Source:="setConfigurationPath:vtkConfigurationManagerXML"
End Sub
</code_list>
    <call>raiseReadOnlyError</call>
  </child>
  <child>
    <type>sub</type>
    <name>vtkConfigurationManager_setConfigurationPath</name>
    <code_list>
Public Sub vtkConfigurationManager_setConfigurationPath(configuration As String, path As String)
    setConfigurationPath configuration, path
End Sub
</code_list>
    <call>setConfigurationPath</call>
  </child>
  <child>
    <type>function</type>
    <name>getConfigurationProjectNameWithNumber</name>
    <code_list>
Public Function getConfigurationProjectNameWithNumber(n As Integer) As String
    If n &gt; 0 And n &lt;= configurationCount Then
        getConfigurationProjectNameWithNumber = m_DOMDocument.SelectSingleNode("/vtkConf/configuration[@cID=""c" &amp; n &amp; """]/title").Text
       Else
        getConfigurationProjectNameWithNumber = ""
    End If
End Function
</code_list>
    <call>getConfigurationProjectNameWithNumber</call>
    <call>getConfigurationProjectNameWithNumber</call>
  </child>
  <child>
    <type>function</type>
    <name>vtkConfigurationManager_getConfigurationProjectNameWithNumber</name>
    <code_list>
Public Function vtkConfigurationManager_getConfigurationProjectNameWithNumber(n As Integer) As String
    vtkConfigurationManager_getConfigurationProjectNameWithNumber = getConfigurationProjectNameWithNumber(n)
End Function
</code_list>
    <call>vtkConfigurationManager_getConfigurationProjectNameWithNumber</call>
  </child>
  <child>
    <type>sub</type>
    <name>setConfigurationProjectNameWithNumber</name>
    <code_list>
Public Sub setConfigurationProjectNameWithNumber(n As Integer, projectName As String)
    raiseReadOnlyError Source:="setConfigurationProjectNameWithNumber:vtkConfigurationManagerXML"
End Sub
</code_list>
    <call>raiseReadOnlyError</call>
  </child>
  <child>
    <type>sub</type>
    <name>vtkConfigurationManager_setConfigurationProjectNameWithNumber</name>
    <code_list>
Public Sub vtkConfigurationManager_setConfigurationProjectNameWithNumber(n As Integer, projectName As String)
    setConfigurationProjectNameWithNumber n, projectName
End Sub
</code_list>
    <call>setConfigurationProjectNameWithNumber</call>
  </child>
  <child>
    <type>function</type>
    <name>getConfigurationCommentWithNumber</name>
    <code_list>
Public Function getConfigurationCommentWithNumber(n As Integer) As String
    If n &gt; 0 And n &lt;= configurationCount Then
        getConfigurationCommentWithNumber = m_DOMDocument.SelectSingleNode("/vtkConf/configuration[@cID=""c" &amp; n &amp; """]/comment").Text
       Else
        getConfigurationCommentWithNumber = ""
    End If
End Function
</code_list>
    <call>getConfigurationCommentWithNumber</call>
    <call>getConfigurationCommentWithNumber</call>
  </child>
  <child>
    <type>function</type>
    <name>vtkConfigurationManager_getConfigurationCommentWithNumber</name>
    <code_list>
Public Function vtkConfigurationManager_getConfigurationCommentWithNumber(n As Integer) As String
    vtkConfigurationManager_getConfigurationCommentWithNumber = getConfigurationCommentWithNumber(n)
End Function
</code_list>
    <call>vtkConfigurationManager_getConfigurationCommentWithNumber</call>
  </child>
  <child>
    <type>sub</type>
    <name>setConfigurationCommentWithNumber</name>
    <code_list>
Public Sub setConfigurationCommentWithNumber(n As Integer, comment As String)
    raiseReadOnlyError Source:="setConfigurationCommentWithNumber:vtkConfigurationManagerXML"
End Sub
</code_list>
    <call>raiseReadOnlyError</call>
  </child>
  <child>
    <type>sub</type>
    <name>vtkConfigurationManager_setConfigurationCommentWithNumber</name>
    <code_list>
Public Sub vtkConfigurationManager_setConfigurationCommentWithNumber(n As Integer, comment As String)
    setConfigurationCommentWithNumber n, comment
End Sub
</code_list>
    <call>setConfigurationCommentWithNumber</call>
  </child>
  <child>
    <type>function</type>
    <name>getConfigurationTemplateWithNumber</name>
    <code_list>
Public Function getConfigurationTemplateWithNumber(n As Integer) As String
    If n &gt; 0 And n &lt;= configurationCount Then
       On Error Resume Next
        getConfigurationTemplateWithNumber = m_DOMDocument.SelectSingleNode("/vtkConf/configuration[@cID=""c" &amp; n &amp; """]/templatePath").Text
       On Error GoTo 0
       Else
        getConfigurationTemplateWithNumber = ""
    End If
End Function
</code_list>
    <call>getConfigurationTemplateWithNumber</call>
    <call>getConfigurationTemplateWithNumber</call>
  </child>
  <child>
    <type>function</type>
    <name>vtkConfigurationManager_getConfigurationTemplateWithNumber</name>
    <code_list>
Public Function vtkConfigurationManager_getConfigurationTemplateWithNumber(n As Integer) As String
    vtkConfigurationManager_getConfigurationTemplateWithNumber = getConfigurationTemplateWithNumber(n)
End Function
</code_list>
    <call>vtkConfigurationManager_getConfigurationTemplateWithNumber</call>
  </child>
  <child>
    <type>sub</type>
    <name>setConfigurationTemplateWithNumber</name>
    <code_list>
Public Sub setConfigurationTemplateWithNumber(n As Integer, template As String)
    raiseReadOnlyError Source:="setConfigurationTemplateWithNumber:vtkConfigurationManagerXML"
End Sub
</code_list>
    <call>raiseReadOnlyError</call>
  </child>
  <child>
    <type>sub</type>
    <name>vtkConfigurationManager_setConfigurationTemplateWithNumber</name>
    <code_list>
Public Sub vtkConfigurationManager_setConfigurationTemplateWithNumber(n As Integer, template As String)
    setConfigurationTemplateWithNumber n, template
End Sub
</code_list>
    <call>setConfigurationTemplateWithNumber</call>
  </child>
  <child>
    <type>function</type>
    <name>getConfigurationPasswordWithNumber</name>
    <code_list>
Public Function getConfigurationPasswordWithNumber(n As Integer) As String
    If n &gt; 0 And n &lt;= configurationCount Then
       On Error Resume Next
        getConfigurationPasswordWithNumber = m_DOMDocument.SelectSingleNode("/vtkConf/configuration[@cID=""c" &amp; n &amp; """]/password").Text
       On Error GoTo 0
       Else
        getConfigurationPasswordWithNumber = ""
    End If
End Function
</code_list>
    <call>getConfigurationPasswordWithNumber</call>
    <call>getConfigurationPasswordWithNumber</call>
  </child>
  <child>
    <type>function</type>
    <name>vtkConfigurationManager_getConfigurationPasswordWithNumber</name>
    <code_list>
Public Function vtkConfigurationManager_getConfigurationPasswordWithNumber(n As Integer) As String
    vtkConfigurationManager_getConfigurationPasswordWithNumber = getConfigurationPasswordWithNumber(n)
End Function
</code_list>
    <call>vtkConfigurationManager_getConfigurationPasswordWithNumber</call>
  </child>
  <child>
    <type>sub</type>
    <name>setConfigurationPasswordWithNumber</name>
    <code_list>
Public Sub setConfigurationPasswordWithNumber(n As Integer, password As String)
    raiseReadOnlyError Source:="setConfigurationPasswordWithNumber:vtkConfigurationManagerXML"
End Sub
</code_list>
    <call>raiseReadOnlyError</call>
  </child>
  <child>
    <type>sub</type>
    <name>vtkConfigurationManager_setConfigurationPasswordWithNumber</name>
    <code_list>
Public Sub vtkConfigurationManager_setConfigurationPasswordWithNumber(n As Integer, password As String)
    setConfigurationPasswordWithNumber n, password
End Sub
</code_list>
    <call>setConfigurationPasswordWithNumber</call>
  </child>
  <child>
    <type>function</type>
    <name>vtkReferenceWithXML</name>
    <code_list>
Private Function vtkReferenceWithXML(id As String) As vtkReference
    Dim ref As New vtkReference
    ref.id = id
    ref.name = m_DOMDocument.SelectSingleNode("/vtkConf/reference[@refID=""" &amp; id &amp; """]/name").Text
   On Error Resume Next
    ref.GUID = m_DOMDocument.SelectSingleNode("/vtkConf/reference[@refID=""" &amp; id &amp; """]/guid").Text
    If Err.Number &lt;&gt; 0 Then
        Err.Number = 0
        ref.fullPath = m_DOMDocument.SelectSingleNode("/vtkConf/reference[@refID=""" &amp; id &amp; """]/path").Text
    End If
   On Error GoTo 0
    Set vtkReferenceWithXML = ref
End Function
</code_list>
    <call>vtkReferenceWithXML</call>
  </child>
  <child>
    <type>function</type>
    <name>getConfigurationReferencesWithNumber</name>
    <code_list>
Public Function getConfigurationReferencesWithNumber(n As Integer) As Collection
    Dim refIDs() As String, i As Integer, refs As New Collection
   On Error GoTo M_Error
    refIDs = Split(m_DOMDocument.SelectSingleNode("/vtkConf/configuration[@cID=""c" &amp; n &amp; """]").Attributes.getNamedItem("refIDs").Text)
   On Error GoTo 0
    For i = LBound(refIDs) To UBound(refIDs)
        refs.Add vtkReferenceWithXML(refIDs(i)), Key:=refIDs(i)
    Next i
M_Error:    ' refIDs attribute is optional
    Set getConfigurationReferencesWithNumber = refs
End Function
</code_list>
    <call>getConfigurationReferencesWithNumber</call>
  </child>
  <child>
    <type>function</type>
    <name>vtkConfigurationManager_getConfigurationReferencesWithNumber</name>
    <code_list>
Public Function vtkConfigurationManager_getConfigurationReferencesWithNumber(n As Integer) As Collection
    Set vtkConfigurationManager_getConfigurationReferencesWithNumber = getConfigurationReferencesWithNumber(n)
End Function
</code_list>
    <call>vtkConfigurationManager_getConfigurationReferencesWithNumber</call>
  </child>
  <child>
    <type>function</type>
    <name>modules</name>
    <code_list>
Public Function modules() As Collection
    Dim col As New Collection, i As Integer, m As vtkModule
    For i = 1 To moduleCount
        Set m = New vtkModule
        m.init confManager:=Me, modNumber:=i
        col.Add Item:=m, Key:=module(i)
    Next i
    Set modules = col
End Function
</code_list>
    <call>modules</call>
  </child>
  <child>
    <type>function</type>
    <name>vtkConfigurationManager_modules</name>
    <code_list>
Public Function vtkConfigurationManager_modules() As Collection
    Set vtkConfigurationManager_modules = modules
End Function
</code_list>
    <call>vtkConfigurationManager_modules</call>
  </child>
  <child>
    <type>function</type>
    <name>module</name>
    <code_list>
Public Function module(n As Integer) As String
    If n &gt; 0 And n &lt;= moduleCount Then
        module = m_DOMDocument.SelectSingleNode("/vtkConf/module[@mID=""m" &amp; n &amp; """]/name").Text
       Else
        module = ""
    End If
End Function
</code_list>
    <call>module</call>
    <call>module</call>
  </child>
  <child>
    <type>function</type>
    <name>vtkConfigurationManager_module</name>
    <code_list>
Public Function vtkConfigurationManager_module(n As Integer) As String
    vtkConfigurationManager_module = module(n)
End Function
</code_list>
    <call>vtkConfigurationManager_module</call>
  </child>
  <child>
    <type>function</type>
    <name>getModuleNumber</name>
    <code_list>
Public Function getModuleNumber(module As String) As Integer
    Dim textValue As String
   On Error Resume Next
    textValue = m_DOMDocument.SelectSingleNode("/vtkConf/module[name=""" &amp; module &amp; """]/@mID").Text
   On Error GoTo 0
    If textValue = "" Then
        getModuleNumber = 0
       Else
        getModuleNumber = CInt(Right$(textValue, Len(textValue) - 1))
    End If
End Function
</code_list>
    <call>module</call>
    <call>getModuleNumber</call>
    <call>getModuleNumber</call>
  </child>
  <child>
    <type>function</type>
    <name>vtkConfigurationManager_getModuleNumber</name>
    <code_list>
Public Function vtkConfigurationManager_getModuleNumber(module As String) As Integer
    vtkConfigurationManager_getModuleNumber = getModuleNumber(module)
End Function
</code_list>
    <call>vtkConfigurationManager_getModuleNumber</call>
  </child>
  <child>
    <type>function</type>
    <name>addModule</name>
    <code_list>
Public Function addModule(module As String) As Integer
    raiseReadOnlyError Source:="addModule:vtkConfigurationManagerXML"
End Function
</code_list>
    <call>raiseReadOnlyError</call>
  </child>
  <child>
    <type>function</type>
    <name>vtkConfigurationManager_addModule</name>
    <code_list>
Public Function vtkConfigurationManager_addModule(module As String) As Integer
    vtkConfigurationManager_addModule = addModule(module)
End Function
</code_list>
    <call>vtkConfigurationManager_addModule</call>
  </child>
  <child>
    <type>function</type>
    <name>getModulePathWithNumber</name>
    <code_list>
Public Function getModulePathWithNumber(numModule As Integer, numConfiguration As Integer) As String
    If numModule &gt; 0 And numModule &lt;= moduleCount And numConfiguration &gt; 0 And numConfiguration &lt;= configurationCount Then
       On Error Resume Next
        getModulePathWithNumber = m_DOMDocument.SelectSingleNode("/vtkConf/module[@mID=""m" &amp; numModule &amp; """]/modulePath[@confId=""c" &amp; numConfiguration &amp; """]").Text
       On Error GoTo 0
       Else
        getModulePathWithNumber = ""
    End If
End Function
</code_list>
    <call>getModulePathWithNumber</call>
    <call>getModulePathWithNumber</call>
  </child>
  <child>
    <type>function</type>
    <name>vtkConfigurationManager_getModulePathWithNumber</name>
    <code_list>
Public Function vtkConfigurationManager_getModulePathWithNumber(numModule As Integer, numConfiguration As Integer) As String
    vtkConfigurationManager_getModulePathWithNumber = getModulePathWithNumber(numModule, numConfiguration)
End Function
</code_list>
    <call>vtkConfigurationManager_getModulePathWithNumber</call>
  </child>
  <child>
    <type>sub</type>
    <name>setModulePathWithNumber</name>
    <code_list>
Public Sub setModulePathWithNumber(path As String, numModule As Integer, numConfiguration As Integer)
    raiseReadOnlyError Source:="setModulePathWithNumber:vtkConfigurationManagerXML"
End Sub
</code_list>
    <call>raiseReadOnlyError</call>
  </child>
  <child>
    <type>sub</type>
    <name>vtkConfigurationManager_setModulePathWithNumber</name>
    <code_list>
Public Sub vtkConfigurationManager_setModulePathWithNumber(path As String, numModule As Integer, numConfiguration As Integer)
    setModulePathWithNumber path, numModule, numConfiguration
End Sub
</code_list>
    <call>setModulePathWithNumber</call>
  </child>
  <child>
    <type>function</type>
    <name>references</name>
    <code_list>
Public Function references() As Collection
    Dim i As Integer, refs As New Collection, id As String
    For i = 1 To m_DOMDocument.SelectNodes("/vtkConf/reference").Length
        id = "r" &amp; i
        refs.Add vtkReferenceWithXML(id), Key:=id
    Next i
    Set references = refs
End Function
</code_list>
    <call>references</call>
  </child>
  <child>
    <type>function</type>
    <name>vtkConfigurationManager_references</name>
    <code_list>
Public Function vtkConfigurationManager_references() As Collection
    Set vtkConfigurationManager_references = references
End Function
</code_list>
    <call>vtkConfigurationManager_references</call>
  </child>
</child>